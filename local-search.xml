<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ES03-ES基本API</title>
    <link href="/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/"/>
    <url>/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/</url>
    
    <content type="html"><![CDATA[<h2 id="Rest风格说明"><a href="#Rest风格说明" class="headerlink" title="Rest风格说明"></a>Rest风格说明</h2><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id</td><td>创建文档（指定文档id）</td></tr><tr><td>POST</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称</td><td>创建文档（随机文档id）</td></tr><tr><td>POST</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id&#x2F;_update</td><td>修改文档</td></tr><tr><td>DELETE</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id</td><td>删除文档</td></tr><tr><td>GET</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id</td><td>查询文档通过文档id</td></tr><tr><td>POST</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;_search</td><td>查询所有数据</td></tr></tbody></table><h4 id="索引基础操作测试"><a href="#索引基础操作测试" class="headerlink" title="索引基础操作测试"></a>索引基础操作测试</h4><p>1、创建一个索引</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/索引名/</span>~类型名~/文档id<br>&#123;请求体&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220904233023179.png" alt="image-20220904233023179"></p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220904233115700.png" alt="image-20220904233115700"></p><p>完成了自动增加了索引，数据也成功添加了</p><p><strong>数据类型</strong></p><ul><li><p>字符串类型</p><p>text、keyword</p></li><li><p>数值类型</p><p>long,integer,short,byte,double,float,half float,scaled float</p></li><li><p>日期类型</p><p>date</p></li><li><p>布尔值类型</p><p>boolean</p></li><li><p>二进制类型</p><p>binary</p></li><li><p>…..</p></li></ul><p>2、指定字段类型创建索引</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220904233729140.png" alt="image-20220904233729140"></p><p>3、通过GET请求获得具体的信息</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220904234002468.png" alt="image-20220904234002468"></p><p>4、查看默认的信息</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220904234149355.png" alt="image-20220904234149355"></p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220904234232741.png" alt="image-20220904234232741"></p><p>如果自己的文档字段没有指定，那么es就会给我们默认配置字段类型</p><p>5、通过命令elasticsearch索引情况</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220904234548404.png" alt="image-20220904234548404"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> _cat/<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br></code></pre></td></tr></table></figure><p>6、修改索引</p><p>覆盖的方式：</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220904234845866.png" alt="image-20220904234845866"></p><p>更新的方式：</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220904235032899.png" alt="image-20220904235032899"></p><p>7、删除索引</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220904235136205.png" alt="image-20220904235136205"></p><p>通过DELETE命令实现删除对应的索引或文档记录。</p><h4 id="文档的基础操作"><a href="#文档的基础操作" class="headerlink" title="文档的基础操作"></a>文档的基础操作</h4><p>1、添加数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/ming/u</span>ser/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ming&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">6</span>,<br>  <span class="hljs-string">&quot;desc&quot;</span>: <span class="hljs-string">&quot;6666&quot;</span>,<br>  <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;技术宅&quot;</span>,<span class="hljs-string">&quot;温暖&quot;</span>,<span class="hljs-string">&quot;直男&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905094010670.png" alt="image-20220905094010670"></p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905094423401.png" alt="image-20220905094423401"></p><p>2、获取数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET ming<span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905094517652.png" alt="image-20220905094517652"></p><p>3、更新数据 PUT</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905094808703.png" alt="image-20220905094808703"></p><p>4、POST 更新数据（现在推荐使用这种更新方式）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/ming/u</span>ser<span class="hljs-regexp">/1/</span>_update<br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ming爱Java&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905095203840.png" alt="image-20220905095203840"></p><p><strong>注意：记得在后面加上&#x2F;_update</strong> ，否则其他没有修改或设置的数据将会被设为空值</p><h5 id="搜索操作"><a href="#搜索操作" class="headerlink" title="搜索操作"></a><strong>搜索操作</strong></h5><p>1、简单的搜索操作</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET ming<span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>2、简单的条件查询</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> ming/user/_search?<span class="hljs-attribute">q</span>=name:ming爱java<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905095621216.png" alt="image-20220905095621216"></p><p>简单的条件查询，可以根据默认的映射规则，产生基本的查询</p><p>3、复杂的操作查询 select (排序、分页、高亮、模糊查询、精准查询)</p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905100101774.png" alt="image-20220905100101774" style="zoom:67%;"><p>这里的score为匹配度，如果存在多条查询的数据，这个分值越高则匹配度越高。</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905100358752.png" alt="image-20220905100358752"></p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905100927657.png" alt="image-20220905100927657"></p><p><strong>结果过滤查询：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET ming<span class="hljs-regexp">/user/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;狂神&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905101111381.png" alt="image-20220905101111381"></p><p><strong>排序查询：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>升序<br>GET ming<span class="hljs-regexp">/user/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;狂神&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br><span class="hljs-regexp">//</span>降序<br>GET ming<span class="hljs-regexp">/user/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;狂神&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905101403038.png" alt="image-20220905101403038"></p><p><strong>分页查询：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET ming<span class="hljs-regexp">/user/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;狂神&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>      &#125;<br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905101544500.png" alt="image-20220905101544500"></p><p>注意：数据下标从0开始</p><p>前端接受请求？&#x3D;&gt; &#x2F;search&#x2F;{current}&#x2F;{pagesize}</p><p><strong>布尔值查询：</strong></p><p>多条件查询 must</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905125859977.png" alt="image-20220905125859977"></p><p>多条件查询 or</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905130052812.png" alt="image-20220905130052812"></p><p>must_not</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905130231870.png" alt="image-20220905130231870"></p><p><strong>过滤器</strong></p><p>&#x3D;&gt; 使用filter 进行数据过滤</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905130535269.png" alt="image-20220905130535269"></p><ul><li>gt 大于</li><li>gte 大于等于</li><li>lt 小于</li><li>lte 小于等于</li></ul><p><strong>匹配多个条件查询</strong></p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905131045757.png" alt="image-20220905131045757"></p><p><strong>精确查询</strong></p><p>&#x3D;&gt; term 查询直接通过倒排索引指定的词条进行精确的查找</p><ul><li>term，直接查询精确的</li><li>match,会使用分词器解析！（先分析文档，然后通过分析的文档进行查询）</li></ul><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905132151595.png" alt="image-20220905132151595"></p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905132226014.png" alt="image-20220905132226014"></p><p><strong>keyword 字段不会被分词器解析！</strong></p><p><strong>多个值匹配精度查询</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> testdb/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;should&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;t1&quot;</span>: <span class="hljs-string">&quot;22&quot;</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;t1&quot;</span>: <span class="hljs-string">&quot;33&quot;</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905132826091.png" alt="image-20220905132826091"></p><p><strong>高亮查询</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET ming<span class="hljs-regexp">/user/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;&#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905133142587.png" alt="image-20220905133142587"></p><p>自定义高亮：</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905133427648.png" alt="image-20220905133427648"></p><h2 id="集成SpringBoot"><a href="#集成SpringBoot" class="headerlink" title="集成SpringBoot"></a>集成SpringBoot</h2><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905164637776.png" alt="image-20220905164637776"></p><p>文档地址：<a href="https://www.elastic.co/guide/index.html">https://www.elastic.co/guide/index.html</a></p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905164742899.png" alt="image-20220905164742899"></p><p><strong>Elasticsearch Clients:</strong></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905165049407.png" alt="image-20220905165049407"></p><p>这里我们一般使用Java REST Client</p><p>一般选择高级客户端</p><p>文档地址：</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.6/java-rest-high-compatibility.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.6/java-rest-high-compatibility.html</a></p><p><strong>原生依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.6.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905165258085.png" alt="image-20220905165258085"></p><p><strong>对象的初始化</strong></p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905165334922.png" alt="image-20220905165334922"></p><p><strong>这个类中的基本方法</strong></p><h4 id="配置springboot"><a href="#配置springboot" class="headerlink" title="配置springboot"></a>配置springboot</h4><p>问题1：注意springboot自动导入的es依赖版本要和本地的版本一致</p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905170610932.png" alt="image-20220905170610932"></p><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905171214792.png" alt="image-20220905171214792"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、找对象</span><br><span class="hljs-comment">2、放到spring 中待用</span><br><span class="hljs-comment">3、分析源码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElasticsearchClientConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">restHighLevelClient</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">RestHighLevelClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(<br>                RestClient.builder(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHost</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9200</span>, <span class="hljs-string">&quot;http&quot;</span>)));<br>        <span class="hljs-keyword">return</span> client;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="API测试"><a href="#API测试" class="headerlink" title="API测试"></a>API测试</h4><p>1、创建索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试索引的创建</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreatIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1、创建索引请求</span><br>        <span class="hljs-type">CreateIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateIndexRequest</span>(<span class="hljs-string">&quot;ming_index&quot;</span>);<br>        <span class="hljs-comment">//2、客户端执行请求 indicesClient</span><br>        <span class="hljs-type">CreateIndexResponse</span> <span class="hljs-variable">createIndexResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);<br>        System.out.println(createIndexResponse);<br>    &#125;<br></code></pre></td></tr></table></figure><p>2、判断索引是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试获取索引</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testExistIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">GetIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetIndexRequest</span>(<span class="hljs-string">&quot;ming_index&quot;</span>);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> restHighLevelClient.indices().exists(request, RequestOptions.DEFAULT);<br>    System.out.println(exists);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、删除索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试删除索引</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">DeleteIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteIndexRequest</span>(<span class="hljs-string">&quot;ming_index&quot;</span>);<br>    <span class="hljs-type">AcknowledgedResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> restHighLevelClient.indices().delete(request, RequestOptions.DEFAULT);<br>    System.out.println(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>4、CRUD文档</p><p><strong>创建文档</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>       <span class="hljs-comment">//创建对象</span><br>       <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ming&quot;</span>,<span class="hljs-number">3</span>);<br>       <span class="hljs-comment">//创建请求</span><br>       <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;ming_index&quot;</span>);<br>       <span class="hljs-comment">// 规则 put /ming_index/_doc/1</span><br>       request.id(<span class="hljs-string">&quot;1&quot;</span>);<br>       request.timeout(TimeValue.timeValueSeconds(<span class="hljs-number">1</span>));<br>       request.timeout(<span class="hljs-string">&quot;1s&quot;</span>);<br>       <span class="hljs-comment">//将我们的数据放入请求 json</span><br>       request.source(JSON.toJSONString(user), XContentType.JSON);<br>       <span class="hljs-comment">//客户端发送请求</span><br>       <span class="hljs-type">IndexResponse</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> restHighLevelClient.index(request, RequestOptions.DEFAULT);<br>       System.out.println(index.toString());<br>       System.out.println(index.status());<br><br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES03-ES%E5%9F%BA%E6%9C%ACAPI/ES03-ES%E5%9F%BA%E6%9C%ACAPI/image-20220905220523382.png" alt="image-20220905220523382"></p><p><strong>查询文档是否存在</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取文档判断是否存在</span><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">testIsExistsDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-type">GetRequest</span> <span class="hljs-variable">getRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetRequest</span>(<span class="hljs-string">&quot;ming_index&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>      <span class="hljs-comment">//不获取返回的 _source的上下文</span><br>      getRequest.fetchSourceContext(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FetchSourceContext</span>(<span class="hljs-literal">false</span>));<br>      getRequest.storedFields(<span class="hljs-string">&quot;_none_&quot;</span>);<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> restHighLevelClient.exists(getRequest, RequestOptions.DEFAULT);<br>      System.out.println(exists);<br><br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>查询文档信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取文档信息</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">GetRequest</span> <span class="hljs-variable">getRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetRequest</span>(<span class="hljs-string">&quot;ming_index&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>    <span class="hljs-type">GetResponse</span> <span class="hljs-variable">getResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.get(getRequest, RequestOptions.DEFAULT);<br>    System.out.println(getResponse.getSourceAsString());<span class="hljs-comment">//打印文档内容</span><br>    System.out.println(getResponse); <span class="hljs-comment">//返回的全部内容和命令式一样的</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>更新文档的信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//更新文档的信息</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">UpdateRequest</span> <span class="hljs-variable">updateRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateRequest</span>(<span class="hljs-string">&quot;ming_index&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>        updateRequest.timeout(<span class="hljs-string">&quot;1s&quot;</span>);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ming6&quot;</span>, <span class="hljs-number">18</span>);<br>        updateRequest.doc(JSON.toJSONString(user), XContentType.JSON);<br><br>        <span class="hljs-type">UpdateResponse</span> <span class="hljs-variable">updateResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);<br>        System.out.println(updateResponse.status());<br><br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>删除文档</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">DeleteRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>(<span class="hljs-string">&quot;ming_index&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>    request.timeout(<span class="hljs-string">&quot;1s&quot;</span>);<br><br>    <span class="hljs-type">DeleteResponse</span> <span class="hljs-variable">deleteResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.delete(request, RequestOptions.DEFAULT);<br>    System.out.println(deleteResponse.status());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>批量插入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//批量插入数据</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBulkRequest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">BulkRequest</span> <span class="hljs-variable">bulkRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>();<br>    bulkRequest.timeout(<span class="hljs-string">&quot;10s&quot;</span>);<br>    ArrayList&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ming1&quot;</span>,<span class="hljs-number">3</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ming2&quot;</span>,<span class="hljs-number">4</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ming3&quot;</span>,<span class="hljs-number">5</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ming4&quot;</span>,<span class="hljs-number">6</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ming5&quot;</span>,<span class="hljs-number">7</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ming6&quot;</span>,<span class="hljs-number">8</span>));<br>    <span class="hljs-comment">//批处理请求</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; userList.size(); i++)&#123;<br>        <span class="hljs-comment">// 批量更新和批量删除，就在这里修改对应请求即可</span><br>        bulkRequest.add(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;ming_index&quot;</span>)<br>                        .id(<span class="hljs-string">&quot;&quot;</span>+(i+<span class="hljs-number">1</span>))<br>                        .source(JSON.toJSONString(userList.get(i)),XContentType.JSON)<br>        );<br>    &#125;<br>    <span class="hljs-type">BulkResponse</span> <span class="hljs-variable">bulk</span> <span class="hljs-operator">=</span> restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);<br>    System.out.println(bulk.hasFailures());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>查询操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//查询</span><br>    <span class="hljs-comment">//SearchRequest 搜索请求</span><br>    <span class="hljs-comment">//SearchSourceBuilder 条件构造</span><br>    <span class="hljs-comment">//HighlightBuilder 构建高亮</span><br>    <span class="hljs-comment">//TermQueryBuilder 精确查询</span><br>    <span class="hljs-comment">//MatchAllQueryBuilder 匹配所有</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSearch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;ming_index&quot;</span>);<br>        <span class="hljs-comment">//构建搜索条件 ？高亮、排序、...</span><br>        <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">sourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br>        <span class="hljs-comment">//查询条件  可以使用QueryBuilders 工具类来快速实现</span><br>        <span class="hljs-comment">//QueryBuilders.termQuery 精确匹配</span><br>        <span class="hljs-comment">//QueryBuilders.matchAllQuery 匹配所有</span><br>        <span class="hljs-type">TermQueryBuilder</span> <span class="hljs-variable">termQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.termQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;ming1&quot;</span>);<br><br>        sourceBuilder.query(termQueryBuilder);<br><span class="hljs-comment">//        sourceBuilder.from(); 分页</span><br><span class="hljs-comment">//        sourceBuilder.size();</span><br>        sourceBuilder.timeout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeValue</span>(<span class="hljs-number">60</span>, TimeUnit.SECONDS));<br><br>        searchRequest.source(sourceBuilder);<br><br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>        System.out.println(JSON.toJSONString(searchResponse.getHits()));<span class="hljs-comment">//所有的信息都在hits中</span><br>        System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br>        <span class="hljs-keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;<br>            System.out.println(documentFields.getSourceAsMap());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="京东搜索项目"><a href="#京东搜索项目" class="headerlink" title="京东搜索项目"></a>京东搜索项目</h2><p>使用了jsoup爬虫以及ES搜索 demo参考地址：<a href="https://github.com/he498/ElasticSearch_study/tree/master">https://github.com/he498/ElasticSearch_study/tree/master</a></p><p>参考于bilibili up主：遇见狂神说</p>]]></content>
    
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES02-ES核心概念及IK分词器</title>
    <link href="/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    <url>/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念"></a>ES核心概念</h2><p>&#x3D;&gt;集群、节点、索引、类型、文档、分片、映射？</p><p>Elasticsearch是面向文档</p><p>关系型数据库与elasticsearch 的对比</p><table><thead><tr><th>Relational DB</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>数据库(database)</td><td>索引(indices)</td></tr><tr><td>表(tables)</td><td>types</td></tr><tr><td>行(rows)</td><td>documents</td></tr><tr><td>字段(columns)</td><td>fields</td></tr></tbody></table><p>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型下又包含多个文档(行)，每个文档中又包含多个字段(列)</p><p><strong>物理设计</strong></p><p>elasticsearch在后台把每个<strong>索引划分成多个分片</strong>，每份分片可以在集群中的不同服务迁移。</p><p>一个人就是一个集群!默认的集群名称就是elaticsearch</p><p><img src="/Blog/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/image-20220904152733037.png" alt="image-20220904152733037"></p><p><strong>逻辑设计</strong></p><p>一个索引类型中，包含多个文档，比如文档1、文档2。当我们索引一篇文章时可以通过这样的一个顺序找到它：索引-&gt;类型-&gt;文档ID，通过这个组合我们就能索引到某个具体的文档。</p><p>注意：ID不必是整数，实际上它是个字符串</p><p><strong>文档</strong></p><p>​&#x3D;&gt;之前说elasticsearch是面向文档的,那么意味着索引和搜索数据的最小单位是文档,elasticsearch中,文档有几个重要属性:</p><ul><li>自我包含,一篇文档同时包含字段和对应的值,也就是同时包含key:value</li><li>可以是层次型的,一个文档中包含自文档,复杂的逻辑实体就是这么来的!</li><li>灵活的结构,文档不依赖先定义的模式,我们知道关系型数据库中,要提前定义字段才能使用,在elasticsearch中,对于字段是非常灵活的,有时候,我们可以忽略该字段,或者动态的添加一个新的字段.</li></ul><p>尽管我们可以随意的新增或者忽略某个字段,但是每个字段的类型非常重要,比如一个年龄字段类型,可以是字符串 也可以是整型。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p><p><strong>类型</strong></p><p>&#x3D;&gt; 类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。类型中对于字段的定义称为映射，比如name映射为字符串类型。我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么elasticsearch是怎么做的呢？elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整型。但是elasticsearch也可能猜不对，所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用。</p><p><strong>索引</strong></p><p>就是数据库！</p><p>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上了。我们来研究下分片是如何工作的。</p><p><strong>物理设计 ：节点和分片如何工作&#x3D;&gt;</strong></p><p>一个集群至少有一个节点，而一个节点就是一个elasticsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有5个分片(primary shard，又称主分片)构成的，每一个主分片会有一个副本（replica shard,又称复制分片）</p><p><img src="/Blog/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/image-20220904154508395.png" alt="image-20220904154508395"></p><p>上图是一个有3个节点的集群，可以看到主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉了，数据也不至于丢失。实际上，一个分片是一个Lucene索引，一个包含倒排索引的文件目录，倒排索引的结构使得elasticsearch在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。</p><p><strong>倒排索引？</strong></p><p>&#x3D;&gt;elasticsearch使用的是一种称为倒排索引的结构，采用Lucene倒排索引作为底层。这种结构适用于快速的全文搜索，一个索引由文档中所有不重复的列表构成，对于每一个词，都有包含他的文档列表。</p><p>例如，现在有两个文档：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Study every day, good good up to forever <span class="hljs-comment"># 文档1包含的内容</span><br>To forver, study every day, good good up <span class="hljs-comment"># 文档2包含的内容</span><br></code></pre></td></tr></table></figure><p>为了创建倒排索引，我们首先要将每个文档拆分成独立的词（或称为词条或者tokens）,然后创建一个包含所有不重复的词条的排序列表，然后列出每个词条出现在那个文档：</p><table><thead><tr><th>term</th><th>doc_1</th><th>doc_2</th></tr></thead><tbody><tr><td>Study</td><td>√</td><td>×</td></tr><tr><td>To</td><td>×</td><td>×</td></tr><tr><td>every</td><td>√</td><td>√</td></tr><tr><td>forever</td><td>√</td><td>√</td></tr><tr><td>day</td><td>√</td><td>√</td></tr><tr><td>study</td><td>×</td><td>√</td></tr><tr><td>good</td><td>√</td><td>√</td></tr><tr><td>every</td><td>√</td><td>√</td></tr><tr><td>to</td><td>√</td><td>×</td></tr><tr><td>up</td><td>√</td><td>√</td></tr></tbody></table><p>试图搜索to forver,只需要查看包含每个词条的文档</p><table><thead><tr><th>term</th><th>doc_1</th><th>doc_2</th></tr></thead><tbody><tr><td>to</td><td>√</td><td>×</td></tr><tr><td>forever</td><td>√</td><td>√</td></tr><tr><td>total</td><td>2</td><td>1</td></tr></tbody></table><p>两个文档都匹配，但是第一个文档比第二个匹配度更高。如果没有别的条件，现在这两个关键字的文档都将返回。</p><img src="/Blog/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/image-20220904160432608.png" alt="image-20220904160432608" style="zoom: 67%;"><p>如果要搜索含有python标签的文章，那相对于查找所有原始数据而言，查找倒排索引的数据将会快的多。只需要查看标签这一栏，然后获取相关文章ID即可。</p><blockquote><p>在elsticsearch中，索引被分为多个分片，每份 分片是一个Lucene的索引。所以一个elasticsearch索引是由多个Lucene索引组成的。</p></blockquote><h2 id="IK分词器插件"><a href="#IK分词器插件" class="headerlink" title="IK分词器插件"></a>IK分词器插件</h2><p>&#x3D;&gt;</p><p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词器是将每个字看成一个词，例如”你好啊”会被分为”你”，”好”，”啊”。但这样不符合要求，所以需要中文分词器ik来解决。</p><p>如果使用中文，建议使用ik分词器</p><p>IK提供了两个分词算法：ik_smart和ik_max_word，其中ik_smart为最少切分，ik_max_word为最细粒度划分！</p><p><strong>安装</strong></p><p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>下载完成后解压放入es的plugins中</p><p><img src="/Blog/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/image-20220904164851191.png" alt="image-20220904164851191"></p><p>重启ES即可</p><p><img src="/Blog/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/image-20220904165042690.png" alt="image-20220904165042690"></p><p>elasticsearch-plugin list可以通过这个命令来查看加载进来的插件</p><p><img src="/Blog/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/image-20220904165335867.png" alt="image-20220904165335867"></p><p><strong>使用Kibana测试</strong></p><p>查看不同的分词效果</p><ul><li>ik_smart</li></ul><img src="/Blog/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/image-20220904165747064.png" alt="image-20220904165747064" style="zoom:80%;"><ul><li>ik_max_word</li></ul><p><img src="/Blog/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/image-20220904165837479.png" alt="image-20220904165837479"></p><p><strong>如果需要自己的词，就需要加到字典中</strong></p><p><img src="/Blog/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/image-20220904170738446.png" alt="image-20220904170738446"></p><p>重启ES测试：</p><p><img src="/Blog/Blog/2022/09/14/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/ES02-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/image-20220904171044017.png" alt="image-20220904171044017"></p><p>发现刚刚加入的词”狂神“已经加入了字典</p>]]></content>
    
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES01-ES的环境配置</title>
    <link href="/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="ES的安装以及head插件安装"><a href="#ES的安装以及head插件安装" class="headerlink" title="ES的安装以及head插件安装"></a>ES的安装以及head插件安装</h2><p>ES最低要求：JDK1.8</p><p>ES镜像下载地址：</p><p><a href="https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D">https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D</a></p><h4 id="熟悉目录"><a href="#熟悉目录" class="headerlink" title="熟悉目录"></a><strong>熟悉目录</strong></h4><p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904102502001.png" alt="image-20220904102502001"></p><p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904102538761.png" alt="image-20220904102538761"></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bin </span>启动文件<br><span class="hljs-built_in">config</span> 配置文件<br>log4j2.properties 日志配置文件<br><span class="hljs-keyword">jvm.options </span><span class="hljs-keyword">java虚拟机相关配置</span><br><span class="hljs-keyword"></span>elasticsearch.yml elasticsearch 的配置文件 默认是<span class="hljs-number">9200</span>端口 跨域问题也在这里设置<br>lib 相关<span class="hljs-keyword">jar包</span><br><span class="hljs-keyword"></span>logs 日志！<br>modules 功能模块<br>plugins 插件！ ik<br></code></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904103117330.png" alt="image-20220904103117330"></p><p>双击bin目录下的<code>elasticsearch.bat</code></p><p><strong>访问测试：127.0.0.1:9200</strong></p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904103150620.png" alt="image-20220904103150620" style="zoom:67%;"><h4 id="head的安装"><a href="#head的安装" class="headerlink" title="head的安装"></a>head的安装</h4><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head/archive/master.zip">https://github.com/mobz/elasticsearch-head/archive/master.zip</a></p><p>注意：这里需要node环境</p><p>node与npm版本匹配：<a href="https://nodejs.org/zh-cn/download/releases/">https://nodejs.org/zh-cn/download/releases/</a></p><p>下载解压后，进入主要目录cmd内输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install <span class="hljs-regexp">//</span>下载对应依赖<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904110730852.png" alt="image-20220904110730852"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm run start <span class="hljs-comment">//启动head</span><br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904110802741.png" alt="image-20220904110802741"></p><p>访问9100 出现跨域问题：</p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904110842694.png" alt="image-20220904110842694" style="zoom:67%;"><p><strong>解决跨域问题：</strong></p><p>在elasticsearch 配置文件中配置</p><p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904111106975.png" alt="image-20220904111106975"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.enabled</span>: true<br>http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.allow-origin</span>: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p><strong>访问测试</strong></p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904111614278.png" alt="image-20220904111614278" style="zoom:67%;"><h2 id="了解ELK"><a href="#了解ELK" class="headerlink" title="了解ELK"></a>了解ELK</h2><p>​ELK是Elasticsearch、Logstash、Kibana 三大开源框架首字母大写简称。市面上也被称为Elastic Stack。其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可见Elasticsearch提供的搜索能力确实强大，市面上很多时候我们简称Elasticsearch为ES。Logstash是ELK的中央数据流引擎，用于从不同目标（文件&#x2F;数据存储&#x2F;MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件&#x2F;MQ&#x2F;redis&#x2F;elasticsearch&#x2F;kafka等）。Kibana可以将elasticsearch的数据通过友好的页面展示处理，提供实时分析的功能。</p><p>​市面上很多开发只要提到ELK能够一致说出它是一个日志分析架构技术总称，但实际上ELK不仅仅适用于日志分析，它还可以支持其他任何数据分析和收集的场景，日志分析和收集只是更具有代表性，并非一致性。</p><p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904114634647.png" alt="image-20220904114634647"></p><h2 id="Kibana的安装"><a href="#Kibana的安装" class="headerlink" title="Kibana的安装"></a>Kibana的安装</h2><p><strong>什么是Kibana?</strong></p><p>&#x3D;&gt;Kibana是一个数据分析和可视化平台，通常与Elasticsearch配合使用，用于对其中的数据进行搜索、分析，并且以统计图标的形式展示。</p><p>官网：<a href="https://www.elastic.co/cn/kibana">https://www.elastic.co/cn/kibana</a></p><p>Kibana版本要和es一致</p><p>下载地址：<a href="https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D">https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D</a></p><p><strong>解压后启动测试&#x3D;&gt;</strong></p><p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904131841939.png" alt="image-20220904131841939"></p><p><img src="/Blog/Blog/2022/09/14/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ES01-ES%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220904131851480.png" alt="image-20220904131851480"></p><p>汉化修改：</p><p>在kibana.yml中修改</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">i18n.locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC09-各种锁小结</title>
    <link href="/Blog/2022/09/14/JUC09-%E5%90%84%E7%A7%8D%E9%94%81%E5%B0%8F%E7%BB%93/"/>
    <url>/Blog/2022/09/14/JUC09-%E5%90%84%E7%A7%8D%E9%94%81%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="各种锁"><a href="#各种锁" class="headerlink" title="各种锁"></a>各种锁</h1><h4 id="1、公平锁、非公平锁"><a href="#1、公平锁、非公平锁" class="headerlink" title="1、公平锁、非公平锁"></a>1、公平锁、非公平锁</h4><p>公平锁：非常公平，不能够插队，必须先来后到</p><p>非公平锁：非常不公平，可以插队</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//lock 锁默认是非公平锁</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentranLock</span><span class="hljs-params">()</span>&#123;<br>    sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentranLock</span><span class="hljs-params">()</span>&#123;<br>    sync = fair ?<span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>():<span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、可重入锁"><a href="#2、可重入锁" class="headerlink" title="2、可重入锁"></a>2、可重入锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            phone.sms();<br>        &#125;,<span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-comment">//A中有重入锁，必须等A中的call调用完解锁才能到B</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            phone.sms();<br>        &#125;,<span class="hljs-string">&quot;B&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone2</span>&#123;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-comment">//锁必须配对，否则会死锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sms</span><span class="hljs-params">()</span>&#123;<br>        lock.lock();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;sms&quot;</span>);<br>            call(); <span class="hljs-comment">//这里也有锁</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;call&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、自旋锁"><a href="#3、自旋锁" class="headerlink" title="3、自旋锁"></a>3、自旋锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ming.lock;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicReference;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自旋锁</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpinlockDemo</span> &#123;<br>    AtomicReference&lt;Thread&gt; atomicReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//加锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myLock</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;==&gt;mylock&quot;</span>);<br>        <span class="hljs-keyword">while</span>(!atomicReference.weakCompareAndSet(<span class="hljs-literal">null</span>,thread))&#123;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//加锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myUnLock</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;==&gt;myunlock&quot;</span>);<br>        atomicReference.compareAndSet(thread,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ming.lock;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">//T1==&gt;mylock</span><br><span class="hljs-comment">//T2==&gt;mylock</span><br><span class="hljs-comment">//T1==&gt;myunlock</span><br><span class="hljs-comment">//T2==&gt;myunlock</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSpinLock</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">SpinlockDemo</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpinlockDemo</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            lock.myLock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.myUnLock();<br>            &#125;<br><br>        &#125;,<span class="hljs-string">&quot;T1&quot;</span>).start();<br><br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            lock.myLock();<br>            <span class="hljs-keyword">try</span> &#123;<br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.myUnLock();<br>            &#125;<br><br>        &#125;,<span class="hljs-string">&quot;T2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、死锁排查"><a href="#4、死锁排查" class="headerlink" title="4、死锁排查"></a>4、死锁排查</h4><p><img src="/Blog/Blog/2022/09/14/JUC09-%E5%90%84%E7%A7%8D%E9%94%81%E5%B0%8F%E7%BB%93/JUC09-%E5%90%84%E7%A7%8D%E9%94%81%E5%B0%8F%E7%BB%93/image-20220725164042757.png" alt="image-20220725164042757"></p><p>死锁：<strong>在多道程序环境中，多个进程可以竞争有限数量的资源。当一个进程申请资源时，如果这时没有可用资源，那么这个进程进入等待状态。有时，如果所申请的资源被其他等待进程占有，那么该等待进程有可能再也无法改变状态。这种情况称为死锁。</strong>(即多个线程争抢有限的共享资源，线程间互相等待对方释放资源形成死循环而造成死锁)</p><p>死锁的四个必要条件：</p><ol><li><strong>互斥条件:</strong> 一个资源每次只能被一个进程使用;</li><li><strong>请求与保持条件</strong>: 一个进程因请求资源而阻塞时,对已获得的资源保持不放;</li><li><strong>不剥夺条件</strong>: 进程已获得的资源,在末使用完之前,不能强行剥夺;</li><li><strong>循环等待条件</strong>: 若干进程之间形成一种头尾相接的循环等待资源关系;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ming.lock;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLockDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lockA&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockB</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lockB&quot;</span>;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(lockA,lockB),<span class="hljs-string">&quot;T1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(lockB,lockA),<span class="hljs-string">&quot;T2&quot;</span>).start();<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> String lockA;<br>    <span class="hljs-keyword">private</span> String lockB;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String lockA,String lockB)</span>&#123;<br>        <span class="hljs-built_in">this</span>.lockA = lockA;<br>        <span class="hljs-built_in">this</span>.lockB = lockB;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lockA)&#123;<br>            System.out.println(Thread.currentThread().getName()+ <span class="hljs-string">&quot;lock:&quot;</span>+lockA+<span class="hljs-string">&quot;=&gt;lock:&quot;</span>+lockB);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (lockB)&#123;<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>解决方法</p></blockquote><p>1、使用 jps -l 定位进程号</p><p>2、使用jstack 进程号 找到死锁问题</p>]]></content>
    
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC08-CAS及原子引用</title>
    <link href="/Blog/2022/09/14/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/"/>
    <url>/Blog/2022/09/14/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><h4 id="什么是CAS？"><a href="#什么是CAS？" class="headerlink" title="什么是CAS？"></a>什么是CAS？</h4><p>&#x3D;&gt;CAS   – compareAndSet : 比较并交换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CASDemo</span> &#123;<br>    <span class="hljs-comment">//CAS compareAndSet : 比较并交换</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">atomicInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">2020</span>);<br>        <span class="hljs-comment">//期望的值 ，更新的值</span><br><span class="hljs-comment">//        public final boolean compareAndSet(int expect, int update)</span><br>        <span class="hljs-comment">//如果期望的值达到了，那么就更新，否则就不更新，CAS是CPU的并发原语</span><br>        <span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//2021</span><br>        <span class="hljs-comment">//false</span><br>        <span class="hljs-comment">//2021</span><br>        System.out.println(atomicInteger.compareAndSet(<span class="hljs-number">2020</span>, <span class="hljs-number">2021</span>));<br>        System.out.println(atomicInteger.get());<br>        System.out.println(atomicInteger.compareAndSet(<span class="hljs-number">2020</span>, <span class="hljs-number">2021</span>));<br>        System.out.println(atomicInteger.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Unsafe类？"><a href="#Unsafe类？" class="headerlink" title="Unsafe类？"></a>Unsafe类？</h4><p>&#x3D;&gt;Java 无法直接操作内存，通过调用C++(native)去操作内存，而Unsafe类就是Java的内存，通过它可以去操作内存<img src="/Blog/Blog/2022/09/14/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/image-20220725003555930.png" alt="image-20220725003555930"></p><p><img src="/Blog/Blog/2022/09/14/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/image-20220725003623404.png" alt="image-20220725003623404"></p><blockquote><p>getAndIncrement()</p></blockquote><p><img src="/Blog/Blog/2022/09/14/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/image-20220725003809096.png"></p><p><img src="/Blog/Blog/2022/09/14/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/image-20220725003901805.png" alt="image-20220725003901805"></p><p>最后：</p><p><strong>CAS会涉及到ABA问题！</strong></p><h1 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h1><h4 id="什么是ABA问题？"><a href="#什么是ABA问题？" class="headerlink" title="什么是ABA问题？"></a>什么是ABA问题？</h4><p>&#x3D;&gt;  CAS机制的原理由CPU支持的原子操作，其原子性是在硬件层面进行保证的。而CAS机制可能会出现ABA问题，<strong>即T1读取内存变量为A,T2修改内存变量为B,T2修改内存变量为A,这时T1再CAS操作A时是可行的。但实际上在T1第二次操作A时，已经被其他线程修改过了。</strong></p><p><img src="/Blog/Blog/2022/09/14/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/JUC08-CAS%E5%8F%8A%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8/image-20220725151926580.png" alt="image-20220725151926580"></p><p>ABA问题解决：带版本号的原子操作！</p><p>坑：<strong>Integer使用了对象缓存机制，默认范围是 -128 ~ 127,推荐使用静态工厂方法value Of获取对象实例，而不是new,因为value Of使用缓存，而 new 一定会创建新的对象分配新的内存空间；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果泛型是包装类，注意引用类型</span><br>       AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicStampedReference</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> atomicStampedReference.getStamp(); <span class="hljs-comment">//获得版本号</span><br>           System.out.println(<span class="hljs-string">&quot;a1=&gt;&quot;</span>+stamp);<br>           <span class="hljs-keyword">try</span> &#123;<br>               TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>           &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>               e.printStackTrace();<br>           &#125;<br>           System.out.println(atomicStampedReference.compareAndSet(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="hljs-number">1</span>));<br>           System.out.println(<span class="hljs-string">&quot;a2=&gt;&quot;</span>+atomicStampedReference.getStamp());<br>           System.out.println(atomicStampedReference.compareAndSet(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="hljs-number">1</span>));<br>           System.out.println(<span class="hljs-string">&quot;a3=&gt;&quot;</span>+atomicStampedReference.getStamp());<br><br>       &#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> atomicStampedReference.getStamp();<br>           System.out.println(<span class="hljs-string">&quot;b1=&gt;&quot;</span>+stamp);<br>           <span class="hljs-keyword">try</span> &#123;<br>               TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>           &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>               e.printStackTrace();<br>           &#125;<br>           System.out.println(atomicStampedReference.compareAndSet(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, stamp, stamp + <span class="hljs-number">1</span>));<br>           System.out.println(<span class="hljs-string">&quot;b1=&gt;&quot;</span>+atomicStampedReference.getStamp());<br><br>       &#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC07-玩转单例模式</title>
    <link href="/Blog/2022/09/14/JUC07-%E7%8E%A9%E8%BD%AC%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/Blog/2022/09/14/JUC07-%E7%8E%A9%E8%BD%AC%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="彻底玩转单例模式"><a href="#彻底玩转单例模式" class="headerlink" title="彻底玩转单例模式"></a>彻底玩转单例模式</h1><blockquote><p>饿汉式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//饿汉式单例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hungry</span> &#123;<br><br>    <span class="hljs-comment">//可能会浪费空间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] data1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] data2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] data3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] data4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Hungry</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Hungry</span> <span class="hljs-variable">HUNGRY</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hungry</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hungry <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> HUNGRY;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>DCL 懒汉式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//懒汉式单例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMan</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">check</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LazyMan</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//加锁</span><br><span class="hljs-comment">//        synchronized (LazyMan.class)&#123;</span><br><span class="hljs-comment">//            if (lazyMan!=null)&#123;</span><br><span class="hljs-comment">//                throw new RuntimeException(&quot;不要试图使用反射破坏异常&quot;);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//增加 标志位 check</span><br>        <span class="hljs-keyword">synchronized</span> (LazyMan.class)&#123;<br>            <span class="hljs-keyword">if</span> (check == <span class="hljs-literal">false</span>)&#123;<br>                check = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;不要试图使用反射破坏异常&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> LazyMan lazyMan;<br><br>    <span class="hljs-comment">//双重检测锁模式 懒汉式单例 DCL懒汉式</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (lazyMan==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (LazyMan.class)&#123;<br>                <span class="hljs-keyword">if</span>(lazyMan==<span class="hljs-literal">null</span>)&#123;<br>                    lazyMan = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMan</span>(); <span class="hljs-comment">//不是原子性操作</span><br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 1、分配内存空间</span><br><span class="hljs-comment">                     * 2、执行构造方法，初始化对象</span><br><span class="hljs-comment">                     * 3、把这个对象指向这个空间</span><br><span class="hljs-comment">                     *</span><br><span class="hljs-comment">                     * 当多线程下， 线程A lazyman 还没有构造完毕，B线程进来，就会走lazyman!=null 所以需要加上volatile 避免指令重排和保证可见性。</span><br><span class="hljs-comment">                     */</span><br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> lazyMan;<br>    &#125;<br><br><br><span class="hljs-comment">//    //单线程下没问题，但多线程下会出问题，需要加锁</span><br><span class="hljs-comment">//    public static void main(String[] args) &#123;</span><br><span class="hljs-comment">//        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="hljs-comment">//            new Thread(()-&gt;&#123;</span><br><span class="hljs-comment">//                LazyMan.getInstance();</span><br><span class="hljs-comment">//            &#125;).start();</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">//反射获取！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        LazyMan instance = LazyMan.getInstance();</span><br><span class="hljs-comment">//        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(null);</span><br><span class="hljs-comment">//        declaredConstructor.setAccessible(true); //无视私有构造器</span><br><span class="hljs-comment">//        LazyMan instance2 = declaredConstructor.newInstance();</span><br><span class="hljs-comment">//        System.out.println(instance);</span><br><span class="hljs-comment">//        System.out.println(instance2);</span><br>        <span class="hljs-comment">//com.ming.single.LazyMan@1540e19d</span><br>        <span class="hljs-comment">//com.ming.single.LazyMan@677327b6</span><br>        <span class="hljs-comment">//解决办法：构造器加锁！</span><br><br><br><span class="hljs-comment">//        LazyMan instance = LazyMan.getInstance();</span><br>        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class="hljs-literal">null</span>);<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>); <span class="hljs-comment">//无视私有构造器</span><br>        <span class="hljs-type">LazyMan</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        <span class="hljs-type">LazyMan</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        System.out.println(instance1);<br>        System.out.println(instance2);<br><span class="hljs-comment">//        com.ming.single.LazyMan@1540e19d</span><br><span class="hljs-comment">//        com.ming.single.LazyMan@677327b6</span><br>        <span class="hljs-comment">//解决办法： 设置 一个标志位 private static boolean check = false;</span><br><br>        <span class="hljs-comment">//若找到内部设置的隐藏的变量仍可以破解： Field check = LazyMan.class.getDeclaredField(&quot;check&quot;);</span><br>        <span class="hljs-comment">//                               check.setAccessible(true);</span><br>        <span class="hljs-comment">//                               LazyMan instance1 = declaredConstructor.newInstance();</span><br>        <span class="hljs-comment">//                               check.set(instance,false);</span><br>        <span class="hljs-comment">//                               LazyMan instance2 = declaredConstructor.newInstance();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>静态内部类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态内部类</span><br><span class="hljs-comment">//也是不安全，可以通过反射破解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Holder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Holder</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Holder <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> InnerClass.HOLDER;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Holder</span> <span class="hljs-variable">HOLDER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Holder</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>单例不安全！可以通过反射破解！</p><p>枚举类可以不被反射破解！</p><blockquote><p>枚举类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// enum? =&gt; 枚举本事也是Class类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">EnumSingle</span> &#123;<br>    INSTANCE;<br>    <span class="hljs-keyword">public</span> EnumSingle <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">EnumSingle</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> EnumSingle.INSTANCE;<br><span class="hljs-comment">//        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(null);</span><br>        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(String.class,<span class="hljs-type">int</span>.class);<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">EnumSingle</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        <span class="hljs-comment">//Exception in thread &quot;main&quot; java.lang.NoSuchMethodException: com.ming.single.EnumSingle.&lt;init&gt;()</span><br>        <span class="hljs-comment">//没有空参构造器，需要去源码分析  javap -p EnumSingle.class 发现里面也有空参构造器</span><br>        <span class="hljs-comment">// 需要使用jad 反编译 发现里面是一个有参构造器</span><br><br>        <span class="hljs-comment">//最后成功获得预期的报错：  Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Cannot reflectively create enum objects</span><br>        <span class="hljs-comment">//不能破坏枚举的单例</span><br>        System.out.println(instance1);<br>        System.out.println(instance2);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC06-JMM</title>
    <link href="/Blog/2022/09/14/JUC06-JMM/"/>
    <url>/Blog/2022/09/14/JUC06-JMM/</url>
    
    <content type="html"><![CDATA[<h1 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h1><h4 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile?"></a>Volatile?</h4><p>&#x3D;&gt; 是Java虚拟机轻量级的同步机制。</p><ol><li>保证可见性</li><li>不保证原子性</li><li>禁止指令重排</li></ol><h4 id="JMM？"><a href="#JMM？" class="headerlink" title="JMM？"></a>JMM？</h4><p>&#x3D;&gt; Java内存模型，是一个不存在的东西，是一个概念，约定！</p><p>关于JMM的一些同步约定：</p><ol><li>线程解锁前必须把共享变量立刻刷回主存</li><li>线程加锁前，必须读取主存中的最新值到工作内存中</li><li>加锁和解锁是同一把锁</li></ol><p>八大操作：</p><p><img src="/Blog/Blog/2022/09/14/JUC06-JMM/JUC06-JMM/image-20220722042116173.png" alt="image-20220722042116173"></p><p>问题所在：线程A使用的Flag 不能及时所见</p><p><img src="/Blog/Blog/2022/09/14/JUC06-JMM/JUC06-JMM/image-20220722042444133.png" alt="image-20220722042444133"></p><ol><li>read(读取)：<br>从主存中读取数据</li><li>load(载入)：<br>将主存读取到的数据写入工作内存中</li><li>use(使用)：<br>从工作内存读取数据做计算</li><li>assign(赋值)：<br>将计算好的值重新赋值到工作内存中</li><li>store(存储)：<br>将工作内存数据写入主存</li><li>write(写入)：<br>将store过去的变量值赋值给主存中的变量(更新主存)</li><li>lock(锁定)：<br>将主存变量加锁，标识为线程独占状态</li><li>unlock(解锁)：<br>将主存变量解锁，解锁以后其它线程就可以锁定该变量。</li></ol><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>read和load，write和store必须成对出现，顺序执行（但不用连续执行）</li><li>assign操作不允许丢弃，即，工作内存中变量改变必须同步给主内存</li><li>use前必须有load，store前必须有assign</li><li>同一时间一个变量只能被一个线程lock，但该线程可对其lock多次，lock多少次，必须对应unlock对应次数才能解锁</li><li>如果一个线程lock了某个变量，改变量在工作内存中的值会被清空，使用前必须</li><li>unlock前必须要把该变量写回主存</li></ul><h1 id="Volatile-1"><a href="#Volatile-1" class="headerlink" title="Volatile"></a>Volatile</h1><h4 id="1、保证可见性"><a href="#1、保证可见性" class="headerlink" title="1、保证可见性"></a>1、保证可见性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//加入volatile 后可以保证在线程中 num 变量一直是最新的 ,不加入时线程不知道num已经改变会一直循环执行 //可验证其可见性！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-comment">//main 线程</span><br><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span> (num==<span class="hljs-number">0</span>)&#123;<br><br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        num = <span class="hljs-number">1</span>;<br>        System.out.println(num);<br><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2、不保证原子性"><a href="#2、不保证原子性" class="headerlink" title="2、不保证原子性"></a>2、不保证原子性</h4><p>原子性：不可分割</p><p>线程A在执行任务的时候是不能被打扰的也不能被分割。要么同时成功，要么同时失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//不保证原子性</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VDemo02</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        num++;<br>    &#125;<br>    <span class="hljs-comment">//理论上互不干扰，结果为2w ,多线程存在同步执行问题，volatile 不保证原子性  //main 19886</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span> ; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1000</span>; j++) &#123;<br>                    add();<br>                &#125;<br>            &#125;).start();<br>        &#125;<br>        <span class="hljs-keyword">while</span> (Thread.activeCount()&gt;<span class="hljs-number">2</span>)&#123; <span class="hljs-comment">//main gc</span><br>            Thread.yield();<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + num);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2、如果不加synchronized 和 lock 如何保证原子性？</p><p><img src="/Blog/Blog/2022/09/14/JUC06-JMM/JUC06-JMM/image-20220724143732037.png" alt="image-20220724143732037"></p><p>使用原子类，可以解决原子性 问题</p><img src="/Blog/Blog/2022/09/14/JUC06-JMM/image-20220724143953950.png" alt="image-20220724143953950" style="zoom: 80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//原子类的 Integer</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        num.getAndIncrement(); <span class="hljs-comment">// +1 方法 底层用的是 CAS</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>这些类的底层直接和操作系统挂钩可以在内存中修改值，比锁更高效！unsafe类！</p><h4 id="3、禁止指令重排"><a href="#3、禁止指令重排" class="headerlink" title="3、禁止指令重排"></a>3、禁止指令重排</h4><blockquote><p>什么是指令重排？？</p></blockquote><p>你写的程序代码顺序，计算机底层并不是按照你写的顺序去执行。</p><p>源代码–&gt;编译器优化重排–&gt;指令并行也可能重排–&gt;内存系统会重排 –&gt; 执行</p><p><strong>处理器在进行指令重排的时候会考虑数据之间的依赖性！</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm">int <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">; //1</span><br>int <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">; //2</span><br><span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">x</span> + <span class="hljs-number">5</span><span class="hljs-comment">; //3</span><br>y <span class="hljs-operator">=</span> <span class="hljs-keyword">x</span> * <span class="hljs-keyword">x</span><span class="hljs-comment">; //4</span><br><br>期望的顺序：<span class="hljs-number">1234</span>    有可能指令重排： <span class="hljs-number">2134</span> <span class="hljs-number">1324</span><br>但不可能会 <span class="hljs-number">4123</span>!<br></code></pre></td></tr></table></figure><p>可能造成的结果：a b x y 这四个值默认都是0；</p><table><thead><tr><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>x&#x3D;a</td><td>y&#x3D;b</td></tr><tr><td>b&#x3D;1</td><td>a&#x3D;2</td></tr></tbody></table><p>正常执行后 x&#x3D; 0 ；y &#x3D; 0 但由于指令重排可能会：</p><table><thead><tr><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>b&#x3D;1</td><td>a&#x3D;2</td></tr><tr><td>x&#x3D;a</td><td>y&#x3D;b</td></tr></tbody></table><p>这样就会影响了结果导致x &#x3D; 2;y &#x3D; 1;</p><p>加入volatile 可以避免指令重排</p><p>内存屏障—CPU指令。作用：</p><ol><li>保证特定的操作执行顺序！</li><li>可以保证某些变量的内存可见性</li></ol><img src="/Blog/Blog/2022/09/14/JUC06-JMM/image-20220724150016640.png" alt="image-20220724150016640" style="zoom: 67%;">]]></content>
    
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC05-流式计算和ForkJoin</title>
    <link href="/Blog/2022/09/14/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/"/>
    <url>/Blog/2022/09/14/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/</url>
    
    <content type="html"><![CDATA[<h1 id="Stream流式计算"><a href="#Stream流式计算" class="headerlink" title="Stream流式计算"></a>Stream流式计算</h1><blockquote><p>什么是Stream流式计算？</p></blockquote><p>大数据： 存储 + 计算</p><p>集合、Mysql 的本质是存储，计算应该交给流操作</p><p><img src="/Blog/Blog/2022/09/14/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/image-20220720012437281.png" alt="image-20220720012437281"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  现在有五个用户需要筛选：</span><br><span class="hljs-comment"> *  1、ID 必须是偶数</span><br><span class="hljs-comment"> *  2、年龄必须大于23岁</span><br><span class="hljs-comment"> *  3、用户名转为大写字母</span><br><span class="hljs-comment"> *  4、用户名字母倒着排序</span><br><span class="hljs-comment"> *  5、只输出一个用户！</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">21</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">22</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">24</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-number">26</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-number">27</span>);<br><br>        List&lt;User&gt; list = Arrays.asList(u1,u2,u3,u4,u5);<br><br>        list.stream()<br>                .filter(u-&gt;&#123;<span class="hljs-keyword">return</span> u.getId()%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>;&#125;)  <span class="hljs-comment">//断定型接口</span><br>                .filter(user -&gt; &#123;<span class="hljs-keyword">return</span> user.getAge()&gt;<span class="hljs-number">23</span>;&#125;)<br>                .map(user -&gt; &#123;<br>                    user.setName(user.getName().toUpperCase(Locale.ROOT)); <span class="hljs-keyword">return</span> user;<br>                &#125;) <span class="hljs-comment">//函数式接口</span><br>                .sorted((uu1,uu2) -&gt; &#123;<span class="hljs-keyword">return</span> uu2.getName().compareTo(uu1.getName());&#125;)<br>                .limit(<span class="hljs-number">1</span>) <br>                .forEach(System.out::println);<br><br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h1><p> ForkJoin –&gt; 在jdk1.7之后，并行执行任务，提高效率！</p><p>大数据：Map Reduce(把大任务拆分成小任务)</p><p> <img src="/Blog/Blog/2022/09/14/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/image-20220720154237631.png" alt="image-20220720154237631"></p><blockquote><p>ForkJoin 工作特点：工作窃取</p></blockquote><p><img src="/Blog/Blog/2022/09/14/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/image-20220720154536444.png" alt="image-20220720154536444"></p><blockquote><p>ForkJoin 的使用</p></blockquote><p><img src="/Blog/Blog/2022/09/14/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/image-20220720155759423.png" alt="image-20220720155759423"></p><p><img src="/Blog/Blog/2022/09/14/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/image-20220720155919300.png" alt="image-20220720155919300"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如何使用 forkjoin?</span><br><span class="hljs-comment"> * 1、forkjoinPool 通过它来执行</span><br><span class="hljs-comment"> * 2、计算任务 forkjoinPoll.execute(ForkJoinTask task)</span><br><span class="hljs-comment"> * 3、计算类继承 ForkJoinTask （RecursiveTask、 RecursiveAction)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkJoinDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecursiveTask</span>&lt;Long&gt; &#123;<br>    <span class="hljs-keyword">private</span> Long start;<br>    <span class="hljs-keyword">private</span> Long end;<br><br>    <span class="hljs-comment">//临界值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Long</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ForkJoinDemo</span><span class="hljs-params">(Long start,Long end)</span>&#123;<br>        <span class="hljs-built_in">this</span>.start = start;<br>        <span class="hljs-built_in">this</span>.end = end;<br>    &#125;<br><br>    <span class="hljs-comment">//计算方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Long <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> ((end-start) &lt; temp)&#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">Long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= end; i++) &#123;<br>                sum += i;<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> (start + end) / <span class="hljs-number">2</span>;<br>            <span class="hljs-type">ForkJoinDemo</span> <span class="hljs-variable">task1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinDemo</span>(start,middle);<br>            task1.fork(); <span class="hljs-comment">//拆分任务，把任务压入线程队列</span><br>            <span class="hljs-type">ForkJoinDemo</span> <span class="hljs-variable">task2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinDemo</span>(middle+<span class="hljs-number">1</span>,end);<br>            task2.fork();<br>            <span class="hljs-keyword">return</span> task1.join() + task2.join();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//forkjoin sum=500000000500000000时间：4771  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">ForkJoinPool</span> <span class="hljs-variable">forkJoinPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinPool</span>();<br>        ForkJoinTask&lt;Long&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinDemo</span>(<span class="hljs-number">0L</span>, <span class="hljs-number">10_0000_0000L</span>);<br>        ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(task);<span class="hljs-comment">// 提交任务</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> submit.get();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;sum=&quot;</span>+sum+<span class="hljs-string">&quot;时间：&quot;</span>+(end-start));<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h1><p>Future 设计初衷：对将来的某个事件的结果建模</p><p><img src="/Blog/Blog/2022/09/14/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/image-20220722034117342.png" alt="image-20220722034117342"></p><hr><p><strong>CompletableFuture :</strong></p><p><img src="/Blog/Blog/2022/09/14/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/JUC05-%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%92%8CForkJoin/image-20220722034141766.png" alt="image-20220722034141766"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  异步调用 CompletableFuture</span><br><span class="hljs-comment"> *  //异步执行</span><br><span class="hljs-comment"> *  //成功回调</span><br><span class="hljs-comment"> *  //失败回调</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><span class="hljs-comment">//        //没有返回值的异步回调</span><br><span class="hljs-comment">//        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="hljs-comment">//            try &#123;</span><br><span class="hljs-comment">//                TimeUnit.SECONDS.sleep(2);</span><br><span class="hljs-comment">//            &#125; catch (InterruptedException e) &#123;</span><br><span class="hljs-comment">//                e.printStackTrace();</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            System.out.println(Thread.currentThread().getName()+&quot;runAsync=&gt;Void&quot;);</span><br><span class="hljs-comment">//        &#125;);</span><br><span class="hljs-comment">//        System.out.println(&quot;11111&quot;); //这里会先打印出来然后阻塞等待异步执行</span><br><span class="hljs-comment">//        completableFuture.get(); //获取执行结果</span><br><br>        <span class="hljs-comment">// 有返回值. supplyAsync 异步回调</span><br>        <span class="hljs-comment">// 成功和失败的回调</span><br>        <span class="hljs-comment">// 返回的是错误信息</span><br>        CompletableFuture&lt;Integer&gt; completableFuture = CompletableFuture.supplyAsync(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;completableFuture=&gt;Integer&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>        &#125;);<br><br>        completableFuture.whenComplete((t,u)-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;t=&gt;&quot;</span>+t);  <span class="hljs-comment">//编译成功时回调的t 是正常成功的返回值   异常时t为null</span><br>            System.out.println(<span class="hljs-string">&quot;u=&gt;&quot;</span>+u); <span class="hljs-comment">//没有错误时是null , 错误时u为错误信息 u=&gt;java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</span><br>        &#125;).exceptionally(e-&gt;&#123;<br>            System.out.println(e.getMessage()); <span class="hljs-comment">//打印错误信息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">233</span>; <span class="hljs-comment">// 当错误时可以返回错误结果</span><br>        &#125;);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *  200 500 404</span><br><span class="hljs-comment">         */</span><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>个人理解：有点类似于ES6的 Promise </p>]]></content>
    
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC04-线程池和函数式接口</title>
    <link href="/Blog/2022/09/14/JUC04-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <url>/Blog/2022/09/14/JUC04-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>三大方法、七大参数、四种拒绝策略</p><blockquote><h4 id="池化技术"><a href="#池化技术" class="headerlink" title="池化技术"></a>池化技术</h4></blockquote><p>程序的运行，本质：占用系统的资源！优化资源的使用！&#x3D;&gt; 池化技术</p><p>线程池、连接池、内存池、对象池…….  创建销毁时十分浪费资源</p><p>池化技术： 事先准备好一些资源，有人要用就来这里拿，用完之后再还回来。</p><p><strong>线程池的好处：</strong></p><ol><li>降低资源的消耗</li><li>提高响应速度</li><li>方便管理</li></ol><p><strong>线程复用、可以控制最大并发数、管理线程</strong></p><blockquote><h4 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h4></blockquote><ol><li><strong>Executors.newSingleThreadExecutor()</strong></li><li><strong>Executors.newFixedThreadPool(5)</strong></li><li><strong>Executors.newCachedThreadPool()</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Executors 创建线程池工具类</span><br><span class="hljs-comment">//        ExecutorService threadPool = Executors.newSingleThreadExecutor(); //单个线程</span><br><span class="hljs-comment">//        ExecutorService threadPool = Executors.newFixedThreadPool(5);//创建一个固定的线程池大小</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<span class="hljs-comment">//可伸缩，自适应线程池大小</span><br></code></pre></td></tr></table></figure><blockquote><h4 id="七大参数"><a href="#七大参数" class="headerlink" title="七大参数"></a>七大参数</h4></blockquote><p>三大方法的源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newSingleThreadExecutor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FinalizableDelegatedExecutorService</span><br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                                <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<br>                                      <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());<br>    &#125;<br>    <br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newCachedThreadPool</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">0</span>, Integer.MAX_VALUE,   <span class="hljs-comment">//约等于21亿 OOM 溢出</span><br>                                      <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;Runnable&gt;());<br>    &#125;<br>    <br><br></code></pre></td></tr></table></figure><p>本质上都是调用 ThreadPoolExecutor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize, //核心线程池大小</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize, //最大核心线程池大小</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,  //超时等待，超时了没有人调用就会释放</span><br><span class="hljs-params">                          TimeUnit unit, //超时单位</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue, //阻塞队列</span><br><span class="hljs-params">                          ThreadFactory threadFactory, //线程工厂</span><br><span class="hljs-params">                          RejectedExecutionHandler handler)</span> &#123;   <span class="hljs-comment">//拒绝策略</span><br>    <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt; corePoolSize ||<br>        keepAliveTime &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-literal">null</span> || threadFactory == <span class="hljs-literal">null</span> || handler == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-built_in">this</span>.corePoolSize = corePoolSize;<br>    <span class="hljs-built_in">this</span>.maximumPoolSize = maximumPoolSize;<br>    <span class="hljs-built_in">this</span>.workQueue = workQueue;<br>    <span class="hljs-built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br>    <span class="hljs-built_in">this</span>.threadFactory = threadFactory;<br>    <span class="hljs-built_in">this</span>.handler = handler;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般线程池不允许使用Excutors 去创建，而是通过ThreadPoolExecutor 的方式，这样就可以更加的明确线程池的运行规则，避免资源耗尽的风险！</p><ol><li>SingleThread 可能会堆积大量请求而导致OOM</li><li>ScheduledThread 则可能会创建了大量的线程导致OOM</li></ol><blockquote><p>手动创建线程池</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//手动创建线程池，自定义线程池</span><br>        <span class="hljs-comment">//最大线程该如何定义：</span><br>        <span class="hljs-comment">// 1、CPU密集型</span><br>        <span class="hljs-comment">// 2、IO 密集型</span><br>        <span class="hljs-comment">//获取CPU核数</span><br>        <span class="hljs-comment">//System.out.println(Runtime.getRuntime().availableProcessors());</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                <span class="hljs-number">2</span>,       <span class="hljs-comment">// corePoolSize 核心线程池大小</span><br>                <span class="hljs-number">5</span>, <span class="hljs-comment">//maximumPoolSize 最大核心线程池大小</span><br>                <span class="hljs-number">3</span>,       <span class="hljs-comment">//keepAliveTime 超时等待，超时了没有人调用就会释放</span><br>                TimeUnit.SECONDS,  <span class="hljs-comment">//超时单位</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="hljs-number">3</span>),  <span class="hljs-comment">//阻塞队列</span><br>                Executors.defaultThreadFactory(),  <span class="hljs-comment">//创建线程工厂</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy()); <span class="hljs-comment">//拒绝策略</span><br></code></pre></td></tr></table></figure><blockquote><p>4种拒绝策略</p></blockquote><p><img src="/Blog/Blog/2022/09/14/JUC04-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/JUC04-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/image-20220719174546366.png" alt="image-20220719174546366"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 1、AbortPolicy()  默认的拒绝策略 ， 队列满了还有人进来，不处理这个人，抛出异常             java.util.concurrent.RejectedExecutionException</span><br><span class="hljs-comment"> * 2、CallerRunsPolicy() 哪来的去哪里， main执行就main 线程处理 main ok</span><br><span class="hljs-comment"> * 3、DiscardPolicy() 队列满了不会丢出异常，会丢掉任务</span><br><span class="hljs-comment"> * 4、DiscardOldestPolicy() 队列满了，尝试去和最早的竞争 也不会抛出异常</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><blockquote><p>池的最大大小设置</p></blockquote><p>IO密集型、CPU密集型（调优）</p><h1 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h1><p>函数式接口：只有一个方法的接口。</p><p>简化编程模型，在新版本的框架底层大量运用</p><ol><li>Function 函数型接口，有一个输入参数，有一个输出。</li><li>Predicate 断定型接口: 有一个输入参数，返回值只能是 布尔值。</li><li>Consumer 消费型接口： 只有传入参数，没有返回值。</li><li>Supplier 供给型接口： 没有传入参数，只有返回值。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC03-常用的辅助类及阻塞队列</title>
    <link href="/Blog/2022/09/14/JUC03-%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%85%E5%8A%A9%E7%B1%BB%E5%8F%8A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    <url>/Blog/2022/09/14/JUC03-%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%85%E5%8A%A9%E7%B1%BB%E5%8F%8A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的辅助类"><a href="#常用的辅助类" class="headerlink" title="常用的辅助类"></a>常用的辅助类</h1><blockquote><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) throws InterruptedException &#123;<br>        <span class="hljs-comment">//总数是6</span><br>        CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CountDownLatch(6)</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span> ; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span>-&gt;&#123;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot; Go out&quot;</span>);<br>                countDownLatch.count<span class="hljs-constructor">Down()</span>; <span class="hljs-comment">//-1</span><br>            &#125;,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">i</span>)</span>).start<span class="hljs-literal">()</span>;<br>        &#125;<br>        countDownLatch.await<span class="hljs-literal">()</span>; <span class="hljs-comment">//等待计数器归零再向下执行</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Close Door&quot;</span>);<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4></blockquote><p><img src="/Blog/Blog/2022/09/14/JUC03-%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%85%E5%8A%A9%E7%B1%BB%E5%8F%8A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/JUC03-%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%85%E5%8A%A9%E7%B1%BB%E5%8F%8A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/image-20220713162033942.png" alt="image-20220713162033942"></p><p>加法计数器</p><blockquote><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4></blockquote><p>信号量！</p><p>多个共享资源互斥！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//六辆车抢三个车位</span><br>    <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span> ; i++) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                semaphore.acquire(); <span class="hljs-comment">//得到信号量</span><br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;抢到车位&quot;</span>);<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;离开车位&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                semaphore.release(); <span class="hljs-comment">//释放信号量 +1操作</span><br>            &#125;<br>        &#125;,String.valueOf(i)).start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><h4 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h4></blockquote><p>读写锁</p><p>读的时候可以多个线程一起读，写的时候只能有一个线程写！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ming.add;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReadWriteLock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ReadWriteLock</span><br><span class="hljs-comment"> * 读-读 可以共存</span><br><span class="hljs-comment"> * 读-写 不能共存</span><br><span class="hljs-comment"> * 写-写 不能共存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteLockDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyCache</span> <span class="hljs-variable">myCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCache</span>();<br>        <span class="hljs-comment">//写入</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span> ; i++) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                myCache.put(temp+<span class="hljs-string">&quot;&quot;</span>,temp+<span class="hljs-string">&quot;&quot;</span>);<br><br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br><br>        <span class="hljs-comment">//读取</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span> ; i++) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                myCache.get(temp+<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//加锁</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCache</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String ,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//读写锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReadWriteLock</span> <span class="hljs-variable">readWriteLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br>    <span class="hljs-comment">//存 ，写过程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key,String value)</span>&#123;<br>        readWriteLock.writeLock().lock();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;写入&quot;</span>+key);<br>            map.put(key,value);<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;写入完毕&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            readWriteLock.writeLock().unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//取，读过程s</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span>&#123;<br>        readWriteLock.readLock().lock();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;读取&quot;</span>+key);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> map.get(key);<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;读取完毕&quot;</span> + o);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            readWriteLock.readLock().unlock();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><p><img src="/Blog/Blog/2022/09/14/JUC03-%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%85%E5%8A%A9%E7%B1%BB%E5%8F%8A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/JUC03-%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%85%E5%8A%A9%E7%B1%BB%E5%8F%8A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/image-20220719155257425.png" alt="image-20220719155257425"></p><p><img src="/Blog/Blog/2022/09/14/JUC03-%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%85%E5%8A%A9%E7%B1%BB%E5%8F%8A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/JUC03-%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BE%85%E5%8A%A9%E7%B1%BB%E5%8F%8A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/image-20220719154001306.png" alt="image-20220719154001306"></p><h4 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a><strong>BlockingQueue</strong></h4><p>什么情况下 使用阻塞队列？ 多线程并发处理，线程池</p><p>学会使用队列：</p><p>​添加、移除</p><p><strong>四组API：</strong></p><table><thead><tr><th>方式</th><th>抛出异常</th><th>有返回值,不抛出异常</th><th>阻塞 等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add()</td><td>offer()</td><td>put()</td><td>offer( , , )</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll( , )</td></tr><tr><td>判断是否队列首部</td><td>element()</td><td>peek()</td><td>-</td><td>-</td></tr></tbody></table><ol><li>抛出异常</li><li>不会抛出异常</li><li>阻塞等待</li><li>超时等待</li></ol><h4 id="SynchronousQueue-同步队列"><a href="#SynchronousQueue-同步队列" class="headerlink" title="SynchronousQueue  同步队列"></a><strong>SynchronousQueue</strong>  同步队列</h4><p>没有容量，</p><p>进去一个元素后必须等待取出来之后才能往里面放一个元素。</p><p>put、take</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  同步队列</span><br><span class="hljs-comment"> *  和其他BlockingQueue 不一样，SynchronousQueue 不存储元素</span><br><span class="hljs-comment"> *  put了一个元素，必须从里面先take取出来，否则不能再put进去</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronousQueueDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        BlockingQueue&lt;String&gt; blockingQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; put 1&quot;</span>);<br>                blockingQueue.put(<span class="hljs-string">&quot;1&quot;</span>);<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; put 2&quot;</span>);<br>                blockingQueue.put(<span class="hljs-string">&quot;2&quot;</span>);<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; put 3&quot;</span>);<br>                blockingQueue.put(<span class="hljs-string">&quot;3&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;T1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;  &quot;</span>+blockingQueue.take());<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;  &quot;</span>+blockingQueue.take());<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;  &quot;</span>+blockingQueue.take());<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;T2&quot;</span>).start();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC02-集合类不安全</title>
    <link href="/Blog/2022/09/14/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/"/>
    <url>/Blog/2022/09/14/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="集合类不安全"><a href="#集合类不安全" class="headerlink" title="集合类不安全"></a>集合类不安全</h1><blockquote><p>1、List 不安全</p></blockquote><p>多个线程调用的时候，list读取的时候是固定的，写入的时候会发生覆盖操作，所以并发下ArrayList 不安全，且会发生报错</p><p>解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、 List&lt;String&gt; list = new Vector&lt;&gt;();  //不推荐</span><br><span class="hljs-comment">// 2、 List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span><br><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;&gt;();<br><br></code></pre></td></tr></table></figure><p>Vector 使用的是synchronized, CopyOnWrite 使用的是lock锁，所以效率上CopyOnWrite效率更加。</p><p>Vector </p><p><img src="/Blog/Blog/2022/09/14/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/image-20220713152228553.png" alt="image-20220713152228553"></p><p>CopyOnWrite</p><p><img src="/Blog/Blog/2022/09/14/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/image-20220713152320686.png" alt="image-20220713152320686"></p><blockquote><p>2、set  不安全</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * java.util.ConcurrentModificationException 并发修改异常</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  1、Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span><br><span class="hljs-comment"> *  2、Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;();</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>hashSet 的底层 其实就是HashMap</p><p><img src="/Blog/Blog/2022/09/14/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/image-20220713154530850.png" alt="image-20220713154530850"></p><blockquote><p>3、map 不安全</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h1 id="Callabel"><a href="#Callabel" class="headerlink" title="Callabel"></a>Callabel</h1><p><img src="/Blog/Blog/2022/09/14/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/image-20220713155934554.png" alt="image-20220713155934554"></p><p>1、可以有返回值</p><p>2、可以抛出异常</p><p>3、方法不同，run()&#x2F;call()</p><p><img src="/Blog/Blog/2022/09/14/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/JUC02-%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8/image-20220713161045932.png" alt="image-20220713161045932"></p>]]></content>
    
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC01-Lock与Synchronized</title>
    <link href="/Blog/2022/09/14/JUC01-Lock%E4%B8%8ESynchronized/"/>
    <url>/Blog/2022/09/14/JUC01-Lock%E4%B8%8ESynchronized/</url>
    
    <content type="html"><![CDATA[<h1 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h1><p>公平锁:  可以先来后到</p><p>非公平锁: 可以插队 (默认使用非公平锁)</p><h1 id="Synchronized-和-Lock-区别"><a href="#Synchronized-和-Lock-区别" class="headerlink" title="Synchronized 和 Lock 区别"></a>Synchronized 和 Lock 区别</h1><ol><li>Synchronized 内置的Java关键字, Lock 是一个Java类</li><li>Synchronized 无法判断获取锁的状态, Lock 可以判断是否获取到了锁</li><li>Synchronized 会自动释放锁,lock 必须要手动释放锁!如果不释放锁,会死锁!</li><li>Synchronized 线程1(获得锁,阻塞),线程2(等待,傻傻等…);Lock不一定会等待下去;</li><li>Synchronized  可重入锁,不可以中断的,非公平;Lock,可重入锁,可以 判断锁,非公平(可以自己设置)</li><li>Synchronized 适合锁少量的代码同步问题,Lock 适合锁大量的同步代码!</li></ol><p>Synchronized的使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//资源类 OOP</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket</span>&#123;<br>    <span class="hljs-comment">//属性、方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><br><br>    <span class="hljs-comment">//卖票的方式</span><br>    <span class="hljs-comment">//synchronized 本质：队列和锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sale</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (number&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;卖出了&quot;</span>+(number--)+<span class="hljs-string">&quot;票,剩余：&quot;</span>+number);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>Lock锁的使用：</p><p>1、Lock lock &#x3D; new ReentrantLock();</p><p>2、加锁 lock()</p><p>3、 try&#x2F;catch&#x2F;finally 包裹业务代码</p><p>4、finally 内 unlock()  &#x2F;&#x2F;解锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket2</span> &#123;<br>    <span class="hljs-comment">//属性、方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-comment">//卖票的方式</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sale</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//业务代码</span><br>            <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出了&quot;</span> + (number--) + <span class="hljs-string">&quot;票,剩余：&quot;</span> + number);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock(); <span class="hljs-comment">//解锁</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h1><p>重要: 单例模式,排序算法,生产者消费者问题,死锁</p><p>  传统生产者消费者问题:A , B ;加入C , D线程会出问题!(if 判断改为 while)</p><p>if判断只判断一次,多生产者和多消费者会一起进入业务代码</p><blockquote><p>JUC版 生产者消费者问题</p></blockquote><p><img src="/Blog/Blog/2022/09/14/JUC01-Lock%E4%B8%8ESynchronized/JUC01-Lock%E4%B8%8ESynchronized/image-20220705164902071.png" alt="image-20220705164902071"></p><p><img src="/Blog/Blog/2022/09/14/JUC01-Lock%E4%B8%8ESynchronized/JUC01-Lock%E4%B8%8ESynchronized/image-20220705164418985.png" alt="image-20220705164418985"></p><p><strong>Condition 可以精准的通知和唤醒线程</strong></p><blockquote><p> 8锁现象小结</p></blockquote><p>具体demo请参考个人github:<a href="https://github.com/he498/JUC_study/tree/master">https://github.com/he498/JUC_study/tree/master</a></p><p>new this 具体的一个手机</p><p>static Class 唯一的一个模板 </p><p><strong>看具体锁的是谁，是不是同一个锁！</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git03-Git的基本使用2</title>
    <link href="/Blog/2022/09/14/Git03-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/"/>
    <url>/Blog/2022/09/14/Git03-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/</url>
    
    <content type="html"><![CDATA[<h2 id="Github使用"><a href="#Github使用" class="headerlink" title="Github使用"></a>Github使用</h2><p><strong>将本地项目上传至github</strong></p><p>1、在github上新建仓库new repository</p><p>2、在本地的项目目录进行初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><p>3、然后将项目中的所有文件添加到本地仓库中；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br></code></pre></td></tr></table></figure><p>4、提交仓库中的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;first commit（自己的描述）&quot;</span><br></code></pre></td></tr></table></figure><p>5、将本地仓库关联到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://自己的仓库url地址<br></code></pre></td></tr></table></figure><p>6、将提交的修改更新到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin master<br></code></pre></td></tr></table></figure><p><strong>对于push相关的操作，这里进行一些补充</strong></p><p>1、将本地当前分支 推送到 远程指定分支上（注意：pull是远程在前本地在后，push相反）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git push origin <span class="hljs-tag">&lt;<span class="hljs-name">本地分支名</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">远程分支名</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、将本地当前分支 推送到 与本地当前分支同名的远程分支上（注意：pull是远程在前本地在后，push相反）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin &lt;本地分支名&gt;<br></code></pre></td></tr></table></figure><p>3、将本地当前分支 推送到 与本地当前分支同名的远程分支上(需先关联远程分支)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push<br></code></pre></td></tr></table></figure><p>将本地分支与远程同名分支相关联</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin &lt;本地分支名&gt;<br></code></pre></td></tr></table></figure><h2 id="GitLFS"><a href="#GitLFS" class="headerlink" title="GitLFS"></a>GitLFS</h2><p>当我们向github上传的项目中包括大文件时这时就不能像平常一样正常push了。需要用到GitLFS</p><p>1、先从官方下载git lfs</p><p><a href="https://git-lfs.github.com./">https://git-lfs.github.com./</a></p><p>2、在需要上传的项目目录中重新初始化git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><p>3、先将项目中的大文件通过git lfs单独add和commit上传至github仓库</p><p>第一步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git lfs install  <span class="hljs-comment"># 这一步只需要执行一次</span><br></code></pre></td></tr></table></figure><p>第二步：</p><p>追踪需要上传的大文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git lfs track <span class="hljs-string">&quot;*.psd&quot;</span>  <span class="hljs-comment"># 这里的&quot;*.psd&quot;为文件类型</span><br></code></pre></td></tr></table></figure><p>第三步：将需要上传的大文件进行add和commit后push到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add file.psd  <span class="hljs-comment"># 这里的file.psd 为你需要上传的文件的路径</span><br>git commit -m <span class="hljs-string">&quot;Add design file&quot;</span>  <span class="hljs-comment"># add后进行commit 提交到本地仓库</span><br>git push -u origin master <span class="hljs-comment"># push 到远程仓库</span><br></code></pre></td></tr></table></figure><p>成功后就可以看到大文件已经push到远程仓库了，这时就可以将剩下的项目文件照常push到远程仓库了</p><p>4、照常将剩下没有追踪的文件push到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;add last&quot;</span><br>git push -u origin master<br></code></pre></td></tr></table></figure><h2 id="IDEA中集成Git"><a href="#IDEA中集成Git" class="headerlink" title="IDEA中集成Git"></a>IDEA中集成Git</h2><p>1、新建项目，绑定git。</p><ul><li>将我们远程的git文件目录拷贝到项目中即可</li></ul><p>2、修改文件，使用IDEA操作git。</p><p><img src="/Blog/Blog/2022/09/14/Git03-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/Git03-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/image-20220907170034917.png" alt="image-20220907170034917"></p><p><img src="/Blog/Blog/2022/09/14/Git03-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/Git03-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/image-20220907170047330.png" alt="image-20220907170047330"></p><p>3、提交测试</p><h2 id="GIT分支"><a href="#GIT分支" class="headerlink" title="GIT分支"></a>GIT分支</h2><p>​分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了。</p><img src="/Blog/Blog/2022/09/14/Git03-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A82/image-20220907175724551.png" alt="image-20220907175724551" style="zoom:67%;"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有本地分支</span><br>git branch<br><br><span class="hljs-comment"># 列出所有远程分支</span><br>git branch -r<br><br><span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span><br>git branch [branch-name]<br><br><span class="hljs-comment"># 新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><br><span class="hljs-comment"># 合并指定分支到当前分支</span><br>git merge [branch]<br><br><span class="hljs-comment"># 删除分支</span><br>git branch -d [branch-name]<br><br><span class="hljs-comment"># 删除远程分支</span><br>git push origin --delete [branch-name]<br>git branch -dr [remote/branch]<br><br></code></pre></td></tr></table></figure><p><strong>Git大全</strong>：<a href="https://gitee.com/all-about-git">https://gitee.com/all-about-git</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git02-Git的基本使用</title>
    <link href="/Blog/2022/09/14/Git02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/Blog/2022/09/14/Git02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h2><p><strong>创建工作目录与常用指令</strong></p><p>​工作目录（Worksapce）一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。日常使用只需要记住下面6个命令：</p><p><img src="/Blog/Blog/2022/09/14/Git02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Git02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20220907125540075.png" alt="image-20220907125540075"></p><p><strong>本地仓库搭建</strong></p><p>​创建本地仓库有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p>1、创建全新仓库，需要用GIT管理的项目的根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$git</span> init<br></code></pre></td></tr></table></figure><p>执行后可以看到，仅仅在项目目录多出一个.git目录，关于版本等的所有信息都在这个目录里面</p><p>2、克隆远程仓库</p><p>另一种是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> [url]<br></code></pre></td></tr></table></figure><img src="/Blog/Blog/2022/09/14/Git02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20220907150707757.png" alt="image-20220907150707757" style="zoom:67%;"><h2 id="GIT文件操作"><a href="#GIT文件操作" class="headerlink" title="GIT文件操作"></a>GIT文件操作</h2><p><strong>文件的四种状态？</strong></p><p>&#x3D;&gt;版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上</p><ul><li>Untracked：未跟踪，此文件在文件夹中，但并没有加入到git库，不参与版本控制，通过<code>git add</code>状态变为<code>Staged</code></li><li>Unmodify：文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为<code>Modified</code>。如果使用<code>git rm</code>移出版本库，则成为<code>Untracked</code>文件</li><li>Modified：文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过<code>git add</code>可进入暂存<code>staged</code>状态，使用<code>git checkout</code>则丢弃修改过，返回到<code>umodify</code>状态，这个<code>git checkout</code>即从库中取出文件，覆盖当前修改</li><li>Staged：暂存状态，执行<code>git commit</code>则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为<code>Unmodify</code>状态，执行<code>git reset HEAD filename</code>取消暂存，文件状态为modified</li></ul><p><strong>查看文件状态</strong></p><p>如下命令可以查看文件的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看指定文件状态</span><br>git status [filename]<br><br><span class="hljs-comment">#查看所有文件状态</span><br>git status<br><br><span class="hljs-comment">#添加所有文件到暂存区</span><br>git add .<br><span class="hljs-comment">#提交暂存区中的内容到本地仓库 -m 提交信息</span><br>git commit -m<br></code></pre></td></tr></table></figure><p><strong>忽略文件</strong></p><p>​有时我们不想把某些文件纳入本版控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,….}）代表可选的字符串等</li><li>如果名称的最前面有一个感叹号（！），表示例外规则，将不被忽略</li><li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录的文件不忽略</li><li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#为注释</span><br>*.txt  <span class="hljs-comment">#忽略所有 .txt结尾的文件，这样的话上传就不会被选中！</span><br>!lib.txt   <span class="hljs-comment">#但lib.txt除外</span><br>/temp   <span class="hljs-comment">#仅忽略项目根目录下的TODO文件，不包括其他目录temp</span><br>build/  <span class="hljs-comment">#忽略build/目录下的所有文件</span><br>doc/*.txt<span class="hljs-comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></code></pre></td></tr></table></figure><h2 id="码云的使用"><a href="#码云的使用" class="headerlink" title="码云的使用"></a>码云的使用</h2><p>1、注册登录Gitee</p><p><a href="https://gitee.com/enterprises/?utm_source=pzpc">https://gitee.com/enterprises/?utm_source=pzpc</a></p><p>2、设置本机绑定SSH公钥，实现免密码登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入 C:\Users\10258\.ssh 目录生成公钥</span><br>ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;xxxxx@xxxxx.com&quot;</span> <br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/Git02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Git02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20220907163331053.png" alt="image-20220907163331053"></p><p><a href="https://gitee.com/help/articles/4181#article-header0">https://gitee.com/help/articles/4181#article-header0</a></p><p>3、将公钥添加至Gitee账户</p><p>打开.ssh目录下的刚生成出来的公钥文件 xxxxxxx.pub</p><p><img src="/Blog/Blog/2022/09/14/Git02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Git02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20220907164021767.png" alt="image-20220907164021767"></p><p>将里面的公钥信息复制添加到gitee账户上</p><p><img src="/Blog/Blog/2022/09/14/Git02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/Git02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20220907164052776.png" alt="image-20220907164052776"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git01-Git的安装及配置</title>
    <link href="/Blog/2022/09/14/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <url>/Blog/2022/09/14/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="Git的安装及环境配置"><a href="#Git的安装及环境配置" class="headerlink" title="Git的安装及环境配置"></a>Git的安装及环境配置</h2><p>git官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p><img src="/Blog/Blog/2022/09/14/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20220907094931178.png" alt="image-20220907094931178"></p><p>安装：无脑下一步</p><p>安装成功后开始菜单会有如下三个程序：</p><p><img src="/Blog/Blog/2022/09/14/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20220907095234509.png" alt="image-20220907095234509"></p><p><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多。</p><p><strong>Git CMD：</strong>Windows风格的命令行。</p><p><strong>Git GUI：</strong>图形界面的Git，不建议初学者使用尽量先熟悉常用命令。</p><blockquote><p>基本的Linux命令</p></blockquote><ol><li>cd改变目录</li><li>cd..      回退到上一目录</li><li>pwd  显示当前所在目录路径</li><li>ls   列出当前目录中所有文件    ll     列出当前目录中所有文件的详细信息</li><li>touch      新建一个文件 如：touch index.js</li><li>rm        删除一个文件</li><li>rm -r    删除一个文件夹，rm -r src   删除src目录</li><li>mv 移动文件</li><li>mkdir 新建一个目录</li><li>reset   重新初始化终端</li><li>clear   清屏</li><li>history    查看命令历史</li><li>help    帮助</li><li>exit     退出</li></ol><p>其他命令可查看Linux学习笔记</p><h2 id="Git的配置"><a href="#Git的配置" class="headerlink" title="Git的配置"></a>Git的配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config -l<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20220907101622473.png" alt="image-20220907101622473"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --system --list<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20220907101736236.png" alt="image-20220907101736236"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --list<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20220907101829635.png" alt="image-20220907101829635"></p><p><strong>Giy相关配置文件位置：</strong></p><p>1、\Git\etc\gitconfig系统级别</p><p><img src="/Blog/Blog/2022/09/14/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20220907102230515.png" alt="image-20220907102230515"></p><p>2、C:\Users\10258\ .gitconfig只适用于当前登录用户的配置 –global 全局</p><p><img src="/Blog/Blog/2022/09/14/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20220907102410242.png" alt="image-20220907102410242"></p><p><strong>设置用户名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bsh">git config --global user.name &quot;ming&quot;   #名称<br>git config --global user.email 1025891364@qq.com #邮箱 <br></code></pre></td></tr></table></figure><h2 id="Git基本理论"><a href="#Git基本理论" class="headerlink" title="Git基本理论"></a>Git基本理论</h2><p><strong>工作区域</strong></p><p>&#x3D;&gt;Git本地有三个工作区域：工作目录（Working Directory）、暂存区（Stage&#x2F;Index）、资源库（Repository或Git Directory）。如果再加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="/Blog/Blog/2022/09/14/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20220907123251861.png" alt="image-20220907123251861"></p><ul><li>Workspace：工作区，平时存放项目代码的地方</li><li>Index&#x2F;Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本</p><p><img src="/Blog/Blog/2022/09/14/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/Git01-Git%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20220907123812373.png" alt="image-20220907123812373"></p><p><strong>git的工作流程</strong></p><ol><li>在工作目录中添加，修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件提交到git仓库</li></ol><p>因此git管理的文件有三种状态：已修改（modefied），已暂存（staged），已提交（commited）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MybaitsPlus_studyDemo</title>
    <link href="/Blog/2022/09/14/MybaitsPlus-studyDemo/"/>
    <url>/Blog/2022/09/14/MybaitsPlus-studyDemo/</url>
    
    <content type="html"><![CDATA[<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        mybatis-plus   不要同时导入mybatis和mybatis-plus--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建对应的config"><a href="#创建对应的config" class="headerlink" title="创建对应的config"></a>创建对应的config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ming.config;<br><br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.injector.ISqlInjector;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.injector.LogicSqlInjector;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor;<br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Profile;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-meta">@MapperScan(&quot;com.ming.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br>    <span class="hljs-comment">//注册乐观锁插件</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title function_">optimisticLockerInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInterceptor</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//分页插件</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInterceptor</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//逻辑删除组件</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ISqlInjector <span class="hljs-title function_">sqlInjector</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogicSqlInjector</span>();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * SQL执行效率插件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span><span class="hljs-comment">//设置dev test 环境开启</span><br>    <span class="hljs-keyword">public</span> PerformanceInterceptor <span class="hljs-title function_">performanceInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">PerformanceInterceptor</span> <span class="hljs-variable">performanceInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceInterceptor</span>();<br>        performanceInterceptor.setMaxTime(<span class="hljs-number">100</span>); <span class="hljs-comment">//设置sql执行的最大时间,超过则不执行</span><br>        performanceInterceptor.setFormat(<span class="hljs-literal">true</span>);<span class="hljs-comment">//是否格式化代码</span><br>        <span class="hljs-keyword">return</span> performanceInterceptor;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>dao层 只需要mapper就可以</p><p><strong>mybatisplus以及帮我们实现了最基本的CRUD了，无需编写mapper.xml文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ming.mapper;<br><br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.ming.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">//在对应的Mapper上面实现基本的接口 BaseMapper</span><br><span class="hljs-meta">@Repository</span> <span class="hljs-comment">//代表持久层</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>    <span class="hljs-comment">//所有的CRUD已经实现</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ming.handler;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//记住一定要把处理器加入IOC容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br><br>    <span class="hljs-comment">//插入时的填充策略</span><br>    <span class="hljs-comment">//setFieldValByName(String fieldName, Object fieldVal, MetaObject metaObject)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;createTime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),metaObject);<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),metaObject);<br>    &#125;<br>    <span class="hljs-comment">//更新是的填充策略</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br><br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),metaObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h2><p>User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ming.pojo;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-comment">//主键自增策略</span><br>    <span class="hljs-comment">//对应数据库中的主键(uuid、自增id、雪花算法、redis、zk)</span><br>    <span class="hljs-comment">//    AUTO(0),  //主键自增，1.需要在字段上@TableId(type = IdType.AUTO) 2.数据库字段一定要设置自增</span><br>    <span class="hljs-comment">//    NONE(1),  //不使用</span><br>    <span class="hljs-comment">//    INPUT(2), //手动输入</span><br>    <span class="hljs-comment">//    ID_WORKER(3),  默认用这个全局id(雪花算法)</span><br>    <span class="hljs-comment">//    UUID(4),  //全局唯一uuid</span><br>    <span class="hljs-comment">//    ID_WORKER_STR(5);  //id_work的字符串表示法</span><br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-comment">//代码级别的自动填充</span><br>    <span class="hljs-comment">//需要编写处理器</span><br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-meta">@Version</span> <span class="hljs-comment">//乐观锁version注解</span><br>    <span class="hljs-keyword">private</span> Integer version;<br><br>    <span class="hljs-meta">@TableLogic</span> <span class="hljs-comment">//逻辑删除</span><br>    <span class="hljs-keyword">private</span> Integer deleted;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Long id, String name, Integer age, String email, Date createTime, Date updateTime, Integer version, Integer deleted)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-built_in">this</span>.createTime = createTime;<br>        <span class="hljs-built_in">this</span>.updateTime = updateTime;<br>        <span class="hljs-built_in">this</span>.version = version;<br>        <span class="hljs-built_in">this</span>.deleted = deleted;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, email=&#x27;&quot;</span> + email + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, createTime=&quot;</span> + createTime +<br>                <span class="hljs-string">&quot;, updateTime=&quot;</span> + updateTime +<br>                <span class="hljs-string">&quot;, version=&quot;</span> + version +<br>                <span class="hljs-string">&quot;, deleted=&quot;</span> + deleted +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getCreateTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> createTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCreateTime</span><span class="hljs-params">(Date createTime)</span> &#123;<br>        <span class="hljs-built_in">this</span>.createTime = createTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getUpdateTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> updateTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUpdateTime</span><span class="hljs-params">(Date updateTime)</span> &#123;<br>        <span class="hljs-built_in">this</span>.updateTime = updateTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getVersion</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> version;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVersion</span><span class="hljs-params">(Integer version)</span> &#123;<br>        <span class="hljs-built_in">this</span>.version = version;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getDeleted</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> deleted;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDeleted</span><span class="hljs-params">(Integer deleted)</span> &#123;<br>        <span class="hljs-built_in">this</span>.deleted = deleted;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>基本CRUD测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ming;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;<br><span class="hljs-keyword">import</span> com.ming.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.ming.pojo.User;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">//所有的方式继承于父类</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//参数是一个Wrapper,条件构造器，这里先不用，null</span><br>        <span class="hljs-comment">//查询全部用户</span><br>        List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//        for (User user : users) &#123;</span><br><span class="hljs-comment">//            System.out.println(user);</span><br><span class="hljs-comment">//        &#125;</span><br>        users.forEach(System.out::println);<br>    &#125;<br><br><span class="hljs-comment">//    测试插入</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInset</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">3</span>);<br>        user.setName(<span class="hljs-string">&quot;ming&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;1111111@qq.com&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.insert(user);   <span class="hljs-comment">//自动帮我们生成id，id会自增</span><br>        System.out.println(result);<br>        System.out.println(user);<br><br>        <span class="hljs-comment">//雪花算法（SnowFlake）</span><br>        <span class="hljs-comment">//SnowFlake算法生成id的结果是一个64bit大小的整数</span><br><span class="hljs-comment">//        1、1bit，不用，因为二进制中最高位是符号位，1表示负数，0表示正数。生成的id一般都是用整数，所以最高位固定为0。</span><br><span class="hljs-comment">//        2、41bit时间戳，毫秒级。可以表示的数值范围是 （2^41-1），转换成单位年则是69年。</span><br><span class="hljs-comment">//        3、10bit工作机器ID，用来表示工作机器的ID，包括5位datacenterId和5位workerId。</span><br><span class="hljs-comment">//        4、12bit序列号，用来记录同毫秒内产生的不同id，12位可以表示的最大整数为4095，来表示同一机器同一时间截（毫秒)内产生的4095个ID序号。</span><br><br>    &#125;<br><br>    <span class="hljs-comment">//测试更新</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">6L</span>);<br>        user.setName(<span class="hljs-string">&quot;kk&quot;</span>);<br>        <span class="hljs-comment">//虽然是byId但是参数是一个对象！！！</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> userMapper.updateById(user);<br>        System.out.println(i);<br>    &#125;<br><br><br>    <span class="hljs-comment">//乐观锁实现</span><br>    <span class="hljs-comment">//1.取出记录时，获取当前version</span><br>    <span class="hljs-comment">//2.更新时，带上这个version</span><br>    <span class="hljs-comment">//3.执行更新时，set version = newVersion where version = oldVersion</span><br>    <span class="hljs-comment">//如果version不对则会更新失败</span><br>    <span class="hljs-comment">//先查询获得版本号，更新的时候set version+1且判断version == 获得的version</span><br><br>    <span class="hljs-comment">//mp 乐观锁插件：先增加字段version</span><br>    <span class="hljs-comment">//测试乐观锁</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOptimisticLocker</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//测试成功！</span><br>        <span class="hljs-comment">//1.查询用户信息</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br>        <span class="hljs-comment">//2.修改用户信息;</span><br>        user.setName(<span class="hljs-string">&quot;mm&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;222222@qq.com&quot;</span>);<br>        user.setAge(<span class="hljs-number">99</span>);<br>        <span class="hljs-comment">//执行修改</span><br>        userMapper.updateById(user);<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOptimisticLocker2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//模拟失败</span><br>        <span class="hljs-comment">//线程1</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br>        user.setName(<span class="hljs-string">&quot;mm&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;222222@qq.com&quot;</span>);<br>        user.setAge(<span class="hljs-number">99</span>);<br>        <span class="hljs-comment">//线程2</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br>        user2.setName(<span class="hljs-string">&quot;kk&quot;</span>);<br>        userMapper.updateById(user2);<br>        <span class="hljs-comment">//可以使用自旋锁来多次尝试提交</span><br>        userMapper.updateById(user); <span class="hljs-comment">//如果没有乐观锁就会覆盖值</span><br>    &#125;<br><br><br>    <span class="hljs-comment">//测试查询</span><br>    <span class="hljs-comment">//批量查询测试</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectBatchIds</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>        users.forEach(System.out::println);<br>    &#125;<br>    <span class="hljs-comment">//按条件查询map</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectByMap</span><span class="hljs-params">()</span>&#123;<br>        HashMap&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;kk&quot;</span>);<br>        List&lt;User&gt; users = userMapper.selectByMap(map);<br>        users.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">//分页查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//参数1:当前页</span><br>        <span class="hljs-comment">//参数2:页面大小</span><br>        Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>        userMapper.selectPage(page,<span class="hljs-literal">null</span>);<br>        page.getRecords().forEach(System.out::println);<br>        System.out.println(page.getTotal()); <span class="hljs-comment">//总数</span><br>        System.out.println(page.getCurrent()); <span class="hljs-comment">//当前页面</span><br>        System.out.println(page.getPages()); <span class="hljs-comment">//总共分了多少页</span><br>    &#125;<br><br>    <span class="hljs-comment">//测试删除</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteById</span><span class="hljs-params">()</span>&#123;<br>        userMapper.deleteById(<span class="hljs-number">1532994152659189764L</span>);<br>    &#125;<br>    <span class="hljs-comment">//批量删除</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteBatchId</span><span class="hljs-params">()</span>&#123;<br>        userMapper.deleteBatchIds(Arrays.asList(<span class="hljs-number">1532994152659189763L</span>,<span class="hljs-number">1532994152659189762L</span>,<span class="hljs-number">1532994152659189761L</span>,<span class="hljs-number">1532994152659189765L</span>));<br>    &#125;<br>    <span class="hljs-comment">//通过map删除</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteMap</span><span class="hljs-params">()</span>&#123;<br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;ming&quot;</span>);<br>        userMapper.deleteByMap(map);<br>    &#125;<br>    <span class="hljs-comment">//逻辑删除：在数据库中没有被移除，而是通过一个变量让他失效,deleted = 0 =&gt; deleted = 1,回收站原理</span><br>    <span class="hljs-comment">//物理删除：从数据库中直接移除</span><br>    <span class="hljs-comment">//在数据表中增加一个deleted 字段</span><br>    <span class="hljs-comment">//测试</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logicDelete</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-comment">//userMapper.deleteById(1L); //走的是更新操作</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1l</span>); <span class="hljs-comment">//删除后查询测试，Preparing: SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE id=? AND deleted=0</span><br>        System.out.println(user);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Wrapper查询器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ming;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> com.ming.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.ming.pojo.User;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WrapperTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//查询name不为空的用户，并且邮箱不为空的用户,年龄大于等于12</span><br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        wrapper.isNotNull(<span class="hljs-string">&quot;name&quot;</span>)<br>                .isNotNull(<span class="hljs-string">&quot;email&quot;</span>)<br>                .ge(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">12</span>);<br>        userMapper.selectList(wrapper).forEach(System.out::println);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//查询名字 kk</span><br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;kk&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(wrapper);<br>        System.out.println(user);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//查询20-30岁之间有多少</span><br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        wrapper.between(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userMapper.selectCount(wrapper); <span class="hljs-comment">//查询结果数</span><br>        System.out.println(count);<br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//模糊查询</span><br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-comment">//左和右 %e%</span><br>        wrapper.notLike(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>)<br>                .likeRight(<span class="hljs-string">&quot;email&quot;</span>,<span class="hljs-string">&quot;t&quot;</span>);<br>        List&lt;Map&lt;String,Object&gt;&gt; maps = userMapper.selectMaps(wrapper);<br>        maps.forEach(System.out::println);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br><br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>       <span class="hljs-comment">//id 在子查询中查出来</span><br>        wrapper<br>                .inSql(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;select id from user where id &lt; 3&quot;</span>);<br>        List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);<br>        objects.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span>&#123;<br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-comment">//通过id排序</span><br>        wrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br>        List&lt;User&gt; users = userMapper.selectList(wrapper);<br>        users.forEach(System.out::println);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MybatisPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM08-高效并发</title>
    <link href="/Blog/2022/09/14/JVM08-%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91/"/>
    <url>/Blog/2022/09/14/JVM08-%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="6、高效并发"><a href="#6、高效并发" class="headerlink" title="6、高效并发"></a>6、高效并发</h2><h4 id="Java内存模型？"><a href="#Java内存模型？" class="headerlink" title="Java内存模型？"></a><strong>Java内存模型？</strong></h4><p>&#x3D;&gt;</p><p>​ JVM虚拟机规范中曾经试图定义一种Java内存模型，来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都可以达到一致性的内存访问效果。</p><pre><code class="hljs"> 然而定义这样一套内存模型并非很容易，这个模型必须足够严谨，才能让Java的并发内存访问操作不会有歧义。但是也必须足够宽松，这样使得虚拟机的具体实现能够有自由的发挥空间来利用各种硬件的优势。经过长时间的验证和弥补，到了JDK1.5（实现了JSR133规范）之后，Java内存模型才终于成熟起来了。</code></pre><p><strong>主内存与工作内存</strong></p><p>​Java内存模型规定了所有的变量都存储在主内存(Main Memory)中，每条线程都有自己的工作内存（Work Memory）</p><ul><li>工作内存中保存了被该线程使用的变量的主内存副本。</li><li>线程对变量的读写操作必须在工作内存中进行。</li><li>而不能直接访问主内存的数据。</li><li>不同的线程也不能互相读写对方的工作内存，线程之间的变量传递必须通过主内存传递。</li></ul><p><img src="/Blog/Blog/2022/09/14/JVM08-%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91/JVM08-%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91/image-20220902174248045.png" alt="image-20220902174248045"></p><p><strong>八大原子操作</strong></p><ul><li><strong>lock</strong> 锁定： 作用于主内存，将一个变量标识为线程独占状态</li><li><strong>unlock</strong>: 解锁 ： 作用于主内存，将一个线程独占状态的变量释放</li><li><strong>read</strong> 读取 ： 从主内存读取数据到工作内存，便于之后的load操作</li><li><strong>load</strong> 载入： 把read读取操作从主内存中得到的变量放入工作内存的变量副本中</li><li><strong>use</strong> 使用： 将工作内存中的变量传递给执行引擎 当虚拟机遇到一个需要使用变量值的字节码时，执行此操作</li><li><strong>assign</strong>赋值： 将执行引擎中的值赋给工作内存的变量。 当虚拟机遇到一个赋值操作时，执行此操作</li><li><strong>store</strong>存储： 将工作内存的值传递到主内存 ，便于之后的write操作</li><li><strong>write</strong>写入：将store存储操作中从工作内存中获取的变量写入到主内存中</li></ul><p><strong>八大原子操作的规则</strong></p><ul><li>不允许read和load、store和write操作之一单独出现。也就是说不允许一个变量从主内存读取但是工作内存不接受，也不允许工作内存发起回写请求但是主内存不接受。</li><li>不允许一个线程丢弃它的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中。</li><li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作。</li><li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。lock和unlock必须成对出现</li><li>如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值</li><li>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量。</li><li>对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）。</li></ul><blockquote><p><strong>Volatile、可见性、原子性、有序性等相关概念请翻阅JUC篇笔记</strong></p></blockquote><h4 id="Java线程模型"><a href="#Java线程模型" class="headerlink" title="Java线程模型"></a>Java线程模型</h4><p>&#x3D;&gt;并发不一定都要用到线程，比如PHP中用到的是多进程。但是在Java中并发基本上都是使用线程来实现的。</p><p><strong>线程的实现</strong></p><p>&#x3D;&gt; 主流的操作系统都提供了线程的实现，Java线程则提供了在不同硬件和操作系统下对线程的统一处理。每个已经start且并未结束的Thread类的实例对象都是一个线程。</p><p>实现线程的三种主要方式</p><ul><li>内核线程 （1:1线程模型）</li><li>用户线程 （1:N 线程模型）</li><li>用户线程 + 轻量级进程 混合 （N:M 线程模型）</li></ul><p><strong>内核线程</strong></p><p>​内核线程(Kernel-Level Thread，KLT)是由操作系统内核直接支持的线程 。这种线程由内核来完成线程切换。内核通过操纵调度器对内核线程进行控制，并负责将线程的任务映射到各个处理器。</p><p>​ 程序一般不会直接使用内核线程，而是使用它的高级接口：轻量级进程（LWP）。轻量级进程就是我们通常意义上讲的线程。每个轻量级进程都由一个内核线程支持。因此这种方式称为1:1的线程模型</p><img src="/Blog/Blog/2022/09/14/JVM08-%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91/image-20220902175804414.png" alt="image-20220902175804414" style="zoom:80%;"><p><strong>用户线程</strong></p><p>​用户线程指完全建立在用户态的线程库中，用户线程的创建，同步，销毁，调度等操作完全在用户态中完成，不需要在频繁切换内核态。因此速度很快。很多高性能的数据库中的多线程就是用的用户线程。</p><p>​由于是一个进程对应多个用户线程，因此，线程模型是1:N的</p><img src="/Blog/Blog/2022/09/14/JVM08-%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91/image-20220902180157064.png" alt="image-20220902180157064" style="zoom:80%;"><p><strong>缺点：</strong></p><ul><li>由于所有的线程操作都需要由用户处理，所以线程的创建，销毁，切换，调度都是用户需要考虑的问题。</li><li>由于操作系统只将处理器的资源分配到进程程度，所以阻塞如何处理,多处理器如今分配资源等问题都需要由用户解决。</li></ul><blockquote><p><strong>Java，Ruby等语言都使用过用户线程，但是最终都放弃了。</strong></p></blockquote><p><strong>用户线程 + 轻量级进程 混合</strong></p><img src="/Blog/Blog/2022/09/14/JVM08-%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91/image-20220902180659795.png" alt="image-20220902180659795" style="zoom:80%;"><p>​在这种情况下，既存在用户线程，又存在轻量级进程，用户线程的建立还是在用户态中，因此不需要频繁切换内核态，保证了速度的高效。轻量级进程为用户线程和内核线程的桥梁。这样可以使用内核提供的线程调度功能处理用户线程中存在的问题。用户线程和轻量级进程的比例是不确定的。因此是N:M的线程模型。</p><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>&#x3D;&gt;当多个线程同时访问一个对象，如果不用考虑这些线程在运行环境下的调度和交替执行，也不需要考虑额外的同步，或者在调用方法时进行一些其他的协作，调用这个对象的行为都可以获得正确的结果。那么就称这个对象是线程安全的。</p><p> 这个定义是严谨并且有可操作性的，他要求线程安全的代码都必须具备一个共同的特性。代码本身封装了所有必要的正确性保障手段（如互斥同步等）。令调用者无需关心多线程下的调用问题。更无需自己实现任何措施来保证安全。</p><p><strong>Java中的线程安全</strong><br>     在Java语言中，从JVM底层来看的话，线程安全并不是一个非黑即白的二元排他选项，按照安全程度来划分，我们可以将Java中各种操作共享的数据分为五类: 不可变、绝对线程安全、相对线程安全、线程兼容、线程对立</p><p><strong>不可变</strong><br>     在Java中，不可变的对象一定是安全的。比如用final修饰的变量。只要一个不可见的对象被创建出来，其外部的可见状态就不会改变，永远不会看到它在多个线程中处于不一致的状态。在Java中，不可变带来的线程安全是最直接的，也是最纯粹的。</p><ul><li><p>基本数据类型： 在定义的时候用final修饰即可。</p></li><li><p>引用数据类型：由于目前为止Java中还没有提供对应的支持，需要我们自己封装，将共享数据封装为一个不可变的对象，具体来说，我们可以把对象中的属性封装为final类型。这样在构造方法结束之后，他就是一个不可比变的值。</p><p>比如String，Integer,Number,Long,Double等基本数据类型的包装类，都是将value部分修饰为final。</p></li></ul><p> String的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[];<br></code></pre></td></tr></table></figure><p>Integer的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br></code></pre></td></tr></table></figure><p>Double的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> value;<br></code></pre></td></tr></table></figure><p><strong>绝对线程安全</strong><br> &#x3D;&gt;绝对线程安全能够完全满足线程安全的定义，但是在Java中标注自己是线程安全的类，并不一定是绝对线程安全的类。</p><ul><li>比如Vector类，众所周知，它是一个线程安全类，常用的方法都被synchronized修饰。但是，它并不是绝对的线程安全，如果要做到绝对线程安全，必须在内部维护一组一致性的快照访问。每次对元素进行改动都要产生新的快照。但是付出的时间和空间成本是巨大的。</li></ul><p><strong>相对线程安全</strong><br> &#x3D;&gt;相对线程安全就是我们通常意义上讲的线程安全，他需要保证对这个对象的单次操作是安全的。在Java中，大部分的声明为线程安全的类都是这个级别。比如 Vector,HashTable,Collections中的synchronizedCollection()方法包装的集合等。</p><p><strong>线程兼容</strong><br>&#x3D;&gt;线程兼容是指对象本身是非线程安全的，但是可以通过在调用端正确的使用同步手段（加锁）来保证在并发下是安全的。Java中大部分的类都在此级别。比如ArrayList,HashMap等。</p><p><strong>线程对立</strong></p><p>&#x3D;&gt;线程对立是指不管调用端如何进行同步加锁，都无法保证并发下的线程安全。在Java中这种类是很少的，我们要避免使用。比如System.setIn(),System.setOut()等。</p><p><strong>线程安全的实现方案</strong><br>    在Java中，实现线程安全，主要有三种方案, 互斥同步、非阻塞同步、无同步方案</p><blockquote><p>这三种方案的详解可参考JUC篇的笔记内容</p></blockquote><h4 id="锁的优化"><a href="#锁的优化" class="headerlink" title="锁的优化"></a>锁的优化</h4><p>&#x3D;&gt; 高效并发是JDK5升级到JDK6后一项重要的改进，HotSpot虚拟机开发团队在这个版本上花费了巨大的资源去实现各种锁优化。比如，自旋锁，自适应自旋锁，锁消除，锁膨胀，轻量级锁，偏向锁等。这些技术都是为了在线程之间更高效的共享数据及解决竞争问题。从而提高程序的运行效率。</p><h5 id="自旋锁和自适应自旋锁"><a href="#自旋锁和自适应自旋锁" class="headerlink" title="自旋锁和自适应自旋锁"></a><strong>自旋锁和自适应自旋锁</strong></h5><p><strong>自旋锁</strong></p><p>&#x3D;&gt;在互斥同步的时候，对性能影响最大的就是阻塞的实现，挂起线程，恢复线程等的操作都需要用户态转为内核态去完成。这些操作给性能带来了巨大的压力。</p><p>​ 虚拟机的开发团队也注意到，共享数据的锁定状态只会持续很短的时间。为了这很短的时间让线程挂起，然后转为内核态的时间可能比锁定状态的时间更长。所以，我们可以让等待同步锁的进程不要进入阻塞，而是在原地稍微等待一会儿，不要放弃处理器的执行时间，看看持有锁的线程是不是很快就会释放锁。为了让线程等待，我们可以让线程执行一个<code>忙循环（原地自旋）</code>,这就是自旋锁。</p><pre><code class="hljs"> 自旋锁在JDK1.4.2之后就已经引入，但是默认是关闭的。我们可以使用`-XX:+UseSpinning`参数来开启。在JDK1.6之后就默认开启了。自旋锁并不是阻塞，所以它避免了用户态到内核态的频繁转化，但是它是要占用处理器的执行时间的。  如果占有对象锁的线程在很短的时间内就执行完，然后释放锁，这样的话，自旋锁的效果就会非常好。  如果占有对象锁的线程执行时间很长，那么自旋锁会白白消耗处理器的执行时间，这就带来了性能的浪费。这样的话，还不如将等待的线程进行阻塞。默认的自旋次数是10，也就是说，如果一个线程自旋10次之后，还没有拿到对象锁，那么就会进行阻塞。</code></pre><p> 我们也可以使用参数<code>-XX:PreBlockSpin</code>来更改。</p><p><strong>自适应自旋锁</strong></p><p>&#x3D;&gt;无论是使用默认的10次，还是用户自定义的次数，对整个虚拟机来说所有的线程都是一样的。但是同一个虚拟机中线程的状态并不是一样的，有的锁对象长一点，有的短一点，所以，在JDK1.6的时候，引入了自适应自旋锁。</p><p> 自适应自旋锁意味着自旋的时间不在固定了，而是根据当前的情况动态设置。</p><p> 主要取决于同一个锁上一次的自旋时间和锁的拥有者的状态。</p><p> 如果在同一个对象锁上，上一个获取这个对象锁的线程在自旋等待成功了，没有进入阻塞状态，说明这个对象锁的线程执行时间会很短，虚拟机认为这次也有可能再次成功，进而允许此次自旋时间可以更长一点。</p><p> 如果对于某个锁，自旋状态下很少获得过锁，说明这个对象锁的线程执行时间相对会长一点，那么以后虚拟机可能会直接省略掉自旋的过程。避免浪费处理器资源。</p><p> 自适应自旋锁的加入，随着程序运行时间的增长以及性能监控系统信息的不断完善，虚拟机对程序的自旋时间预测越来越准确，也就是虚拟机越来越聪明了。</p><h5 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h5><p>&#x3D;&gt;锁消除指的是，在即时编译器运行的时候，代码中要求某一段代码块进行互斥同步，但是虚拟机检测到不需要进行互斥同步，因为没有共享数据，此时，虚拟机会进行优化，将互斥同步消除。</p><p> 锁消除的主要判定依据来源于逃逸分析的数据支持。具体来说，如果虚拟机判断到，在一段代码中，创建的对象不会逃逸出去到其他线程，那么就可以把他当作栈上数据对待，同步也就没有必要了。</p><p><strong>有许多互斥同步的要求并不是程序员自己加入的，互斥同步的代码在Java中出现的程度很频繁。</strong></p><h5 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a><strong>锁粗化</strong></h5><p>&#x3D;&gt;也就是减少不必要的紧连在一起的unlock，lock操作，将多个连续的锁扩展成一个范围更大的锁。</p><p>​原则上，我们编写代码的时候，总是推荐将同步代码块的作用范围尽可能的缩小，只有共享数据的地方同步即可。这样是为了使得同步的操作变少，等待锁的线程能尽快的拿到锁。但是，如果一段代码中自始至终都锁的是同一个对象，那么就会对这个对象进行重复的加锁，释放，加锁，释放。频繁的进行用户态和内核态的切换，效率居然变低了。</p><h5 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h5><p> &#x3D;&gt;轻量级锁是JDK1.6之后加入的新型锁机制，轻量级是相对应于操作系统互斥量来实现的传统锁而言的。因此，传统锁就被称之为重量级锁。但是，要注意，轻量级并不是用来代替重量级的，它设计的初衷是在没有多线程竞争的前提下，减少传统的重量级锁带来的性能消耗问题的。</p><p> 首先，要理解轻量级锁以及后边的偏向锁，必须要先知道，HotSpot中对象的内存布局。对象的内存布局分为三部分，一部分是对象头（Mark Word），一部分是实例数据，还有一部分对其填充，为了让对象的大小为8字节的整数倍。</p><ul><li>对象头中包括两部分的数据包括，对象的哈希码，GC分代年龄，锁状态等。 如果对象是数组，那么还会有额外的一部分存储数组长度。</li></ul><h5 id="加锁过程"><a href="#加锁过程" class="headerlink" title="加锁过程"></a>加锁过程</h5><p>​在代码即将进入同步块的时候，虚拟机就会在当前栈帧中建立一个名为锁记录（Lock Record）的空间。然后将堆中对象的对象头拷贝到锁记录（官方给它加了Displaced前缀）便于修改对象头的引用时存储之前的信息。</p><p><img src="/Blog/Blog/2022/09/14/JVM08-%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91/JVM08-%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91/image-20220902183256865.png" alt="image-20220902183256865"></p><p>​然后，虚拟机将使用CAS（原子）操作尝试把堆中对象的对象头中前30个字节更新为指向锁记录的引用。</p><ul><li>如果成功，代表当前线程已经拥有了该对象的对象锁。然后将堆中对象头的锁标志位改为00。此时，代表对象就处于轻量级锁定状态。</li></ul><p><img src="/Blog/Blog/2022/09/14/JVM08-%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91/JVM08-%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91/image-20220902183600277.png" alt="image-20220902183600277"></p><ul><li><p>如果失败也就是堆中对象头的锁状态已经是0，则意味着对象的对象锁别拿走了。</p><p>虚拟机会判断对象的前30个字节是不是指向当前线程</p><ul><li>​如果是，说明当前线程已经拿到了对象锁，可以直接执行同步代码块。</li><li>​如果不是，说明对象锁被其他线程拿走了，必须等待。也就是进入自旋模式，如果在自旋一定次数后仍为获得锁，那么轻量级锁将会膨胀成重量级锁。</li></ul><p>如果发现有两条以上线程争用同一个对象锁，那么轻量级锁就不在有效，必须膨胀为重量锁，将对象的锁状态改为10。此时，堆中对象的对象头前30个字节的引用就是指向重量级锁。</p></li></ul><h5 id="解锁过程"><a href="#解锁过程" class="headerlink" title="解锁过程"></a>解锁过程</h5><p>&#x3D;&gt;如果堆中对象头的前30个字节指向当前线程，说明当前线程拥有对象锁，就用CAS操作将加锁的时候复制到栈帧锁记录中的对象头替换到堆中对象的对象头。并将堆中对象头的锁状态改为01。</p><ul><li>如果替换成功，说明解锁完成。</li><li>如果发现有别的线程尝试过获取堆中对象的对象锁，就要在释放锁的同时，唤醒被阻塞的线程。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM07-性能优化</title>
    <link href="/Blog/2022/09/14/JVM07-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/Blog/2022/09/14/JVM07-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="5、性能优化"><a href="#5、性能优化" class="headerlink" title="5、性能优化"></a>5、性能优化</h2><p>&#x3D;&gt;</p><p>生产环境中出现的问题：</p><ul><li>发生内存泄漏如何处理？</li><li>给服务器分配多少内存合适？</li><li>如何对垃圾回收器进行性能调优？</li><li>生产环境中CPU负载过高如何处理？</li><li>生产环境该给应用分配多少线程？</li><li>不加log，如何确定请求执行到了某一行代码？</li><li>不加log，如何实时查看某个方法的入参与返回值？</li></ul><p><strong>调优？</strong>&#x3D;&gt;</p><ul><li>防止出现OOM</li><li>解决OOM</li><li>减少Full GC的频率</li></ul><p><strong>不同阶段应该的考虑</strong></p><ul><li>上线前</li><li>运行阶段</li><li>线上出现OOM</li></ul><h4 id="JVM监控及诊断工具-GUI篇"><a href="#JVM监控及诊断工具-GUI篇" class="headerlink" title="JVM监控及诊断工具-GUI篇"></a>JVM监控及诊断工具-GUI篇</h4><p><strong>JDK自带工具</strong></p><ul><li>JConsole</li><li>VisualVM</li><li>JMC</li></ul><p><strong>第三方工具</strong></p><ul><li><p>MAT</p></li><li><p>Jprofiler</p></li><li><p>Arthas</p></li><li><p>Btrace</p><p>……</p></li></ul><h4 id="JVM常用参数"><a href="#JVM常用参数" class="headerlink" title="JVM常用参数"></a>JVM常用参数</h4><p>&#x3D;&gt; <a href="http://www.oracle.com/technetwork/java/javase/documentation/index.html%E3%80%82">http://www.oracle.com/technetwork/java/javase/documentation/index.html。</a></p><ol><li>标准参数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">-d32          使用 <span class="hljs-number">32</span> 位数据模型 (如果可用)<br>    -d64          使用 <span class="hljs-number">64</span> 位数据模型 (如果可用)<br>    -server       选择 <span class="hljs-string">&quot;server&quot;</span> VM<br>                  默认 VM 是 server.<br><br>    -cp &lt;目录和 zip/jar 文件的类搜索路径&gt;<br>    -classpath &lt;目录和 zip/jar 文件的类搜索路径&gt;<br>                  用 ; 分隔的目录, JAR 档案<br>                  和 ZIP 档案列表, 用于搜索类文件。<br>    -D&lt;名称&gt;=&lt;值&gt;<br>                  设置系统属性<br>    -verbose:[class|gc|jni]<br>                  启用详细输出<br>    -version      输出产品版本并退出<br>    -version:&lt;值&gt;<br>                  警告: 此功能已过时, 将在<br>                  未来发行版中删除。<br>                  需要指定的版本才能运行<br>    -showversion  输出产品版本并继续<br>    -jre-restrict-search | -no-jre-restrict-search<br>                  警告: 此功能已过时, 将在<br>                  未来发行版中删除。<br>                  在版本搜索中包括/排除用户专用 JRE<br>    -? -help      输出此帮助消息<br>    -X            输出非标准选项的帮助<br>    -ea[:&lt;packagename&gt;...|:&lt;classname&gt;]<br>    -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]<br>                  按指定的粒度启用断言<br>    -da[:&lt;packagename&gt;...|:&lt;classname&gt;]<br>    -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]<br>                  禁用具有指定粒度的断言<br>    -esa | -enablesystemassertions<br>                  启用系统断言<br>    -dsa | -disablesystemassertions<br>                  禁用系统断言<br>    -agentlib:&lt;libname&gt;[=&lt;选项&gt;]<br>                  加载本机代理库 &lt;libname&gt;, 例如 -agentlib:hprof<br>                  另请参阅 -agentlib:jdwp=help 和 -agentlib:hprof=help<br>    -agentpath:&lt;pathname&gt;[=&lt;选项&gt;]<br>                  按完整路径名加载本机代理库<br>    -javaagent:&lt;jarpath&gt;[=&lt;选项&gt;]<br>                  加载 Java 编程语言代理, 请参阅 java.lang.instrument<br>    -splash:&lt;imagepath&gt;<br>                  使用指定的图像显示启动屏幕<br></code></pre></td></tr></table></figure><ol start="2"><li>-x参数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">-Xmixed           混合模式执行（默认）<br>    -Xint             仅解释模式执行<br>    -Xbootclasspath:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;<br>                      设置引导类和资源的搜索路径<br>    -Xbootclasspath/a:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;<br>                      附加在引导类路径末尾<br>    -Xbootclasspath/p:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;<br>                      置于引导类路径之前<br>    -Xdiag            显示附加诊断消息<br>    -Xnoclassgc        禁用类垃圾收集<br>    -Xincgc           启用增量垃圾收集<br>    -Xloggc:&lt;file&gt;    将 GC 状态记录在文件中（带时间戳）<br>    -Xbatch           禁用后台编译<br>    -Xms&lt;size&gt;        设置初始 Java 堆大小<br>    -Xmx&lt;size&gt;        设置最大 Java 堆大小<br>    -Xss&lt;size&gt;        设置 Java 线程堆栈大小<br>    -Xprof            输出 cpu 分析数据<br>    -Xfuture          启用最严格的检查，预计会成为将来的默认值<br>    -Xrs              减少 Java/VM 对操作系统信号的使用（请参阅文档）<br>    -Xcheck:jni       对 JNI 函数执行其他检查<br>    -Xshare:off       不尝试使用共享类数据<br>    -Xshare:auto      在可能的情况下使用共享类数据（默认）<br>    -Xshare:on        要求使用共享类数据，否则将失败。<br>    -XshowSettings    显示所有设置并继续<br>    -XshowSettings:system<br>                      （仅限 Linux）显示系统或容器<br>                      配置并继续<br>    -XshowSettings:all<br>                      显示所有设置并继续<br>    -XshowSettings:vm 显示所有与 vm 相关的设置并继续<br>    -XshowSettings:properties<br>                      显示所有属性设置并继续<br>    -XshowSettings:locale<br>                      显示所有与区域设置相关的设置并继续<br></code></pre></td></tr></table></figure><ol start="3"><li>-xx 参数</li></ol><ul><li>布尔类型 : -XX +</li><li>非布尔类型：-XX:name&#x3D;value</li></ul><ol start="4"><li>打印设置的参数</li></ol><ul><li>-XX:+PrintCommandLineFlags 表示程序运行前打印出JVM参数</li><li>-XX:+PrintFlagsInitial 表示打印出所有参数的默认值</li><li>-XX:+PrintFlagsFinal 打印出最终的参数值</li><li>-XX:+PrintVMOptions 打印JVM的参数</li></ul><ol start="5"><li>栈<br>-Xss128k</li><li>堆<br>-Xms600m 设置堆的初始大小<br>-Xmx600m 设置堆的最大大小<br>-XX:NewSize&#x3D;1024m 设置年轻代的初始大小<br>-XX:MaxNewSize&#x3D;1024m 设置年轻代的最大值<br>-XX:SurvivorRatio&#x3D;8 伊甸园和幸存者的比例<br>-XX:NewRatio&#x3D;4 设置老年代和新生代的比例<br>-XX:MaxTenuringThreshold&#x3D;15 设置晋升老年代的年龄条件</li><li>方法区<br>永久代<br>-XX:PermSize&#x3D;256m 设置永久代初始大小<br>-XX:MaxPernSize&#x3D;256m 设置永久代的最大大小</li><li>元空间<br>-XX:MetasapceSize&#x3D;256m 设置初始元空间大小<br>-XX:MaxMatespaceSize&#x3D;256m 设置最大元空间大小 默认无限制</li><li>直接内存<br>-XX:MaxDirectMemorySize 设置直接内存的容量，默认与堆最大值一样。</li></ol><h4 id="GC日志的分类"><a href="#GC日志的分类" class="headerlink" title="GC日志的分类"></a>GC日志的分类</h4><p>1.轻GC（MinorGC）</p><p><img src="/Blog/Blog/2022/09/14/JVM07-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/JVM07-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20220902173921381.png" alt="image-20220902173921381"></p><p>2.重GC（FullGC）</p><p><img src="/Blog/Blog/2022/09/14/JVM07-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/JVM07-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20220902173938452.png" alt="image-20220902173938452"></p>]]></content>
    
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM06-垃圾回收机制</title>
    <link href="/Blog/2022/09/14/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <url>/Blog/2022/09/14/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="4、垃圾回收机制"><a href="#4、垃圾回收机制" class="headerlink" title="4、垃圾回收机制"></a>4、垃圾回收机制</h2><p><strong>什么是垃圾？</strong></p><p>&#x3D;&gt; 垃圾是指在运行程序中没有任何指针指向的对象，这个对象就是需要被回收的垃圾。 如果不及时对内存中的垃圾进行清理，那么，这些垃圾对象所占的内存空 间会一直保留到应用程序结束，被保留的空间无法被其他对象使用。甚至可能导致内存溢出。</p><p>垃圾收集，不是Java语言的伴生产物。早在1960年，第一门开始使用内存动态分配和垃圾收集技术的Lisp语言诞生。</p><blockquote><p>关于垃圾收集有三个经典问题 ?</p></blockquote><ol><li>哪些内存需要回收？</li><li>什么时候回收？</li><li>如何回收？</li></ol><p><strong>为什么需要GC？</strong></p><p>&#x3D;&gt;对于高级语言来说，一个基本认知是，如果不进行垃圾回收，内存迟早都会被消耗完，因为不断地分配内存空间而不进行回收，就好像不停地生产生活垃圾而从来不打扫一样。<br>除了释放没用的对象，垃圾回收也可以清除内存里的记录碎片。碎片整理将所占用的堆内存移到堆的一端，以便JVM 将整理出的内存分配给新的对象。<br>    随着应用程序所应付的业务越来越庞大、复杂，用户越来越多，没有GC就不能保证应用程序的正常进行。而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。</p><p><strong>早期的垃圾回收？</strong></p><p>在早期的C&#x2F;C++时代，垃圾回收基本上是手工进行的，开发人员可以使用new关键字进行内存申请，并使用delete关键字内存释放</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">MibBridge *pBridge = <span class="hljs-keyword">new</span> <span class="hljs-built_in">cmBaseGroupBridge</span>()； <br><span class="hljs-comment">//如果注册失败，使用Delete释放该对象所占内存区域 </span><br><span class="hljs-keyword">if</span> （pBridge-&gt;Register（kDestroy）！= NO_ERROR） <br><span class="hljs-keyword">delete</span> pBridge；<br></code></pre></td></tr></table></figure><p>​这种方式可以灵活控制内存释放的时间，但是会给开发人员带来&#x3D;&#x3D;频繁申请和释放内存的管理负担&#x3D;&#x3D;。倘若有一处内存区间由于程序员编码的问题忘记被回收，那么就会产生内存泄漏，垃圾对象永远无法被清除，随着系统运行时间的不断增长，垃圾对象所耗内存可能持续上升，直到出现内存溢出并造成应用程序崩溃。<br>​在有了垃圾回收机制后，上述代码块极有可能变成这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">MibBridge *pBridge = <span class="hljs-keyword">new</span> <span class="hljs-built_in">cmBaseGroupBridge</span>()； <br>pBridge -&gt; <span class="hljs-built_in">Register</span>(kDestroy);<br></code></pre></td></tr></table></figure><p>现在，除了Java以外，C#、Python、 Ruby等语言都使用了自动垃圾回收的思想，也是未来发展趋势。可以说，这种自动化的内存分配和垃圾回收的方式己经成为现代开发语言必备的标准。</p><p><strong>Java垃圾回收机制</strong></p><ul><li>自动内存管理，无需开发人员手动参与内存的分配与回收，这样降低内存泄漏和内存溢出的风险</li><li>自动内存管理机制，将程序员从繁重的内存管理中释放出来，可以更专心地专注于业务开发</li><li>对于Java开发人员而言，自动内存管理就像是一个黑匣子，如果过度依赖于“自动”，那么这将会是一场灾难，最严重的就会弱化Java开发人员在程序出现内存溢出时定位问题和解决问题的能力。</li><li>此时，了 解JVM的自动内存分配和内存回收原理就显得非常重要，只有在真正了解JVM是如何管理内存后，我们才能够在遇见OutOfMemoryError时， 快速地根据错误异常日志定位问题和解决问题。</li><li>当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就必须对这些“自动化”的技术实施必要的监控和调节。</li><li>垃圾回收器可以对年轻代回收，也可以对老年代回收，甚至是全堆和方法区的回收。</li></ul><p>其中Java堆是垃圾收集器的工作重点。</p><p>从次数上讲：</p><ul><li>频繁收集新生区（伊甸园区）</li><li>较少收集老年区</li><li>基本不动方法区（Perm&#x2F;元空间）</li></ul><img src="/Blog/Blog/2022/09/14/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20220902010935114.png" alt="image-20220902010935114" style="zoom:67%;"><h4 id="垃圾回收相关算法"><a href="#垃圾回收相关算法" class="headerlink" title="垃圾回收相关算法"></a>垃圾回收相关算法</h4><h5 id="判断阶段：对象存活判断"><a href="#判断阶段：对象存活判断" class="headerlink" title="判断阶段：对象存活判断"></a>判断阶段：对象存活判断</h5><p>&#x3D;&gt;在堆里存放着几乎所有的Java对象实例，在GC执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为己经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为垃圾标记阶段。</p><p>那么在JVM中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。</p><p>判断对象存活一般有两种方式：<strong>引用计数算法</strong>和<strong>可达性分析算法</strong>。</p><p><strong>引用计数算法</strong></p><p>​引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型 的引用计数器属性。用于记录对象被引用的情况。</p><p>​对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1；当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收。</p><p><strong>优点：</strong></p><ul><li>实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。</li></ul><p><strong>缺点：</strong></p><ul><li>需要单独的字段存储计数器，这样的做法增加了存储空间的开销。</li><li>每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了时间开销。</li><li>引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一 条致命缺陷，导致&#x3D;&#x3D;在Java的垃圾回收器中没有使用这类算法&#x3D;&#x3D;。</li></ul><img src="/Blog/Blog/2022/09/14/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20220902090839469.png" alt="image-20220902090839469" style="zoom:80%;"><p><strong>可达性分析算法&#x2F;追踪性垃圾收集</strong></p><p>​相对于引用计数而言，可达性分析算法解决了循环引用的问题。防止了内存泄露的发生。</p><ul><li>可达性分析算法是以根对象（GCRoots）为起始点，按照从上至下的方式<strong>搜索被根对象集合所连接的目标对象是否可达</strong>。</li><li>使用可达性分析算法之后，内存中存活的对象都会被根对象集合直接或者间接连接，<strong>搜索走过的路径叫做引用链</strong>。</li><li>如果目标对象没有任何引用链相连，则表示不可达，为垃圾。</li></ul><p><img src="/Blog/Blog/2022/09/14/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20220902091145167.png" alt="image-20220902091145167"></p><p><strong>其中，Java语言中，GCRoots包括以下几类元素</strong></p><ul><li>各个线程被调用的方法中的参数，&#x3D;&#x3D;局部变量&#x3D;&#x3D;</li><li>本地方法栈内JNT（本地方法）引用的对象</li><li>方法区中&#x3D;&#x3D;静态属性&#x3D;&#x3D;引用的对象<ul><li>比如： Java类中引用类型静态变量</li></ul></li><li>方法区中的&#x3D;&#x3D;常量引用的对象&#x3D;&#x3D;<ul><li>比如字符串常量池的引用</li></ul></li><li>所有&#x3D;&#x3D;被同步锁持有的对象&#x3D;&#x3D;</li><li>虚拟机的内部引用<ul><li>基本数据类型的包装类，常驻的异常对象，系统类加载器</li></ul></li><li>反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等</li><li>除了这些固定的GCRoots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。比如：分代收集和局部回收（Partial GC）。</li><li>如果只针对Java堆中的某一块区域进行垃圾回收（比如：典型的只针 对新生代）， 必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的， 这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一.并将关联的区域对象也加入GC Roots集合中去考虑，才能保证可达性分析的准确性。</li></ul><p><img src="/Blog/Blog/2022/09/14/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20220902091331282.png" alt="image-20220902091331282"></p><h5 id="对象的finalization机制"><a href="#对象的finalization机制" class="headerlink" title="对象的finalization机制"></a>对象的finalization机制</h5><p>&#x3D;&gt;</p><ul><li>Java语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑。</li><li>当垃圾回收器发现没有引用指向一个对象，即：垃圾回收此对象之前，总会先调用这个对象的finalize（）方法。</li><li>finalize（）方法允许在子类中被重写，用于在对象被回收时进行资源释放。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。</li><li>永远不要主动调用某个对象的finalize （）方法，应该交给垃圾回收机制调用。理由包括下面三点：<ol><li>在finalize()时可能会导致对象复活。</li><li>finalize()方法的执行时间是没有保障的，它完全由GC线程决定，极端情况下，若不发生GC，则finalize()方法将没有执行机会。</li><li>一个糟糕的finalize （）会严重影响GC的性能。</li></ol></li><li>从功能上来说，finalize（）方法与C++ 中的析构函数比较相似，但是Java采用的是基于垃圾回收器的自动内存管理机制，所以finalize（）方法在本质，上不同于C++ 中的析构函数。</li></ul><p><strong>对象是否死亡</strong></p><p>&#x3D;&gt;</p><ul><li><p>由于finalize （）方法的存在，&#x3D;&#x3D;虚拟机中的对象一般处于三种可能的状态。&#x3D;&#x3D;</p></li><li><p>如果从所有的根节点都无法访问到某个对象，说明对象己经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段。&#x3D;&#x3D;一个无法触及的对象有可能在某一个条件下“复活”自己&#x3D;&#x3D;，如果这样，那么对它的回收就是不合理的，为此，定义虚拟机中的对象可能的三种状态。如下：</p><p>​<strong>可触及的</strong>：从根节点开始，可以到达这个对象。</p><p>​<strong>可复活的</strong>：对象的所有引用都被释放，但是对象有可能在finalize（）中复活。</p><p>​<strong>不可触及的</strong>：对象的finalize（）被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为finalize（） 只会被调用一一次。</p></li><li><p>以上3种状态中，是由于finalize（）方法的存在，进行的区分。只有在对象不可触及时才可以被回收。</p></li></ul><p><strong>判断是否可以回收</strong></p><p>&#x3D;&gt;如果对象objA到GC Roots没有引用链，则进行第一 次标记。</p><p>…….进行筛选，判断此对象是否有必要执行finalize（）方法</p><ol><li>如果对象objA没有重写finalize（）方法，或者finalize （）方法已经被虚拟机调用过，则虚拟机视为“没有必要执行”，objA被判定为不可触及的。</li><li>如果对象objA重写了finalize（）方法，且还未执行过，那么objA会被插入到F一Queue队列中，由一个虚拟机自动创建的、低优先级的Finalizer线程触发其finalize（）方法执行。</li><li>finalize（）方法是对象逃脱死亡的最后机会，稍后Gc会对F一Queue队列中的对象进行第二次标记。如果objA在finalize（）方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA会被移出“即将回收”集合。之后，对象会再次出现没有引用存在的情况。 在这个情况下，finalize方法不会被再次调用，对象会直接变成不可触及的状态，也就是说，一个对象的finalize方法只会被调用一次。</li></ol><h5 id="清除阶段：相关常见算法"><a href="#清除阶段：相关常见算法" class="headerlink" title="清除阶段：相关常见算法"></a><strong>清除阶段：相关常见算法</strong></h5><p>​当成功区分出内存中存活对象和死亡对象之后，GC接下来的任务就是执行垃圾回收，释放掉无用对象所占用的空间。目前比较常用的算法有三种：</p><ul><li>标记清除算法</li><li>复制算法</li><li>标记压缩算法</li></ul><p><strong>标记清除算法</strong></p><p>&#x3D;&gt;标记清除算法是一种非常基础和常见的垃圾收集算法</p><p><strong>执行过程：</strong></p><p>​当堆中的有效内存空间被耗尽时，就会停止程序STW，然后进行标记-清除</p><img src="/Blog/Blog/2022/09/14/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20220902092101317.png" alt="image-20220902092101317" style="zoom:67%;"><p><strong>标记</strong>：Collector从引用的根节点开始遍历，标记所有的被引用的对象，在对象的对象头中记录为可达对象。</p><p><strong>清除</strong>：将对象头中没有标记为可达对象的对象进行清除。</p><p><strong>优点：</strong>常用，简单</p><p><strong>缺点：</strong></p><ul><li>效率不算高(两次O（n）)</li><li>在进行GC的时候，需要停止整个应用程序，导致用户体验差</li><li>这种方式清理出来的<strong>空闲内存是不连续的，产生内存碎片</strong>。需要维护一个空闲列表</li></ul><p>清除？&#x3D;&gt;这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放。</p><p><strong>复制算法</strong></p><p>&#x3D;&gt;为了解决标记清除算法效率方面的问题，M.L.Minsky于1963年发表了著名的论文，“ 使用双存储区的Li sp语言垃圾收集器CALISP Garbage Collector Algorithm Using SerialSecondary Storage ）”。M.L. Minsky在该论文中描述的算法被人们称为复制（Copying）算法，它也被M. L.Minsky本人成功地引入到了Lisp语言的一个实现版本中。</p><p><strong>执行过程：</strong></p><p>​将活着的内存空间分为两块，每次使用一块，进行垃圾回收的时候，将存活对象复制到另一块未使用的区域，然后将源区域清空，然后交换两个内存的角色</p><img src="/Blog/Blog/2022/09/14/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20220902092505559.png" alt="image-20220902092505559" style="zoom:67%;"><p><strong>优点：</strong></p><ul><li>没有标记和清除过程，实现简单，&#x3D;&#x3D;运行高效&#x3D;&#x3D;</li><li>复制过去以后保证&#x3D;&#x3D;空间连续性&#x3D;&#x3D;，不会出现“碎片”问题。</li></ul><p><strong>缺点：</strong></p><ul><li>此算法的缺点也是很明显的，就是需要两倍的内存空间。</li><li>对于G1这种分拆成为大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，不管是内存占用或者时间开销也不小。</li><li><strong>特别的</strong> 如果系统中的可用对象很多，复制算法不会很理想，因为要复制大量的对象</li></ul><p>在新生代，对常规应用的垃圾回收，一次通常可以回收708一 99的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种收集算法回收新生代。</p><p><strong>标记压缩算法</strong></p><p>&#x3D;&gt;复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，基于老年代垃圾回收的特性，需要使用其他的算法。 标记一清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以JVM的设计者需要在此基础之上进行改进。&#x3D;&#x3D;标记一压缩（Mark一Compact） 算法由此诞生&#x3D;&#x3D;。 1970年前后，G. L. Steele 、C. J. Chene和D.S. Wise 等研究者发布标记一压缩算法。在许多现代的垃圾收集器中，人们都使用了标记一压缩算法或其改进版本。</p><p><strong>执行过程：</strong></p><ul><li>第一阶段和标记一清除算法一样，从根节点开始标记所有被引用对象.</li><li>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。</li><li>之后，清理边界外所有的空间。</li></ul><img src="https://images-1301128659.cos.ap-beijing.myqcloud.com/MacBookPro202208051421544.png" alt="image-20210704140307884" style="zoom:67%;"><blockquote><p>​标记一压缩算法的最终效果等同于标记一清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为标记一清除一压缩（Mark一 Sweep一Compact）算法。</p><p>​二者的本质差异在于<strong>标记清除算法是一种非移动式的回收算法，标记压缩是移动式的</strong>。是否移动回收后的存活对象是一项优缺点并存的风险决策。</p><p>​可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。</p></blockquote><p><strong>指针碰撞？</strong>&#x3D;&gt;如果内存空间以规整和有序的方式分布，即已用和未用的内存都各自一边，彼此之间维系着一个记录下一次分配起始点的标记指针，当为新对象分配内存时，只需要通过修改指针的偏移量将新对象分配在第一个空闲内存位置上，这种分配方式就叫做指针碰撞（Bump the Pointer） 。</p><p><strong>优点：</strong></p><ul><li>消除了标记一清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只 需要持有一个内存的起始地址即可。</li><li>消除了复制算法当中，内存减半的高额代价。</li></ul><p><strong>缺点：</strong></p><ul><li>从效率.上来说，标记一整理算法要低于复制算法。</li><li>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址。</li><li>移动过程中，需要全程暂停用户应用程序。即： STW</li></ul><p><strong>三种常见算法的对比</strong></p><table><thead><tr><th>属性\算法</th><th>标记清除算法</th><th>复制算法</th><th>标记压缩算法</th></tr></thead><tbody><tr><td>时间复杂度</td><td>中</td><td>快</td><td>满</td></tr><tr><td>空间复杂度</td><td>少</td><td>占用2倍</td><td>少</td></tr><tr><td>内存碎片</td><td>有</td><td>无</td><td>无</td></tr><tr><td>移动对象</td><td>否</td><td>是</td><td>是</td></tr></tbody></table><p>除上面三种常见算法外另还有：分代收集算法、增量收集算法、分区算法。</p><p><strong>分代收集算法</strong></p><p>&#x3D;&gt;前面所有这些算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生。</p><p>​分代收集算法，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，<strong>不同生命周期的对象可以采取不同的收集方式，以便提高回收效率</strong>。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，以提高垃圾回收的效率。</p><p><strong>增量收集算法</strong></p><p>&#x3D;&gt;上述现有的算法，在垃圾回收过程中，应用软件将处于一种stop the World的状态。在Stop the World状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting） 算法的诞生。</p><p><strong>基本思想</strong><br>  如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。 总的来说，增量收集算法的基础仍是传统的标记</p><p><strong>缺点：</strong></p><ul><li>​使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。清除和复制算法。增量收集算法通过对线程间冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作。</li></ul><p><strong>分区算法</strong></p><p>&#x3D;&gt;一般来说，在相同条件下，堆空间越大，一次GC时所需要的时间就越长，有关GC产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块 大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。 分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。 每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</p><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p> <strong>System.gc的理解</strong></p><p>&#x3D;&gt;</p><ul><li>在默认情况下，手动调用System.gc或者RunTime.getRunTime().gc()，会显式出发FullGC 同时对新生代和老年代进行回收，尝试释放垃圾。</li><li>然而System.gc（）调用附带一个免责声明，&#x3D;&#x3D;无法保证对垃圾收集器的调用(无法保证马上触发GC)&#x3D;&#x3D;。</li><li>JVM实现者可以通过system.gc（）调用来决定JVM的GC行为。而一般情况下，垃圾回收应该是自动进行的，无须手动触发，否则就太过于麻烦了。在一些特殊情况下，如我们正在编写一个性能基准，我们可以在运行之间调用System.gc（）。</li><li>以下代码,如果注掉System.runFinalization(); 那么控制台不保证一定打印,证明了System.gc（）无法保证GC一定执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemGCTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemGCTest</span>();<br>        System.gc();<span class="hljs-comment">//提醒jvm的垃圾回收器执行gc,但是不确定是否马上执行gc </span><br>        <br>        System.runFinalization();<span class="hljs-comment">//强制调用失去引用的对象的finalize()方法</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.finalize();<br>        System.out.println(<span class="hljs-string">&quot;SystemGCTest 重写了finalize()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>内存溢出</strong></p><p>&#x3D;&gt;存溢出相对于内存泄漏来说，尽管更容易被理解，但是同样的，内存溢出也是引发程序崩溃的罪魁祸首之一。</p><p>由于GC一直在发展，所有一般情况下，除非应用程序占用的内存增长速度非常快，造成垃圾回收已经跟不上内存消耗的速度，否则不太容易出现O0M的情况。</p><p>大多数情况下，GC会进行各种年龄段的垃圾回收，实在不行了就放大招，来一次独占式的Full GC操作，这时候会回收大量的内存，供应用程序继续使用。</p><p>javadoc中对OutOfMemoryError的解释是，&#x3D;&#x3D;没有空闲内存，并且垃圾收集器也无法提供更多内存&#x3D;&#x3D;。</p><ul><li><p>首先说没有空闲内存的情况：说明Java虚拟机的堆内存不够。原因有二：</p><p>（1） Java虚拟机的堆内存设置不够。 比如：可能存在内存泄漏问题；也很有可能就是堆的大小不合理，比如我们要处理比较可观的数据量，但是没有显式指定JVM堆大小或者指定数值偏小。我们可以通过参数一Xms、一Xmx来调整。</p><p>（2）代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）对于老版本的Oracle JDK，因为永久代的大小是有限的，并且JVM对永久代垃圾回收（如，常量池回收、卸载不再需要的类型）非常不积极，所以当我们不断添加新类型的时候，永久代出现OutOfMemoryError也非常多见，尤其是在运行时存在大量动态类型生成的场合；类似intern字符串缓存占用太多空间，也会导致0OM问题。对应的异常信息，会标记出来和永久代相关： <code>&quot;java. lang. OutOfMemoryError： PermGen space&quot;。</code> 随着元数据区的引入，方法区内存已经不再那么窘迫，所以相应的00M有所改观，出现00M，异常信息则变成了：<code>“java. lang. OutOfMemoryError： Metaspace&quot;</code>。 直接内存不足，也会导致0OM。</p></li><li><p>这里面隐含着一层意思是，在抛出0utOfMemoryError之 前，通常垃圾收集器会被触发，尽其所能去清理出空间。</p><p>例如：在引用机制分析中，涉及到JVM会去尝试回收软引用指向的对象等。</p><p>在java.nio.BIts.reserveMemory（）方法中，我们能清楚的看到，System.gc（）会被调用，以清理空间。</p></li><li><p>当然，也不是在任何情况下垃圾收集器都会被触发的</p><p>比如，我们去分配一一个超大对象，类似一个超大数组超过堆的最大值，JVM可以判断出垃圾收集并不能解决这个问题，所以直接拋出OutOfMemoryError</p></li></ul><p><strong>内存泄漏</strong></p><p>&#x3D;&gt;</p><ul><li>也称作“存储渗漏”。严格来说，&#x3D;&#x3D;只有对象不会再被程序用到了，但是GC又不能回收他们的情况，才叫内存泄漏&#x3D;&#x3D;。</li><li>但实际情况很多时候一些不太好的实践（或疏忽）会导致&#x3D;&#x3D;对象的生命周期变得很长甚至导致内存溢出0OM&#x3D;&#x3D;，也可以叫做<code>宽泛意义</code>上的“内存泄漏</li><li>尽管内存泄漏并不会立刻引起程序崩溃，但是一旦发生内存泄漏，程序中的可用内存就会被逐步蚕食，直至耗尽所有内存，最终出现0utOfMemory异常，导致程序崩溃。</li><li>注意，这里的存储空间并不是指物理内存，而是指虚拟内存大小，这个虚拟内存大小取决于磁盘交换区设定的大小。</li><li><strong>举例</strong><ul><li>1、单例模式 单例的生命周期和应用程序是一样长的，所以单例程序中，如果持有对外部对象的引用的话，那么这个外部对象是不能被回收的，则会导致内存泄漏的产生。</li><li>2、一些提供close的资源未关闭导致内存泄漏 数据库连接（ dataSourse. getConnection（）），网络连接（socket）和io连接必须手动close，否则是不能被回收的。</li></ul></li></ul><p><strong>STW</strong></p><p>&#x3D;&gt;Stop一the一World，简称STW，指的是Gc事件发生过程中，会产生应用程序的停顿。停顿产生时整个应用程序线程都会被暂停，没有任何响应，有点像卡死的感觉，这个停顿称为STW。</p><p>​被STW中断的应用程序线程会在完成GC之后恢复，频繁中断会让用户感觉像是网速不快造成电影卡带一样， 所以我们需要减少STW的发生。</p><p>​STW事件和采用哪款GC无关，所有的GC都有这个事件。</p><p>哪怕是G1也不能完全避免Stop一the一world情况发生，只能说垃圾回收器越来越优秀，回收效率越来越高，尽可能地缩短了暂停时间。</p><p>STW是JVM在后台自动发起和自动完成的。在用户不可见的情况下，把用户正常的工作线程全部停掉。</p><p>开发中不要用System.gc（）；会导致STW的发生。</p><p><strong>垃圾回收的并发与并行</strong></p><ul><li><p>并行（Parallel） ：指多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态。</p><p>如ParNew、 Parallel Scavenge、 Parallel 0ld；</p></li><li><p>串行（Serial）</p><p>相较于并行的概念，单线程执行。</p><p>如果内存不够，则程序暂停，启动JVM垃圾回收器进行垃圾回收。回收完，再启动程序的线程。</p></li><li><p>并发（Concurrent） ：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），垃圾回收线程在执行时不会停顿用户程序的运行。</p><p>用户程序在继续运行，而垃圾收集程序线程运行于另一个CPU上；</p><p>如： CMS、G1</p></li></ul><p><strong>安全点(SafePoint)</strong><br>&#x3D;&gt;程序执行时并非在所有地方都能停顿下来开始GC，只有在特定的位置才能停顿下来开始GC，这些位置称为“安全点（Safepoint） ”<br>Safe Point的选择很重要，如果太少可能导致GC等待的时间太长，如果太频繁可能导致运行时的性能问题。大部分指令的执行时间都非常短暂，通常会根据“是否具有让程序长时间执行的特征”为标准。比如：选择些执行时间较长的指令作为Safe Point， 如方法调用、循环跳转和异常跳转等。</p><p><strong>安全区域(Safe Region)</strong><br>&#x3D;&gt; Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint 。但是，程序“不执行”的时候呢？例如线程处于Sleep 状态或Blocked状态，这时候线程无法响应JVM的中断请求，“走” 到安全点去中断挂起，JVM也不太可能等待线程被唤醒。对于这种情况，就需要安全区域（Safe Region）来解决。  安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始GC都是安全的。我们也可以把Safe Region 看做是被扩展了的Safepoint。</p><p><strong>Java中的引用</strong></p><table><thead><tr><th>引用</th><th>引用存在 是否回收</th><th>应用场景</th></tr></thead><tbody><tr><td>强引用</td><td>死也不回收</td><td>大部分</td></tr><tr><td>软引用</td><td>内存不足时回收</td><td>缓存</td></tr><tr><td>弱引用</td><td>GC即回收</td><td>缓存</td></tr><tr><td>虚引用</td><td></td><td>GC时对象跟踪</td></tr><tr><td>终结器引用</td><td></td><td></td></tr></tbody></table><h4 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h4><p>&#x3D;&gt;</p><p><strong>1.按线程分</strong></p><ul><li><p><strong>串行垃圾回收器</strong> </p><p>单CPU，配置较低，只有一条GC线程</p></li><li><p><strong>并行垃圾回收器</strong></p><p>并发较强的CPU 多条GC</p></li></ul><p><img src="/Blog/Blog/2022/09/14/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20220902171723082.png" alt="image-20220902171723082"></p><p><strong>2.按照工作模式</strong></p><ul><li><p><strong>并发式垃圾回收器</strong></p><p>与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。</p></li><li><p><strong>独占式垃圾回收器</strong></p><p>一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。</p></li></ul><p><strong>3.按碎片处理方式</strong></p><ul><li><p>压缩式垃圾回收器</p><p>回收完成后，对存活对象进行压缩整理，消除回收后的碎片。</p></li><li><p>非压缩式垃圾回收器</p><p>非回收碎片，再创建对象使用空闲列表。</p></li></ul><p><strong>4.按工作的内存区间分</strong></p><ul><li>年轻代垃圾回收器</li><li>老年代垃圾回收器</li></ul><h5 id="性能指标相关概念"><a href="#性能指标相关概念" class="headerlink" title="性能指标相关概念"></a>性能指标相关概念</h5><p><strong>吞吐量：</strong></p><p>​吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量&#x3D;运行用户代码时间&#x2F; （运行用户代码时间+垃圾收集时间）</p><ul><li>比如：虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%</li></ul><p><strong>垃圾收集开销：</strong>吞吐量的补数，垃圾收集所用时间与总运行时间的比例。</p><p><strong>暂停时间：</strong>执行垃圾收集时，程序的工作线程被暂停的时间</p><ul><li><p>“暂停时间”是指一个时间段内应用程序线程暂停，让GC线程执行的状态</p><p>例如，GC期间100毫秒的暂停时间意味着在这100毫秒期间内没有应用程序线程是活动的。.</p></li></ul><p><strong>收集频率：</strong>相对于应用程序的执行，收集操作发生的频率。</p><p><strong>内存占用：</strong> Java堆区所占的内存大小</p><p><strong>快速：</strong>一个对象从诞生到被回收所经历的时间。</p><h5 id="七款经典垃圾回收器"><a href="#七款经典垃圾回收器" class="headerlink" title="七款经典垃圾回收器"></a>七款经典垃圾回收器</h5><ul><li>串行回收器：Serial、Serial Old</li><li>并行回收器：ParNew、Parallel Scavenge.、Parallel Old</li><li>并发回收器：CMS.、G1</li></ul><p><img src="/Blog/Blog/2022/09/14/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/JVM06-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/image-20220902172535515.png" alt="image-20220902172535515"></p>]]></content>
    
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM05-执行引擎</title>
    <link href="/Blog/2022/09/14/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
    <url>/Blog/2022/09/14/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="3、执行引擎"><a href="#3、执行引擎" class="headerlink" title="3、执行引擎"></a>3、执行引擎</h2><p><img src="/Blog/Blog/2022/09/14/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20220830202951284.png" alt="image-20220830202951284"></p><p>&#x3D;&gt;</p><ul><li>执行引擎是Java虚拟机的核心组成部分之一。</li><li>虚拟机是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而&#x3D;&#x3D;虚拟机的执行引擎则是由软件自行实现&#x3D;&#x3D;的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式。</li><li>JVM的主要任务是&#x3D;&#x3D;负责装载字节码到其内部&#x3D;&#x3D;，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM所识别的字节码指令、符号表和其他辅助信息</li><li>那么，如果想让一个Java程序运行起来、执行引擎的任务就是&#x3D;&#x3D;将字节码指令解释&#x2F;编译为对应平台上的本地机器指令才可以&#x3D;&#x3D;。简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者.</li></ul><p><strong>工作过程：</strong></p><p>从外观上来看，所有的Java虚拟机的执行引擎输入、输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行结果。</p><ol><li>执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器。</li><li>每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址。</li><li>当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息。</li></ol><p><img src="/Blog/Blog/2022/09/14/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20220830203201603.png" alt="image-20220830203201603"></p><h4 id="Java代码编译执行过程"><a href="#Java代码编译执行过程" class="headerlink" title="Java代码编译执行过程"></a>Java代码编译执行过程</h4><p><strong>大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过下面图中的各个步骤：</strong></p><p><img src="/Blog/Blog/2022/09/14/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20220830203344256.png" alt="image-20220830203344256"></p><ul><li><p>解释型语言走中间一行</p></li><li><p>编译型语言走下边一行</p></li></ul><p><strong>Java代码编译是由Java源码编译器来完成的</strong></p><p><img src="/Blog/Blog/2022/09/14/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20220830203517226.png" alt="image-20220830203517226"></p><p><strong>Java字节码的执行是由JVM执行引擎来完成的</strong></p><p><img src="/Blog/Blog/2022/09/14/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20220830203605737.png" alt="image-20220830203605737"></p><p><strong>解释器</strong></p><p>&#x3D;&gt; 当Java虚拟机启动时会根据定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</p><p><strong>JIT编译器</strong></p><p>&#x3D;&gt; 就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言</p><p><strong>为什么说Java是半编译半解释型语言？</strong></p><p><img src="/Blog/Blog/2022/09/14/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20220830204157898.png" alt="image-20220830204157898"></p><p>JDK1.0时代，将Java语言定位为“解释执行”还是比较准确的。再后来，Java也发展出可以直接生成本地代码的编译器。 现在JVM在执行Java代码的时候，通常都会将解释执行与编译执行二者结合起来进行。</p><h4 id="机器码，指令，汇编语言"><a href="#机器码，指令，汇编语言" class="headerlink" title="机器码，指令，汇编语言"></a>机器码，指令，汇编语言</h4><p><strong>机器码</strong></p><ul><li>各种用二进制编码方式表示的指令，叫做&#x3D;&#x3D;机器指令码&#x3D;&#x3D;。开始，人们就用它采编写程序，这就是机器语言。</li><li>机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错。</li><li>用它编写的程序一经输入计算机，CPU直接读取运行，因此和其他语言编的程序相比，执行速度最快。</li><li>机器指令与CPU紧密相关，所以不同种类的CPU所对应的机器指令也就不同。</li></ul><p><strong>指令</strong></p><ul><li>由于机器码是有0和1组成的二进制序列，可读性实在太差，于是人们发明了指令。</li><li>指令就是把机器码中特定的0和1序列，简化成对应的指令（一般为英文简写，如mov，inc等），可读性稍好</li><li>由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如mov），对应的机器码也可能不同。</li></ul><p><strong>指令集</strong></p><ul><li><p>不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。</p></li><li><p>如常见的</p><p>x86指令集，对应的是x86架构的平台</p><p>ARM指令集，对应的是ARM架构的平台</p></li></ul><p><strong>汇编语言</strong></p><ul><li><p>由于指令的可读性还是太差，于是人们又发明了汇编语言。</p></li><li><p>在汇编语言中，用助记符（Mnemonics）代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址。</p></li><li><p>在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。</p><p>由于计算机只认识指令码，所以用汇编语言编写的程序还必须翻译成机器指令码，计算机才能识别和执行。</p></li></ul><p><strong>高级语言</strong></p><ul><li>为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。高级语言比机器语言、汇编语言更接近人的语言。</li><li>当计算机执行高级语言编写的程序时，仍然需要把程序解释和编译成机器的指令码。完成这个过程的程序就叫做解释程序或编译程序。</li></ul><p><img src="/Blog/Blog/2022/09/14/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20220830204703047.png" alt="image-20220830204703047"></p><p><strong>字节码</strong></p><ul><li><p>字节码是一种中间状态（中间码）的二进制代码（文件），它比机器码更抽象，需要直译器转译后才能成为机器码</p></li><li><p>字节码主要为了实现特定软件运行和软件环境、与硬件环境无关。</p></li><li><p>字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。</p><p>字节码的典型应用为Java bytecode</p></li></ul><p><strong>C、C++源程序执行过程</strong></p><p>编译过程又可以分成两个阶段：编译和汇编。</p><ul><li>编译过程：是读取源程序（字符流），对 之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码</li><li>汇编过程：实际上指把汇编语言代码翻译成目标机器指令的过程。</li></ul><h4 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h4><p><img src="/Blog/Blog/2022/09/14/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/JVM05-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20220830205043732.png" alt="image-20220830205043732"></p><p>&#x3D;&gt;JVM设计者们的初衷仅仅只是单纯地为了&#x3D;&#x3D;满足Java程序实现跨平台特性&#x3D;&#x3D;，因此避免采用静态编译的方式直接生成本地机器指令，从而诞生了实现解释器在运行时采用逐行解释字节码执行程序的想法。</p><ul><li>解释器真正意义上所承担的角色就是一个运行时“翻译者”，将字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</li><li>当一条字节码指令被解释执行完成后，接着再根据PC寄存器中记录的下一条需要被执行的字节码指令执行解释操作。</li></ul><p><strong>在Java的发展历史里，一共有两套解释执行器，即古老的字节码解释器、现在普遍使用的模板解释器。</strong></p><p>字节码解释器在执行时通过纯软件代码模拟字节码的执行，效率非常低下。而模板解释器将每一条字节码和一个模板函数相关联，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能。</p><p>在HotSpot VM中，解释器主要由Interpreter模块和Code模块构成。</p><ul><li>Interpreter模块：实现了解释器的核心功能</li><li>Code模块：用于管理HotSpot VM在运行时生成的本地机器指令</li></ul><blockquote><p><strong>现状</strong> &#x3D;&#x3D;&#x3D;&gt;</p><p>由于解释器在设计和实现上非常简单，因此除了Java语言之外，还有许多高级语言同样也是基于解释器执行的，比如Python、 Perl、Ruby等。但是在今天，基于解释器执行已经沦落为低效的代名词，并且时常被一些C&#x2F;C+ +程序员所调侃。</p><p>为了解决这个问题，JVM平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是将整个函数体编译成为机器码，每次函数执行时，只执行编译后的机器码即可，这种方式可以使执行效率大幅度提升。</p><p>不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献。</p></blockquote><h4 id="JIT编译器"><a href="#JIT编译器" class="headerlink" title="JIT编译器"></a>JIT编译器</h4><p>&#x3D;&gt;Java 语言的“编译器” 其实是一段“不确定”的操作过程，因为它可能是指一个前端编译器（其实叫“编译器的前端” 更准确一些）把.java文件转变成.class文件的过程；<br>也可能是指虚拟机的后端运行期编译器（JIT 编译器，Just In Time Compiler）把字节码转变成机器码的过程。<br>还可能是指使用静态提前编译器（AOT 编译器，Ahead Of Time Compiler）直接把. java文件编译成本地机器代码的过程。</p><ul><li>前端编译器： Sun的Javac、 Eclipse JDT中的增量式编译器（ECJ）</li><li>JIT编译器： HotSpot VM的C1、C2编译器。</li><li>AOT编译器： GNU Compiler for the Java （GCJ） 、Excelsior JET。</li></ul><h4 id="Graal编译器"><a href="#Graal编译器" class="headerlink" title="Graal编译器"></a>Graal编译器</h4><ul><li>自JDK10起，HotSpot又加入一个全新的即时编译器： Graal编译器</li><li>编译效果短短几年时间就追评了C2编译器。未来可期。</li><li>目前，带着“实验状态”标签，需要使用开关参数 -XX： +UnlockExperimentalVMOptions 一XX： +UseJVMCICompiler去激活，才可以使用。</li></ul><h4 id="AOT编译器"><a href="#AOT编译器" class="headerlink" title="AOT编译器"></a>AOT编译器</h4><ul><li>jdk9引入了AOT编译器（静态提前编译器，Ahead Of Time Compiler）</li><li>Java 9引入了实验性AOT编译工具jaotc。它借助了Graal 编译器，将所输入的Java 类文件转换为机器码，并存放至生成的动态共享库之中。</li><li>所谓AOT编译，是与即时编译相对立的一个概念。我们知道，即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而AOT编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。</li></ul><p><strong>最大好处：</strong></p><pre><code class="hljs"> Java虚拟机加载已经预编译成二进制库，可以直接执行。不必等待即时编译器的预热，减少Java应用给人带来“第一次运行慢”的不良体验。</code></pre><p><strong>缺点：</strong></p><ul><li>破坏了java”一次编译，到处运行”，必须为每个不同硬件、oS编译对应的发行包。</li><li>降低了Java链接过程的动态性，加载的代码在编译期就必须全部已知。</li><li>还需要继续优化中，最初只支持Linux x64 java base</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM04-运行时数据区02</title>
    <link href="/Blog/2022/09/14/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/"/>
    <url>/Blog/2022/09/14/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/</url>
    
    <content type="html"><![CDATA[<h4 id="方法区-永久代-x2F-元空间-详解"><a href="#方法区-永久代-x2F-元空间-详解" class="headerlink" title="方法区(永久代&#x2F;元空间)详解"></a>方法区(永久代&#x2F;元空间)详解</h4><h5 id="栈、堆、方法区的交互关系"><a href="#栈、堆、方法区的交互关系" class="headerlink" title="栈、堆、方法区的交互关系"></a>栈、堆、方法区的交互关系</h5><p>&#x3D;&gt;</p><p>从线程共享与否的角度看</p><p><img src="/Blog/Blog/2022/09/14/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/image-20220828162930627.png" alt="image-20220828162930627"></p><p>交互关系</p><p>&#x3D;&gt;</p><p><img src="/Blog/Blog/2022/09/14/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/image-20220828163654621.png" alt="image-20220828163654621"></p><p><img src="/Blog/Blog/2022/09/14/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/image-20220828164255125.png" alt="image-20220828164255125"></p><h5 id="设置方法区大小及OOM"><a href="#设置方法区大小及OOM" class="headerlink" title="设置方法区大小及OOM"></a>设置方法区大小及OOM</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//返回虚拟机试图使用的最大内存</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Runtime.getRuntime.maxMemory();<br>        <span class="hljs-comment">//返回jvm的初始化总内存</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> Runtime.getRuntime().totalMemory();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>设置大小：</strong></p><ul><li><p>jdk7 及以前：</p><ul><li>永久代初始分配大小: -XX:PermSize来设置。默认值是20.75M</li><li>永久代最大空间：-XX :MaxPermSize来设定。32位机器默认是64M，64位机器模式是82M</li><li>当JVM加载的类信息容量超过了这个值，会报异常OutOfMemoryError ： PermGen space</li></ul></li><li><p>jdk8及以后：</p><ul><li>元空间初始分配大小：-XX:MetaspaceSize windows下默认为21M</li><li>元空间最大：-XX ：MaxMetaspaceSize windows默认为-1 即无限制</li><li>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。 如果元数据区发生溢出，虚拟机一样会拋出异常OutOfMemoryError： Metaspace</li><li>初始分配大小就是初始的高水位线，一旦触及这个水位线，Full GC将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，那么在不超过MaxMetaspaceSize时，适当提高该值。如果释放空间过多，则适当降低该值。</li><li>如果初始化的高水位线设置过低，.上 述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到Full GC多次调用。为了避免频繁地GC，建议将- XX ：MetaspaceSize设置为一个相对较高的值。</li></ul></li></ul><p><strong>OOM：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OOM_test</span>&#123;<br>    <span class="hljs-type">byte</span> <span class="hljs-variable">array</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>]  <span class="hljs-comment">//1mb</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        ArrayList&lt;OOM_test&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OOM_test</span>());<br>                count = count +<span class="hljs-number">1</span>;<br>            &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                <br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;爆出 OOM异常 java.lang.OutOfMemoryError: Java heap space</p><p>可以使用 JPofiler工具分析OOM原因再进行问题排查。</p><h5 id="方法区内部结构"><a href="#方法区内部结构" class="headerlink" title="方法区内部结构"></a>方法区内部结构</h5><p><img src="/Blog/Blog/2022/09/14/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/image-20220829143556024.png" alt="image-20220829143556024"></p><p><strong>方法区存储的信息：</strong></p><ul><li>类型信息</li><li>运行时常量池</li><li>静态变量</li><li>域（属性）信息</li><li>方法信息</li><li>JIT代码缓存</li></ul><p><strong>类型信息</strong>：</p><p>对每个加载的类型（ 类class、接口interface、枚举enum、注解annotation），JVM必 须在方法区中存储以下类型信息：</p><p>①这个类型的完整有效名称（全名&#x3D;包名.类名）<br>②这个类型直接父类的完整有效名（对于interface或是java. lang.Object，都没有父类）<br>③这个类型的修饰符（public， abstract， final的某个子集）<br>④这个类型直接实现接口的一个有序列表</p><p><strong>域信息：</strong></p><ul><li>JVM必须再方法区中保存类型的所有域的相关信息以及域的声明顺序</li><li>域的相关信息包括：域名称、 域类型、域修饰符（public， private， protected， static， final， volatile， transient的某个子集）</li></ul><p><strong>方法信息：</strong></p><p>JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序：</p><ul><li><p>方法名称。</p></li><li><p>方法的返回类型（或void）。</p></li><li><p>方法参数的数量和类型（按顺序）。</p></li><li><p>方法的修饰符（public， private， protected， static， final， synchronized， native ， abstract的一个子集）。</p></li><li><p>方法的字节码（bytecodes）、操作数栈、局部变量表及大小（ abstract和native 方法除外）。</p></li><li><p>异常表（ abstract和native方法除外）。</p><p>每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</p></li></ul><p><strong>non-final的类变量</strong></p><ul><li>静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分</li><li>类变量被类的所有实例所共享，即使没有类实例你也可以访问它。</li><li>全局常量 static final 在编译的时候就被分配赋值了。</li></ul><p><strong>运行时常量池</strong></p><p>要想弄清楚方法区的运行时常量池，必须先理解类文件中的常量池。因为运行时常量池是从常量池加载的。</p><p><img src="/Blog/Blog/2022/09/14/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/image-20220830020330080.png" alt="image-20220830020330080"></p><ul><li><p>几种在常量池内存储的数据类型包括：</p><p>数量值</p><p>字符串值</p><p>类引用</p><p>字段引用</p><p>方法引用</p></li><li><p>运行时常量池（ Runtime Constant Pool）是方法区的一部分。</p></li><li><p>常量池表（Constant Pool Table）是Class文件的一部分，&#x3D;&#x3D;用于存放编译期生成的各种字面量与符号引用&#x3D;&#x3D;，这部分内容将在类加载后存放到方法区的运行时常量池中。</p></li><li><p>运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</p></li><li><p>JVM为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。</p></li><li><p>运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换为真实地址。</p></li><li><p>运行时常量池，相对于Class文件常量池的另一重要特征是：&#x3D;&#x3D;具备动态性&#x3D;&#x3D;。</p></li><li><p>运行时常量池类似于传统编程语言中的符号表（symbol table） ，但是它所包含的数据却比符号表要更加丰富一些。</p></li><li><p>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛OutOfMemoryError异常。</p></li></ul><h4 id="对象的实例化"><a href="#对象的实例化" class="headerlink" title="对象的实例化"></a>对象的实例化</h4><h5 id><a href="#" class="headerlink" title></a><img src="/Blog/Blog/2022/09/14/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/image-20220830172320536.png" alt="image-20220830172320536"></h5><h5 id="创建对象的具体步骤："><a href="#创建对象的具体步骤：" class="headerlink" title="创建对象的具体步骤："></a>创建对象的具体步骤：</h5><p><strong>1.判断对象对应的类是否加载、链接、初始化</strong></p><p> 检查元空间的常量池中是否有类的符号引用，检查是否加载链接初始化。</p><ul><li><p>如果是，则生成对应的Class文件。</p></li><li><p>如果否，则在双亲委派机制模式下，使用当前类以 【ClassLoader+包名+类名】为Key查找对应的.class文件。</p><p>如果找到，进行加载，生成对应的Class文件。</p><p>如果找不到，爆出ClassNotFoundException。</p></li></ul><p><strong>2.为对象分配内存</strong></p><p>计算对象占用大小，堆中分配对应字节。如果实例变量时引用变量，仅分配4个字节。</p><ul><li><p>如果内存规整：指针碰撞</p><p>所有用过的内存在一边，空闲的内存在另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial、ParNew这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带有compact （整理）过程的收集器时，使用指针碰撞。</p></li><li><p>如果内存不规整：空闲列表</p><p>如果内存不是规整的，已使用的内存和未使用的内存相互交错，那么虛拟机将采用的是空闲列表法来为对象分配内存。意思是虚拟机维护了一个列表，记录上哪些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。这种分配方式成为“空闲列表（Free List）。</p></li></ul><p>说明：选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</p><p>给对象的属性赋值的操作先后顺序： ① 属性的默认初始化 ② 显式初始化&#x2F;代码块中初始化 （谁在前先谁执行） ③ 构造器中初始化。</p><p><strong>3.处理并发安全问题</strong></p><ul><li>CAS （ Compare And Swap ）失败重试、区域加锁：保证指针更新操作的原子性；</li><li>TLAB把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆的伊甸园区中预先分配一小块内存，称为本地线程分配缓冲区，（TLAB ，Thread Local Allocation Buffer） 虚拟机是否使用TLAB，可以通过一XX：+UseTLAB参数来 设定。</li></ul><p><strong>4.初始化分配到的空间</strong></p><p>内存分配结束，虚拟机将分配到的内存空间都初始化为零值。这一步保证了对象的实例字段在Java代码中可以不用赋初始值就可以直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><p><strong>5.设置对象的对象头</strong></p><p>将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现。</p><p><strong>6.执行init方法进行初始化</strong></p><p>​在Java程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。 因此一般来说（由字节码中是否跟随有invokespecial指令所决定），new指令之 后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全创建出来。<br>加载类元信息 &#x3D;&gt; 为对象分配内存 &#x3D;&gt;处理并发问题 &#x3D;&gt;属性的默认初始化 &#x3D;&gt;设置对象头 &#x3D;&gt;init方法</p><h5 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h5><p><strong>1、对象头</strong></p><ul><li><p>运行时元数据哈希值（ HashCode ）</p><p>GC分代年龄</p><p>锁状态标志</p><p>线程持有的锁</p><p>偏向线程ID</p><p>偏向时间戳</p></li><li><p>类型指针：指向类元数据的InstanceKlass，确定该对象所属的类型</p></li></ul><p>ps: 如果时数组，还需记录数组的长度</p><p><strong>2、实例数据</strong></p><p>它是对象真正存储的有效信息，包括程序代码中定义的各种类型的字段（包括从父类继承下来的和本身拥有的字段） 规则：</p><ul><li>相同宽度的字段总被分配在一起</li><li>父类中定义的变量会出现在子类之前</li><li>如果CompactFields参数为true（默认为true），子类的窄变量可能插入到父类变量的空隙</li></ul><p><strong>3、填充</strong></p><p>不是必须的，仅起到占位符的作用。</p><h4 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h4><h5 id="字符串的基本特性"><a href="#字符串的基本特性" class="headerlink" title="字符串的基本特性"></a>字符串的基本特性</h5><ul><li><p>String ：字符串，使用一对””来表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">//字面量的定义方式 在字符串常量池中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//调用构造方法</span><br></code></pre></td></tr></table></figure></li><li><p>String 声明为final的，不可被继承</p></li><li><p>String 实现的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable,Comparable&lt;String&gt;,CharSequence &#123; <br>    <span class="hljs-meta">@Stable</span> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] value； <br>&#125;<br></code></pre></td></tr></table></figure><p>Serializable接口：表示字符串是支持序列化的</p><p>实现了Comparable接口：表示String可以比较大小</p><p>实现了CharSequence接口：只读访问</p></li><li><p>String：代表不可变的字符序列。简称：不可变性。<br>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。<br>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。<br>当调用String的replace（）方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</p></li><li><p>字符串常量池中是不会存储相同内容的字符串的。<br>字符串常量池是一个固定大小的Hashtable，如果放进StringPool的String非常多， 就会造成Hash冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是当调用String. intern时性能会大幅下降。<br>使用一XX： StringTableSize可设置StringTable的长度<br>在jdk6中StringTable是固定的，就是1009的长度，对StringTableSize的大小设 置没有要求<br>在jdk7中，StringTable的长度默认值是60013<br>jdk8开始,1009是StringTable长度可设置的最小值</p></li></ul><h5 id="字符串的内存分配"><a href="#字符串的内存分配" class="headerlink" title="字符串的内存分配"></a>字符串的内存分配</h5><ul><li><p>在Java语言中有8种基本数据类型和一种比较特殊的类型String。这些 类型为了使它们在运行过程中速度更快、更节省内存，都提供了一种常量池的概念。</p><p>常量池就类似一.个Java系统级别提供的缓存。8种基本数据类型的常量 池都是系统协调的，String类 型的常量池比较特殊。它的主要使用方法有两种。直接使用双引号声明出来的String对象会直接存储在常量池中。比如： String info &#x3D; “abc” ；</p><p>如果不是用双引号声明的String对象，可以使用String提供的<strong>intern（）方法。</strong></p></li><li><p>Java 6及以前，字符串常量池存放在永久代。</p></li><li><p>Java 7中Oracle的工程师对字符串池的逻辑做了很大的改变，即&#x3D;&#x3D;将字符串常量池的位置调整到Java堆内。&#x3D;&#x3D;</p><p>所有的字符串都保存在堆（Heap）中，和其他普通对象一样，这样可以让你在进行调优应用时仅需要调整堆大小就可以了。</p><p>字符串常量池概念原本使用得比较多，但是这个改动使得我们有足够的理由让我们重新考虑在Java 7中使用String. intern（）。</p></li><li><p>Java8元空间，字符串常量在堆</p></li></ul><p>StringTable为什么要调整 ？&#x3D;&gt; ①永久代permSize默认比较小; ②永久代的垃圾回收频率低;</p><p><img src="/Blog/Blog/2022/09/14/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/JVM04-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA02/image-20220830181412854.png" alt="image-20220830181412854"></p><h5 id="intern-的使用"><a href="#intern-的使用" class="headerlink" title="intern()的使用"></a>intern()的使用</h5><ul><li>如果不是用双引号声明的String对象，可以使用String提供的intern方法： intern方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中。</li><li>比如： String myInfo &#x3D; new String(“I love u”).intern()； 也就是说，如果在任意字符串上调用String. intern方法，那么其返回结果所指向的那个类实例，必须和直接以常量形式出现的字符串实例完全相同。因此，下 列表达式的值必定是true： （”a” + “b” + “c”）.intern（）&#x3D;&#x3D; “abc”; 通俗点讲，Interned String就是确保字符串在内存里只有一份拷贝，这样可以节约内存空间，加快字符串操作任务的执行速度。注意，这个值会被存放在字符串内部池（String Intern Pool）。</li></ul><p><strong>new String(“ab”) 会创建几个对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;ab&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;a&quot;</span>) + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&gt;</p><p>​new String(“ab”); 会创建两个对象。</p><ul><li>一个对象是：new 关键字在堆空间中创建的。</li><li>另一个对象是：字符串常量池中的对象”ab”。字节码指令：ldc</li></ul><p><strong>那new String(“a”) + new String(“b”) ?</strong></p><ul><li><p>对象1：new StringBuilder() 只要你前后拼接有非常量也就是变量，new String就是变量，那就会有这个对象，底层字节码是依赖这个拼接的</p></li><li><p>对象2：new String(“a”)  堆空间</p></li><li><p>对象3：常量池中的a</p></li><li><p>对象4：new String(“b”) 堆空间</p></li><li><p>对象5：常量池中的”b”</p></li><li><p>深入剖析：StringBuilder的toString(); 这个方法的底层又new 了一个字符串把拼接结果返回的</p><p>对象6：new String(“ab”);最后拼接完把StringBuilder转为字符串返回。</p></li></ul><p><strong>ps: toString()的调用，在字符串常量池中，没有生成”ab”</strong></p><p><strong>关于String.intern()的面试题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringIntern</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;1&quot;</span>); <span class="hljs-comment">//s 指向堆空间&quot;1&quot;的内存地址 </span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> s.intern();<span class="hljs-comment">//调用此方法之前，字符串常量池中已经存在了&quot;1&quot; 此时s1指向字符串常量池中&quot;1&quot;的内存地址 </span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>; <br>        <span class="hljs-comment">//s2 指向字符串常量池已存在的&quot;1&quot;的内存地址 所以 s1==s2 </span><br>        System.out.println(s == s2);<span class="hljs-comment">//jdk6：false jdk7/8：false </span><br>        System.out.println(s1 == s2);<span class="hljs-comment">//jdk6: true jdk7/8：true</span><br>        System.out.println(System.identityHashCode(s));<span class="hljs-comment">//491044090</span><br>        System.out.println(System.identityHashCode(s1));<span class="hljs-comment">//644117698</span><br>        System.out.println(System.identityHashCode(s2));<span class="hljs-comment">//644117698 </span><br>        <span class="hljs-comment">//s3变量记录的地址为：new String(&quot;11&quot;) </span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;1&quot;</span>) + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;1&quot;</span>); <span class="hljs-comment">//执行完上一行代码以后，字符串常量池中，是否存在&quot;11&quot;呢？答案：不存在！！ </span><br>        <span class="hljs-comment">//在字符串常量池中生成&quot;11&quot;。如何理解：jdk6:创建了一个新的对象&quot;11&quot;,也就有新的地址。 </span><br>        <span class="hljs-comment">// jdk7:此时常量池中并没有创建&quot;11&quot;,而是创建一个指向堆空间中new String(&quot;11&quot;)的地址</span><br>        s3.intern(); <br>        <span class="hljs-comment">//s4变量记录的地址：使用的是上一行代码代码执行时，在常量池中生成的&quot;11&quot;的地址 </span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;11&quot;</span>; <br>        System.out.println(s3 == s4);<span class="hljs-comment">//jdk6：false jdk7/8：true </span><br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM03-运行时数据区</title>
    <link href="/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/"/>
    <url>/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="2、运行时数据区"><a href="#2、运行时数据区" class="headerlink" title="2、运行时数据区"></a>2、运行时数据区</h2><h4 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h4><p>一个进程对应一个jvm实例，一个运行时数据区，又包含多个线程，这些线程共享了方法区和堆，每个线程包含了程序计数器、本地方法栈和虚拟机栈</p><p>（JDK8以后方法区对应为元数据区）</p><p><img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220827182925885.png" alt="image-20220827182925885"></p><p>**关于内存&#x3D;&gt; ** 内存是非常重要的系统资源，是硬盘和cpu的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了JAVA在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。不同的jvm对于内存的划分方式和管理机制存在着部分差异（对于Hotspot主要指方法区）</p><h5 id="分区介绍"><a href="#分区介绍" class="headerlink" title="分区介绍"></a>分区介绍</h5><p>​java虚拟机定了若干种程序运行期间会使用到的运行时数据区</p><ul><li>有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁，红色区域部分</li><li>另外一些则是与线程一一对应，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁，灰色部分</li></ul><p><img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220827183720659.png" alt="image-20220827183720659"></p><p>每一个JVM实例都对应一个Runtime实例，即运行时环境。相当于上图中的框内部分。</p><h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><ul><li>线程是一个程序里的运行单元，JVM允许一个程序有多个线程并行的执行；</li><li>在HotSpot JVM，每个线程都与操作系统的本地线程直接映射。</li><li>当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。java线程执行终止后。本地线程也会回收。</li><li>操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用java线程中的run（）方法.</li></ul><h5 id="JVM系统线程"><a href="#JVM系统线程" class="headerlink" title="JVM系统线程"></a>JVM系统线程</h5><p>​如果你使用jconsole或者任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用main方法的main线程以及所有这个main线程自己创建的线程；</p><p>这些主要的后台系统线程在HotSpot JVM里主要是以下几个：</p><ul><li>虚拟机线程这种线程的操作时需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。 这种线程的执行包括“stop-the-world”的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销。</li><li>周期任务线程：这种线程是时间周期事件的提现（比如中断），他们一般用于周期性操作的调度执行。</li><li>GC线程：这种线程对于JVM里不同种类的垃圾收集行为提供了支持。</li><li>编译线程：这种线程在运行时会降字节码编译成本地代码。</li><li>信号调度线程：这种线程接收信号并发送给JVM,在它内部通过调用适当的方法进行处理。</li></ul><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>&#x3D;&gt;JVM中的程序计数寄存器（Program Counter Register），Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能够运行。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。</p><p><strong>作用：</strong>PC寄存器是用来存储指向下一条指令的地址，也即将将要执行的指令代码。由执行引擎读取下一条指令。</p><p><img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220828024257880.png" alt="image-20220828024257880"></p><p><strong>特征：</strong></p><ul><li>它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域。</li><li>在jvm规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</li><li>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的java方法的JVM指令地址；或者，如果是在执行native方法，则是未指定值（undefined）。</li><li>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</li><li>字节码解释器工作时就是通过改变这个计数器的值来选取吓一跳需要执行的字节码指令。</li><li>它是唯一一个在java虚拟机规范中没有规定任何OOM(OutOfMemoryError)情况的区域。</li></ul><h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><p>&#x3D;&gt;由于跨平台性的设计，java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。 优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</p><p><strong>栈：</strong></p><ul><li>运行时的单位。</li><li>解决程序的运行问题，即程序如何执行，或者说如何处理数据。</li><li>存放基本数据类型的局部变量，以及引用数据类型的对象的引用。</li></ul><p><strong>堆：</strong></p><ul><li>是存储的单位。</li><li>堆解决的时数据存储的问题，即数据怎么放、放在哪儿。</li><li>对象主要都是放在堆空间的，是运行时数据区比较大的一块。</li></ul><h5 id="虚拟机栈是什么？"><a href="#虚拟机栈是什么？" class="headerlink" title="虚拟机栈是什么？"></a>虚拟机栈是什么？</h5><p>&#x3D;&gt;java虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。 每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应这个一次次的java方法调用。它是线程私有的。</p><p>​&#x3D;&#x3D;<strong>虚拟机栈的生命周期和线程是一致的。</strong>&#x3D;&#x3D;</p><p><strong>作用：</strong></p><ul><li><p>主管java程序的运行，它保存方法的局部变量（8种基本数据类型、对象的引用地址）、部分结果，并参与方法的调用和返回。</p><p>局部变量：相对于成员变量（或属性），基本数据变量：相对于引用类型变量（类、数组、接口）</p></li></ul><p>? &#x3D;&gt;    栈   &#x3D;  8大基本类型 + 对象引用 + 实例的方法。</p><p><strong>栈的特点：</strong></p><ul><li>栈是一种快速有效的分配存储方式，访问速度仅次于PC寄存器。</li><li>JVM直接对java栈的操作只有两个<ol><li>每个方法执行，伴随着进栈（入栈、压栈）</li><li>执行结束后的出栈工作。</li></ol></li><li>对于栈来说不存在垃圾回收问题。</li></ul><p><strong>栈的常见异常：</strong></p><ul><li>StackOverFlowError 异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>().test();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        a();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>        test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220828030606283.png" alt="image-20220828030606283"></p><h5 id="设置栈内存大小"><a href="#设置栈内存大小" class="headerlink" title="设置栈内存大小"></a><strong>设置栈内存大小</strong></h5><p>​我们可以使用参数-Xss选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。 （IDEA设置方法：Run-EditConfigurations-VM options 填入指定栈的大小-Xss256k）</p><h5 id="栈的运行原理"><a href="#栈的运行原理" class="headerlink" title="栈的运行原理"></a>栈的运行原理</h5><ul><li>每个线程都有自己的栈，栈中的数据都是以**栈帧(Stack Frame)**的格式存在</li><li>在这个线程上正在执行的每个方法都对应各自的一个栈帧</li><li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</li><li>JVM直接对java栈的操作只有两个，就是对栈帧的压栈和出栈，遵循先进后出&#x2F;后进先出的和原则。</li><li>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为当前栈帧(Current Frame),与当前栈帧对应的方法就是当前方法（Current Method）</li><li>执行引擎运行的所有字节码指令只针对当前栈帧进行操作</li><li>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前栈帧。</li><li>不同线程中所包含的栈帧是不允许相互引用的，即不可能在另一个栈帧中引用另外一个线程的栈帧</li><li>如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧</li><li>Java方法有两种返回函数的方式，一种是正常的函数返回，使用return指令；另外一种是抛出异常。不管使用哪种方式，都会导致栈帧被弹出。</li></ul><h5 id="栈帧内部结构"><a href="#栈帧内部结构" class="headerlink" title="栈帧内部结构"></a>栈帧内部结构</h5><img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220828031037834.png" alt="image-20220828031037834" style="zoom:67%;"><p>每个栈帧中存储着:</p><ul><li>局部变量(Local Variables)</li><li>操作数栈(Operand Stack)(或表达式栈)</li><li>动态链接(Dynamic Linking)(或指向运行时常量池的方法引用)</li><li>方法返回地址(Return Address)(或方法正常退出或者异常退出的定义)</li><li>一些附加信</li></ul><h5 id="栈帧与线程？"><a href="#栈帧与线程？" class="headerlink" title="栈帧与线程？"></a>栈帧与线程？</h5><p>&#x3D;&gt; <img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220828031153654.png" alt="image-20220828031153654" style="zoom:67%;"></p><p><strong>局部变量表</strong></p><ul><li>局部变量表也被称之为局部变量数组或本地变量表</li><li>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量这些数据类型包括各类基本数据类型、对象引用（reference），以及returnAddress类型</li><li>由于局部变量表是建立在线程的栈上，是线程私有的数据，因此不存在数据安全问题</li><li>局部变量表所需的容量大小是在编译期确定下来的,并保存在方法的Code属性的【字节码最大长度】数据项中。在方法运行期间是不会改变局部变量表的大小的。</li><li>方法嵌套调用的次数由栈的大小决定。一般来说，栈越大，方法嵌套调用次数越多。对一个函数而言，他的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。</li><li>局部变量表中的变量只在当前方法调用中有效。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。</li></ul><p><strong>静态变量与局部变量？&#x3D;&gt;</strong></p><ul><li><p>按照数据类型分：</p><p>①基本数据类型;</p><p>②引用数据类型；</p></li><li><p>按照在类中声明的位置分：</p><p>①成员变量：在使用前，都经历过默认初始化赋值</p><ul><li>static修饰：类变量：类加载的链接的准备阶段给类变量默认赋值——&gt;初始化阶段给类变量显式赋值即静态代码块赋值；</li><li>不被static修饰：实例变量：随着对象的创建，会在堆空间分配实例变量空间，并进行默认赋值</li></ul><p>②局部变量：在使用前，必须要进行显式赋值的！否则，编译不通过</p></li></ul><p>&#x3D;&#x3D;补充：在栈帧中，与性能调优关系最为密切的部分就是局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递<br>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收&#x3D;&#x3D;</p><p><strong>操作数栈</strong></p><ul><li>操作数栈，主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。</li><li>操作数栈就是jvm执行引擎的一个工作区，当一个方法开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的</li><li>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译器就定义好了，保存在方法的code属性中，为max_stack的值。</li><li>栈中的任何一个元素都是可以任意的java数据类型32bit的类型占用一个栈单位深度</li><li>64bit的类型占用两个栈深度单位</li><li>操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标砖的入栈push和出栈pop操作来完成一次数据访问</li><li>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新PC寄存器中下一条需要执行的字节码指令。</li><li>操作数栈中的元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译期间进行验证，同时在类加载过程中的类验证阶段的数据流分析阶段要再次验证。</li></ul><p><strong>动态链接</strong></p><p>&#x3D;&gt;</p><ul><li>每一个栈帧内部都包含一个指向运行时常量池或该栈帧所属方法的引用。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接。比如invokedynamic指令</li><li>在Java源文件被编译成字节码文件中时，所有的变量和方法引用都作为符号引用（symbolic Refenrence）保存在class文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用。</li></ul><p><strong>方法放回地址</strong></p><p>方法返回时可能需要在栈帧中保存一些信息，用来于恢复调用者（调用当前方法的方法）的执行状态。一般来说，方法正常退出时，调用者的程序计数器的值就可以作为返回地址，栈帧中很可能会保存这个计数器值。而方法异常退出时，返回地址是要通过异常处理器表来确定的，栈帧中就一般不会保存这部分信息。</p><p>方法返回的过程实际上等同于把当前栈帧出栈，可能执行的操作有：恢复调用者的局部变量表和操作数栈，把返回值（如果有的话）压入调用者栈帧的操作数栈中，调整程序计数器的值使其指向方法调用指令后面的一条指令等等。</p><p><strong>附加信息</strong></p><p>栈帧中还允许携带与java虚拟机实现相关的一些附加信息。例如，对程序调试提供支持的信息。（很多资料都忽略了附加信息）</p><h4 id="本地方法接口"><a href="#本地方法接口" class="headerlink" title="本地方法接口"></a>本地方法接口</h4><p>&#x3D;&gt;简单来讲，一个Native Method就是一个java调用非java代码的接口，一个Native Method 是这样一个java方法：该方法的实现由非Java语言实现，比如C。这个特征并非java特有，很多其他的编程语言都有这一机制，比如在C++ 中，你可以用extern “C” 告知C++ 编译器去调用一个C的函数。 在定义一个native method时，并不提供实现体（有些像定义一个Java interface），因为其实现体是由非java语言在外面实现的。 本地接口的作用是融合不同的编程语言为java所用，它的初衷是融合C&#x2F;C++程序。 标识符native可以与其他所有的java标识符连用，但是abstract除外。</p><p><strong>为什么使用Native Method？</strong></p><p>​Native使用起来非常方便，然而有些层次的任务用java实现起来不容易，或者我们对程序的效率很在意时，问题就来了。</p><p><strong>与java环境外的交互：</strong></p><p>​有时java应用需要与java外面的环境交互，这是本地方法存在的主要原因。 你可以想想java需要与一些底层系统，如擦偶偶系统或某些硬件交换信息时的情况。本地方法正式这样的一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐细节。</p><p><strong>与操作系统的交互：</strong></p><p>​JVM支持着java语言本身和运行库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至jvm的一些部分就是用C写的。还有，如果我们要使用一些java语言本身没有提供封装的操作系统特性时，我们也需要使用本地方法。</p><p><strong>Sun’s Java</strong></p><p>​Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread的setPriority()方法是用Java实现的，但是它实现调用的事该类里的本地方法setPriority0（）。这个本地方法是用C实现的，并被植入JVM内部，在Windows 95的平台上，这个本地方法最终将调用Win32 SetProority（）API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。</p><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p><img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220828032918155.png" alt="image-20220828032918155"></p><p>&#x3D;&gt;</p><ul><li><p>Java虚拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用</p></li><li><p>本地方法栈，也是线程私有的。</p></li><li><p>允许被实现成固定或者是可动态拓展的内存大小。（在内存溢出方面是相同的）</p><ul><li>如果线程请求分配的栈容量超过本地方法栈允许的最大容量，Java虚拟机将会抛出一个StackOverFlowError异常。</li><li>如果本地方法栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的本地方法栈，那么java虚拟机将会抛出一个OutOfMemoryError异常。</li></ul></li><li><p>本地方法是使用C语言实现的。</p></li><li><p>它的具体做法是在虚拟机栈中登记native方法，在Execution Engine执行时加载本地方法库。</p></li><li><p>当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。它和虚拟机拥有同样的权限。</p><ul><li>本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区 。</li><li>它甚至可以直接使用本地处理器中的寄存器 。</li><li>直接从本地内存的堆中分配任意数量的内存。</li></ul></li><li><p>并不是所有的JVM都支持本地方法。因为Java虚拟机规范并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构等。如果JVM产品不打算支持native方法，也可以无需实现本地方法栈。</p></li><li><p>在hotSpot JVM中，直接将本地方法栈和虚拟机栈合二为一。</p></li></ul><h4 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h4><p><img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220821151427810.png" alt="image-20220821151427810"></p><ul><li><p>Sun公司 HotSpot   <code>Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</code></p></li><li><p>BEA  <code>JRockit</code></p></li><li><p>IBM <code>J8 VM</code></p></li></ul><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p><strong>Heap</strong>，一个JVM只有一个堆内存，堆内存的大小是可以调节的。</p><p>类加载器读取了类文件后，一般会把什么放进堆中？&#x3D;&gt; 类，方法，常量…保存所有引用类型的真实对象。</p><p>堆内存中细分为三个区域：</p><ul><li>新生区 （伊甸园区 Eden Space）</li><li>养老区</li><li>永久区</li></ul><p>GC垃圾回收，主要是在伊甸园区（轻GC）和养老区（重GC  Full GC）。</p><p>假设内存满了-&gt; OOM ，堆内存不够。 java.lang.OutOfMemoryError: Java heap space</p><p>在JDK8以后，永久存储区改了名字&#x3D;&gt; 元空间。</p><h5 id="新生区"><a href="#新生区" class="headerlink" title="新生区"></a>新生区</h5><p>&#x3D;&gt;</p><ul><li>类：诞生 和成长的地方，甚至死亡；</li><li>伊甸园，所有的对象都是在伊甸园区 new 出来的</li><li>幸存者区 【Suvivor】（0,1）</li><li>内存大小相对来说比较小，垃圾回收比较频繁</li></ul><h5 id="老年区"><a href="#老年区" class="headerlink" title="老年区"></a>老年区</h5><p>&#x3D;&gt;</p><ul><li>99%的对象都是临时对象</li><li>存放声明周期比较长的对象</li><li>主要采用压缩方式来避免内存碎片；有些垃圾回收器（CMS垃圾回收器）处于效率原因不会进行压缩</li></ul><h5 id="永久区-方法区-x2F-元空间"><a href="#永久区-方法区-x2F-元空间" class="headerlink" title="永久区(方法区&#x2F;元空间)"></a>永久区(方法区&#x2F;元空间)</h5><p>&#x3D;&gt; 这个区域不存在垃圾回收，关闭VM虚拟就会释放这个区域的内存</p><ul><li><p>常驻内存</p></li><li><p>主要存放类定义（JDK自身携带的Class对象），字节码和常量等很少会变更的信息</p></li><li><p>jdk1.6以前：永久代，常量池是在方法区</p></li><li><p>jdk1.7  : 永久代，但是慢慢的退化了，去永久代，常量池在堆中</p></li><li><p>jdk1.8之后：无永久代，常量池在元空间</p></li></ul><p><img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220821155621137.png" alt="image-20220821155621137"></p><p>元空间：逻辑上存在，物理上不存在。</p><p><img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220828033931944.png" alt="image-20220828033931944"></p><p><img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220828033948326.png" alt="image-20220828033948326"></p><p><img src="/Blog/Blog/2022/09/14/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/JVM03-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/image-20220828034005411.png" alt="image-20220828034005411"></p>]]></content>
    
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM02-类加载子系统</title>
    <link href="/Blog/2022/09/13/JVM02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <url>/Blog/2022/09/13/JVM02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="1、类加载子系统"><a href="#1、类加载子系统" class="headerlink" title="1、类加载子系统"></a>1、类加载子系统</h2><h4 id="类加载子系统概述-x3D-gt"><a href="#类加载子系统概述-x3D-gt" class="headerlink" title="类加载子系统概述&#x3D;&gt;"></a>类加载子系统概述&#x3D;&gt;</h4><p><img src="/Blog/Blog/2022/09/13/JVM02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/JVM02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20220825161843810.png" alt="image-20220825161843810"></p><p>(图源：尚硅谷JVM教程)</p><p><strong>类加载子系统的作用：</strong></p><ul><li><p>类加载子系统负责从文件系统或者网络中加载Class文件（Class文件在开头有特定标识）。</p></li><li><p>类加载器(Class Loader)只负责class文件的加载，至于是否可以运行，由执行引擎(Execution Engine)决定。</p><p>加载的类信息存放于一块成为方法区的内存空间。除了类信息之外，方法区还会存放运行时常量池信息，可能还包括字符。</p></li><li><p>串字面量和数字常量 ，这部分常量信息时Class文件中常量池部分的内存映射。</p></li></ul><p><strong>类加载器扮演的角色：</strong></p><p><img src="/Blog/Blog/2022/09/13/JVM02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/JVM02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20220825163141532.png" alt="image-20220825163141532"></p><ul><li><p>Car.class 存放于本地硬盘中，在运行的时候，JVM将Car.class 文件加载到JVM中，被称为DNA元数据模板。</p><p>存放在JVM的方法区中，之后根据元数据模板实例化相应的对象。</p></li><li><p>.<code>class</code> -&gt; <code>Jvm</code> -&gt; <code>元数据模板</code> -&gt; <code>实例对象</code> 这个过程中，类加载器扮演快递员的角色。</p></li></ul><h4 id="类加载过程-x3D-gt"><a href="#类加载过程-x3D-gt" class="headerlink" title="类加载过程&#x3D;&gt;"></a>类加载过程&#x3D;&gt;</h4><ul><li><p>类加载的过程分为：加载、链接、初始化。</p><p>其中链接阶段中又可以细分为验证、准备、解析三个子阶段。</p></li></ul><p><img src="/Blog/Blog/2022/09/13/JVM02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/JVM02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20220825163933377.png" alt="image-20220825163933377"></p><h5 id="加载过程"><a href="#加载过程" class="headerlink" title="加载过程"></a><strong>加载过程</strong></h5><ol><li>通过一个类的全限定名获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据访问入口。</li></ol><h5 id="链接过程"><a href="#链接过程" class="headerlink" title="链接过程"></a><strong>链接过程</strong></h5><h6 id="1、验证："><a href="#1、验证：" class="headerlink" title="1、验证："></a><strong>1、验证：</strong></h6><p>目的：</p><p>在于确保Class文件的字节流中包含信息符合当前JVM规范要求，保证被加载类的正确性，不会危害虚拟机自身安全。</p><p><strong>主要有四种验证： 文件格式验证、源数据验证、字节码验证、符号引用验证。</strong></p><blockquote><p>文件格式验证</p></blockquote><ul><li>字节码是否以十六进制的CAFEBABE开头</li><li>主，次版本号是否在当前虚拟机可接受的范围之内。</li><li>常量池的常量中是否有不被支持的类型</li><li>Class文件中是否有被添加的其他恶意信息。</li></ul><p>文件格式验证不止以上，上面所列举的只是从HotSpot虚拟机源码中摘抄的一部分。只有通过这个阶段的验证之后，这一段字节流才会进入虚拟机内存中进行存储， 之后的过程都是基于方法区中的存储结构进行的。不会直接读取字节流了。</p><blockquote><p>源数据验证</p></blockquote><ul><li>此类的父类是否是不可继承的类（Final修饰的）</li><li>如果此类不是抽象类，它是否实现了全部需要实现的方法。</li><li>类中的字段，方法是否和父类冲突。</li><li>…</li></ul><blockquote><p>字节码验证</p></blockquote><p>此过程保证代码是符合逻辑的，对代码的流程进行判断，保证不会出现危害虚拟机安全的情况。</p><ul><li>保证任意时刻操作数栈中的类型和指令代码序列可以正常工作，比如执行到iadd字节码指令，但是操作数栈顶有一位是Long类型的。</li><li>保证代码中的类型转换是有效的。</li></ul><blockquote><p>符号引用验证</p></blockquote><p>此阶段验证符号引用是否合法，主要用于解析阶段的前置任务。</p><p>主要用于判断该类中是否存在缺少后者被禁止访问它依赖的某些外部类、字段、方法等资源。</p><h6 id="2、准备："><a href="#2、准备：" class="headerlink" title="2、准备："></a>2、准备：</h6><ul><li>为类变量(static)分配内存并设置初始值。</li><li>这里不包含用final修饰的static,因为final在编译的时候就会分配了，准备阶段会显式初始化。</li><li>不会为实例变量分配初始化，类变量会分配在方法去中，而实例变量是会随着对象一起分配到java堆中。</li></ul><h6 id="3、解析："><a href="#3、解析：" class="headerlink" title="3、解析："></a>3、解析：</h6><ul><li>将常量池内的符号引用转换为直接引用的过程。</li><li>事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行</li><li>符号引用就是一组符号来描述所引用的目标。符号应用的字面量形式明确定义在《java虚拟机规范》的class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄</li><li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的<code>CONSTANT_Class_info</code>&#x2F;<code>CONSTANT_Fieldref_info</code>、<code>CONSTANT_Methodref_info</code>等。</li></ul><h5 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h5><ul><li>初始化阶段就是执行类构造器方法clInit()的过程。 clInit是ClassInit缩写。此方法并不是程序员定义的构造方法。</li><li>是javac编译器自动收集类中的所有类变量(Static)的赋值动作和静态代码块中的语句合并而来。</li><li>构造器方法中指令按语句在源文件中出现的顺序执行。</li><li>若该类具有父类，jvm会保证子类的clinit()执行前，父类的clinit()已经执行完毕。</li></ul><h4 id="类加载器的分类"><a href="#类加载器的分类" class="headerlink" title="类加载器的分类"></a>类加载器的分类</h4><p>常见的类加载器：</p><ul><li>启动类加载器（Bootstrap ClassLoader）</li><li>扩展类加载器（Extension ClassLoader）</li><li>应用程序类加载器（Application ClassLoader）</li></ul><img src="/Blog/Blog/2022/09/13/JVM02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20220825170159782.png" alt="image-20220825170159782" style="zoom:67%;"><p><strong>启动类加载器：</strong></p><ul><li>负责加载&#x3D;&#x3D;JAVA_HOME&#x2F;lib&#x3D;&#x3D;目录下的可以被虚拟机识别（通过文件名称，比如rt.jar&#96;&#96;tools.jar）的字节码文件。</li><li>与之对应的是<code>java.lang.ClassLoader</code>类</li></ul><p><strong>扩展类加载器：</strong></p><ul><li>负责加载&#x3D;&#x3D;JAVA_HOME&#x2F;lib&#x2F;ext&#x3D;&#x3D;目录下的的字节码文件。</li><li>对应<code>sun.misc.Launcher</code>类 此类继承于启动类加载器ClassLoader</li></ul><p><strong>应用程序类加载器：</strong></p><ul><li>负责加载ClassPath路径下的字节码 也就是用户自己写的类。</li><li>对应于<code>sun.misc.Launcher.AppClassLoader</code>类 此类继承于扩展类加载器Launcher</li></ul><p><strong>用户自定义加载器：</strong></p><ul><li>需要继承系统类加载器<code>ClassLoader</code>，并重写<code>findClass</code>方法。</li><li>负责加载指定位置的字节码文件。通过类中的path变量指定。</li></ul><h4 id="ClassLoader常用方法"><a href="#ClassLoader常用方法" class="headerlink" title="ClassLoader常用方法"></a>ClassLoader常用方法</h4><p>&#x3D;&gt;ClassLoader是一个抽象类，其后所有的类加载器都需要继承ClassLoader(不包括启动类加载器)</p><table><thead><tr><th>Method Name</th><th>Details</th></tr></thead><tbody><tr><td>getParent()</td><td>返回该类加载器的超类加载器</td></tr><tr><td>loadClass(String name)</td><td>加载名称为name的类，返回结果为java.lang.Class类的实例</td></tr><tr><td>findClass(Stringh name)</td><td>查找名称为name的类，返回结果为java.lang.Class类的实例</td></tr><tr><td>findLoaderClass(String name)</td><td>查找名称为name的已经被加载过的类，返回结果为java.lang.Class类的实例</td></tr><tr><td>defineClass（String name，byte[] b,int off,int len）</td><td>把字节数组b中的内容转换为一个Java类 ，返回结果为java.lang.Class类的实例</td></tr><tr><td>resolveClass（Class&lt;?&gt; c）</td><td>连接指定的一个java类</td></tr></tbody></table><p><strong>获取ClassLoader的途径：</strong></p><ul><li>获取当前类的ClassLoader : <code>clazz.getClassLoader();</code></li><li>获取当前线程上下文的ClassLoader: <code>Thread.currentThread().getContextClassLoader();</code></li><li>获取系统的ClassLoader：<code>ClassLoader.getSystemClassLoader();</code></li><li>获取调用者的ClassLoader：<code>DriverManager.getCallerClassLoader();</code></li></ul><h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><p>&#x3D;&gt;</p><p>Java虚拟机对class文件采用的是按需加载方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成的class对象。而且加载某个类的class文件时，java虚拟机采用的是双亲委派机制。</p><p>即把请求交由父类处理，它是一种任务委派模式</p><img src="/Blog/Blog/2022/09/13/JVM02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20220825173019524.png" alt="image-20220825173019524" style="zoom: 67%;"><img src="/Blog/Blog/2022/09/13/JVM02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20220825173119691.png" alt="image-20220825173119691" style="zoom:67%;"><ol><li>如果一个类加载器收到了类加载的请求，它并不会自己加载，而是先把请求委托给父类的加载器执行</li><li>如果父类加载器还有父类，则进一步向上委托，依次递归，请求到达最顶层的引导类加载器。</li><li>如果顶层类的加载器加载成功，则成功返回。如果失败，则子加载器会尝试加载。直到加载成功。</li></ol><p><strong>优点：</strong></p><ul><li><p>避免类的重复加载。</p><p>当自己程序中定义了一个和Java.lang包同名的类，此时，由于使用的是双亲委派机制，会由启动类加载器去加载JAVA_HOME&#x2F;lib中的类，而不是加载用户自定义的类。此时，程序可以正常编译，但是自己定义的类无法被加载运行。</p></li><li><p>保护程序安全，防止核心API被随意篡改。</p></li></ul><h4 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h4><p>&#x3D;&gt;</p><p>自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载， 而引导类加载器在加载过程中会先加载jdk自带的文件（rt.jar包中的java\lang\String.class）, 报错信息说没有main方法就是因为加载的是rt.jar包中的String类。 这样可以保证对java核心源代码的保护，这就是沙箱安全机制。</p><p><strong>在jvm中表示两个class对象是否为同一个类存在的两个必要条件</strong></p><ul><li><p>类的完整类名必须一致，包括包名。</p></li><li><p>加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。</p><p>换句话说，在jvm中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。</p></li></ul><blockquote><p><strong>对类加载器的引用</strong></p></blockquote><p>JVM必须知道一个类型是有启动类加载器加载的还是由用户类加载器加载的。如果一个类型由用户类加载器加载的，那么jvm会将这个类加载器的一个引用作为类型信息的会议部分保存在方法区中。当解析一个类型到另一个类型的引用的时候，JVM需要保证两个类型的加载器是相同的。</p><blockquote><p><strong>类的主动使用和被动使用</strong></p></blockquote><p>主动使用的情况：</p><ol><li>创建类的实例。</li><li>访问某各类或接口的静态变量，或者对静态变量赋值。</li><li>调用类的静态方法。</li><li>反射 比如Class.forName(com.dsh.jvm.xxx)。</li><li>初始化一个类的子类。</li><li>java虚拟机启动时被标明为启动类的类。</li><li>JDK 7 开始提供的动态语言支持：</li><li>java.lang.invoke.MethodHandle实例的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应的类没有初始化，则初始化。</li></ol><p>除了以上的情况属于主动使用，其他的情况均属于被动使用。<strong>被动使用不会引起类的初始化。</strong><br>也就是说：&#x3D;&#x3D;并不是在代码中出现的类，就一定会被加载或者初始化。如果不符合主动使用的条件，类就不会初始化。&#x3D;&#x3D;</p>]]></content>
    
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM01-JVM简介</title>
    <link href="/Blog/2022/09/13/JVM01-JVM%E7%AE%80%E4%BB%8B/"/>
    <url>/Blog/2022/09/13/JVM01-JVM%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM初探究"><a href="#JVM初探究" class="headerlink" title="JVM初探究"></a>JVM初探究</h1><p>常见问题？&#x3D; &gt;</p><ul><li>谈谈你对JVM的理解？java8虚拟机和之前的变化更加</li><li>什么时OOM，什么是栈溢出StackOverFlowError？&#x3D;&gt;如何分析？</li><li>JVM的常用调优参数有哪些？</li><li>内存快照如何抓取，怎么分析Dump文件？</li><li>谈谈JVM中，类加载器你的认识？</li></ul><p><img src="/Blog/Blog/2022/09/13/JVM01-JVM%E7%AE%80%E4%BB%8B/JVM01-JVM%E7%AE%80%E4%BB%8B/image-20220816171314507.png" alt="image-20220816171314507"></p><h2 id="JVM简介"><a href="#JVM简介" class="headerlink" title="JVM简介"></a>JVM简介</h2><blockquote><p>JVM？</p></blockquote><p>&#x3D;&gt;  JVM 是Java Virtaul Machine （Java虚拟机）的缩写，是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际计算机上仿真模拟各种计算机功能来实现的。<br>引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用JVM屏蔽了与具体平台相关的信息，使得Java语言编译程序<strong>只需要生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</strong></p><h4 id="JVM的位置"><a href="#JVM的位置" class="headerlink" title="JVM的位置"></a>JVM的位置</h4><p>&#x3D;&gt;</p><p><img src="/Blog/Blog/2022/09/13/JVM01-JVM%E7%AE%80%E4%BB%8B/JVM01-JVM%E7%AE%80%E4%BB%8B/image-20220825154607217.png" alt="image-20220825154607217"></p><ul><li>JVM是运行在操作系统之上的，它与硬件没有直接的交互</li><li>JVM是运行在操作系统之上的，他虽然与硬件没有直接交互，但是可以调用底层的硬件，比如用JNI（Java本地接口）来调用底层硬件接口。</li></ul><blockquote><p>JNI   ?  &#x3D;&gt;</p><ul><li>JNI是Java Native Interface的缩写，JAVA本地调用。从jdk1.1开始，Java Native Interface(JNI)标准成为java平台的一部分，它允许Java代码和其他语言写的代码进行交互。看过JDK源代码的人肯定会注意到在源码里有很多标记成native的方法。这些个方法只有方法签名但是没有方法体。其实这些naive方法就是我们说的 java native interface。他提供了一个调用（invoke）的接口，然后用C或者C++去实现；</li><li>JNI是JAVA标准平台中的一个重要功能，它弥补了JAVA的与平台无关这一重大优点的不足，在JAVA实现跨平台的同时，也能与其它语言（如C、C++）的动态库进行交互，给其它语言发挥优势的机会。</li></ul></blockquote><h4 id="JVM的体系结构"><a href="#JVM的体系结构" class="headerlink" title="JVM的体系结构"></a>JVM的体系结构</h4><p>JVM的基本组成：</p><ul><li>指令集：JVM指令集</li><li>类加载器：在JVM启动时或者类在运行时将需要的class加载到JVM中</li><li>执行引擎：负责执行class文件中的字节码指令，相当于CPU</li><li>运行时数据区：将内存划分为若干个区，分别完成不同的任务</li><li>本地方法区：调用C或者C++实现的本地方法代码返回的结果</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lambda表达式</title>
    <link href="/Blog/2022/09/13/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/Blog/2022/09/13/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="Lambda表达式基础语法扩展"><a href="#Lambda表达式基础语法扩展" class="headerlink" title="Lambda表达式基础语法扩展"></a>Lambda表达式基础语法扩展</h2><p>语法格式一：无参数，无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">() -&gt; System.out.println(<span class="hljs-string">&quot;Hello Lambda!&quot;</span>);<br></code></pre></td></tr></table></figure><p>语法格式二：有一个参数，并且无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(x) -&gt; System.out.println(x);<br></code></pre></td></tr></table></figure><p>语法格式三：若只有一个参数，小括号可以省略不写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">x -&gt; System.out.println(x);<br></code></pre></td></tr></table></figure><p>语法格式四： 有两个以上的参数，有返回值，并且Lambda体中有多条语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;Integer&gt; com = (x,y) -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;函数式接口&quot;</span>);<br>    <span class="hljs-keyword">return</span> Integer.compare(x,y);<br>&#125;<br></code></pre></td></tr></table></figure><p>语法格式五：若Lambda体中只有一条语句，<strong>return 和 大括号都可以省略不写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;Integer&gt; com = (x,y) -&gt; Integer.compare(x,y);<br></code></pre></td></tr></table></figure><p>语法格式六：Lambda表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断出，数据类型，即“类型推断”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">(Integer x,Integer y) -&gt; Integer.compare(x,y);<br>(x,y) -&gt; Integer.compare(x,y);<br></code></pre></td></tr></table></figure><h2 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h2><h4 id="接口一："><a href="#接口一：" class="headerlink" title="接口一："></a>接口一：</h4><p>Comsumer<T> &#x2F;&#x2F;消费型接口</T></p><p>void accept(T t);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(<span class="hljs-type">double</span> money, Consumer&lt;Double&gt; con)</span>&#123;<br>    con.accept(money);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span>&#123;<br>  eat(<span class="hljs-number">10000</span>, (m) -&gt; System.out.println(<span class="hljs-string">&quot;吃饭消费了：&quot;</span> + m + <span class="hljs-string">&quot;元&quot;</span>));<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="接口二："><a href="#接口二：" class="headerlink" title="接口二："></a>接口二：</h4><p>Supplier<T> 供给型接口</T></p><p>T get();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求：产生指定个数的整数，并放入集合中</span><br><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">getNumList</span><span class="hljs-params">(<span class="hljs-type">int</span> num, Supplier&lt;Integer&gt; sup)</span>&#123;<br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sup.get();<br>        list.add(n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">supplier</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Integer&gt; numList = getNumList(<span class="hljs-number">10</span>, () -&gt; (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">100</span>));<br>    <span class="hljs-keyword">for</span> (Integer num : numList) &#123;<br>        System.out.println(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口三："><a href="#接口三：" class="headerlink" title="接口三："></a>接口三：</h4><p>Function&lt;T,R&gt;  函数型接口</p><p>R apply(T,t);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求：用于处理字符串</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">strHandler</span><span class="hljs-params">(String str, Function&lt;String, String&gt; fun)</span>&#123;<br>        <span class="hljs-keyword">return</span> fun.apply(str);<br>&#125;<br><br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">newStr</span> <span class="hljs-operator">=</span> strHandler(<span class="hljs-string">&quot;\t\t\t Function   &quot;</span>, (str) -&gt; str.trim());<br>    System.out.println(newStr);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">subStr</span> <span class="hljs-operator">=</span> strHandler(<span class="hljs-string">&quot;Function&quot;</span>, (str) -&gt; str.substring(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>));<br>    System.out.println(subStr);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口四："><a href="#接口四：" class="headerlink" title="接口四："></a>接口四：</h4><p>Predicate<T> 断言型接口</T></p><p>boolean test(T t);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Predicate</span><span class="hljs-params">()</span>&#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;predicate&quot;</span>, <span class="hljs-string">&quot;Lambda&quot;</span>, <span class="hljs-string">&quot;www&quot;</span>, <span class="hljs-string">&quot;ok&quot;</span>);<br>        List&lt;String&gt; strList = filterStr(list, (s) -&gt; s.length() &gt; <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">for</span> (String str : strList) &#123;<br>            System.out.println(str);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//需求：将满足条件的字符串，放入集合中</span><br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">filterStr</span><span class="hljs-params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span>&#123;<br>        List&lt;String&gt; strList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String str : list) &#123;<br>            <span class="hljs-keyword">if</span>(pre.test(str))&#123;<br>                strList.add(str);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> strList;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Lambda java8 函数式接口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud版本对应关系</title>
    <link href="/Blog/2022/09/13/SpringCloud%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/"/>
    <url>/Blog/2022/09/13/SpringCloud%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p><strong>SpringBoot与SpringCloud版本关联关系</strong><br>参考官网版本:<a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a></p><p>{<br>“git”: {<br>“branch”: “31d334d1733fb876aa7fc84ba5a6d424fc4b7bb8”,<br>“commit”: {<br>“id”: “31d334d”,<br>“time”: “2022-02-08T09:03:13Z”<br>}<br>},<br>“build”: {<br>“version”: “0.0.1-SNAPSHOT”,<br>“artifact”: “start-site”,<br>“versions”: {<br>“spring-boot”: “2.6.3”,<br>“initializr”: “0.12.1-SNAPSHOT”<br>},<br>“name”: “start.spring.io website”,<br>“time”: “2022-02-08T09:04:51.198Z”,<br>“group”: “io.spring.start”<br>},<br>“bom-ranges”: {<br>“azure”: {<br>“3.2.0”: “Spring Boot &gt;&#x3D;2.3.0.M1 and &lt;2.4.0-M1”,<br>“3.5.0”: “Spring Boot &gt;&#x3D;2.4.0.M1 and &lt;2.5.0-M1”,<br>“3.13.0”: “Spring Boot &gt;&#x3D;2.5.0.M1 and &lt;2.7.0-M1”<br>},<br>“codecentric-spring-boot-admin”: {<br>“2.4.3”: “Spring Boot &gt;&#x3D;2.3.0.M1 and &lt;2.5.0-M1”,<br>“2.5.5”: “Spring Boot &gt;&#x3D;2.5.0.M1 and &lt;2.6.0-M1”,<br>“2.6.2”: “Spring Boot &gt;&#x3D;2.6.0.M1 and &lt;2.7.0-M1”<br>},<br>“solace-spring-boot”: {<br>“1.1.0”: “Spring Boot &gt;&#x3D;2.3.0.M1 and &lt;2.6.0-M1”<br>},<br>“solace-spring-cloud”: {<br>“1.1.1”: “Spring Boot &gt;&#x3D;2.3.0.M1 and &lt;2.4.0-M1”,<br>“2.1.0”: “Spring Boot &gt;&#x3D;2.4.0.M1 and &lt;2.6.0-M1”<br>},<br>“spring-cloud”: {<br>“Hoxton.SR12”: “Spring Boot &gt;&#x3D;2.2.0.RELEASE and &lt;2.4.0.M1”,<br>“2020.0.5”: “Spring Boot &gt;&#x3D;2.4.0.M1 and &lt;2.6.0-M1”,<br>“2021.0.0-M1”: “Spring Boot &gt;&#x3D;2.6.0-M1 and &lt;2.6.0-M3”,<br>“2021.0.0-M3”: “Spring Boot &gt;&#x3D;2.6.0-M3 and &lt;2.6.0-RC1”,<br>“2021.0.0-RC1”: “Spring Boot &gt;&#x3D;2.6.0-RC1 and &lt;2.6.1”,<br>“2021.0.0”: “Spring Boot &gt;&#x3D;2.6.1 and &lt;2.6.4-SNAPSHOT”,<br>“2021.0.1-SNAPSHOT”: “Spring Boot &gt;&#x3D;2.6.4-SNAPSHOT and ❤️.0.0-M1”,<br>“2022.0.0-M1”: “Spring Boot &gt;&#x3D;3.0.0-M1 and ❤️.1.0-M1”<br>},<br>“spring-cloud-gcp”: {<br>“2.0.8”: “Spring Boot &gt;&#x3D;2.4.0-M1 and &lt;2.6.0-M1”,<br>“3.1.0”: “Spring Boot &gt;&#x3D;2.6.0-M1 and &lt;2.7.0-M1”<br>},<br>“spring-cloud-services”: {<br>“2.3.0.RELEASE”: “Spring Boot &gt;&#x3D;2.3.0.RELEASE and &lt;2.4.0-M1”,<br>“2.4.1”: “Spring Boot &gt;&#x3D;2.4.0-M1 and &lt;2.5.0-M1”,<br>“3.3.0”: “Spring Boot &gt;&#x3D;2.5.0-M1 and &lt;2.6.0-M1”<br>},<br>“spring-geode”: {<br>“1.3.12.RELEASE”: “Spring Boot &gt;&#x3D;2.3.0.M1 and &lt;2.4.0-M1”,<br>“1.4.13”: “Spring Boot &gt;&#x3D;2.4.0-M1 and &lt;2.5.0-M1”,<br>“1.5.9”: “Spring Boot &gt;&#x3D;2.5.0-M1 and &lt;2.6.0-M1”,<br>“1.6.3”: “Spring Boot &gt;&#x3D;2.6.0-M1 and &lt;2.7.0-M1”,<br>“1.7.0-M1”: “Spring Boot &gt;&#x3D;2.7.0-M1 and &lt;2.8.0-M1”<br>},<br>“vaadin”: {<br>“14.8.4”: “Spring Boot &gt;&#x3D;2.1.0.RELEASE and &lt;2.8.0-M1”<br>},<br>“wavefront”: {<br>“2.0.2”: “Spring Boot &gt;&#x3D;2.1.0.RELEASE and &lt;2.4.0-M1”,<br>“2.1.1”: “Spring Boot &gt;&#x3D;2.4.0-M1 and &lt;2.5.0-M1”,<br>“2.2.2”: “Spring Boot &gt;&#x3D;2.5.0-M1 and &lt;2.7.0-M1”<br>}<br>},<br>“dependency-ranges”: {<br>“native”: {<br>“0.9.0”: “Spring Boot &gt;&#x3D;2.4.3 and &lt;2.4.4”,<br>“0.9.1”: “Spring Boot &gt;&#x3D;2.4.4 and &lt;2.4.5”,<br>“0.9.2”: “Spring Boot &gt;&#x3D;2.4.5 and &lt;2.5.0-M1”,<br>“0.10.0”: “Spring Boot &gt;&#x3D;2.5.0-M1 and &lt;2.5.2”,<br>“0.10.1”: “Spring Boot &gt;&#x3D;2.5.2 and &lt;2.5.3”,<br>“0.10.2”: “Spring Boot &gt;&#x3D;2.5.3 and &lt;2.5.4”,<br>“0.10.3”: “Spring Boot &gt;&#x3D;2.5.4 and &lt;2.5.5”,<br>“0.10.4”: “Spring Boot &gt;&#x3D;2.5.5 and &lt;2.5.6”,<br>“0.10.5”: “Spring Boot &gt;&#x3D;2.5.6 and &lt;2.5.9”,<br>“0.10.6”: “Spring Boot &gt;&#x3D;2.5.9 and &lt;2.6.0-M1”,<br>“0.11.0-M1”: “Spring Boot &gt;&#x3D;2.6.0-M1 and &lt;2.6.0-RC1”,<br>“0.11.0-M2”: “Spring Boot &gt;&#x3D;2.6.0-RC1 and &lt;2.6.0”,<br>“0.11.0-RC1”: “Spring Boot &gt;&#x3D;2.6.0 and &lt;2.6.1”,<br>“0.11.0”: “Spring Boot &gt;&#x3D;2.6.1 and &lt;2.6.2”,<br>“0.11.1”: “Spring Boot &gt;&#x3D;2.6.2 and &lt;2.6.2”,<br>“0.11.2”: “Spring Boot &gt;&#x3D;2.6.3 and &lt;2.6.4-SNAPSHOT”,<br>“0.11.3-SNAPSHOT”: “Spring Boot &gt;&#x3D;2.6.4-SNAPSHOT and &lt;2.7.0-M1”<br>},<br>“okta”: {<br>“1.4.0”: “Spring Boot &gt;&#x3D;2.2.0.RELEASE and &lt;2.4.0-M1”,<br>“1.5.1”: “Spring Boot &gt;&#x3D;2.4.0-M1 and &lt;2.4.1”,<br>“2.0.1”: “Spring Boot &gt;&#x3D;2.4.1 and &lt;2.5.0-M1”,<br>“2.1.4”: “Spring Boot &gt;&#x3D;2.5.0-M1 and &lt;2.7.0-M1”<br>},<br>“mybatis”: {<br>“2.1.4”: “Spring Boot &gt;&#x3D;2.1.0.RELEASE and &lt;2.5.0-M1”,<br>“2.2.2”: “Spring Boot &gt;&#x3D;2.5.0-M1”<br>},<br>“camel”: {<br>“3.5.0”: “Spring Boot &gt;&#x3D;2.3.0.M1 and &lt;2.4.0-M1”,<br>“3.10.0”: “Spring Boot &gt;&#x3D;2.4.0.M1 and &lt;2.5.0-M1”,<br>“3.13.0”: “Spring Boot &gt;&#x3D;2.5.0.M1 and &lt;2.6.0-M1”,<br>“3.15.0”: “Spring Boot &gt;&#x3D;2.6.0.M1 and &lt;2.7.0-M1”<br>},<br>“picocli”: {<br>“4.6.2”: “Spring Boot &gt;&#x3D;2.4.0.RELEASE and &lt;2.6.0-M1”<br>},<br>“open-service-broker”: {<br>“3.2.0”: “Spring Boot &gt;&#x3D;2.3.0.M1 and &lt;2.4.0-M1”,<br>“3.3.1”: “Spring Boot &gt;&#x3D;2.4.0-M1 and &lt;2.5.0-M1”,<br>“3.4.0-M2”: “Spring Boot &gt;&#x3D;2.5.0-M1 and &lt;2.6.0-M1”<br>}<br>}<br>}</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring学习参考记录</title>
    <link href="/Blog/2022/09/13/Spring%E5%AD%A6%E4%B9%A0%E5%8F%82%E8%80%83%E8%AE%B0%E5%BD%95/"/>
    <url>/Blog/2022/09/13/Spring%E5%AD%A6%E4%B9%A0%E5%8F%82%E8%80%83%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring原理分析图"><a href="#Spring原理分析图" class="headerlink" title="Spring原理分析图"></a>Spring原理分析图</h2><p><img src="/Blog/Blog/2022/09/13/Spring%E5%AD%A6%E4%B9%A0%E5%8F%82%E8%80%83%E8%AE%B0%E5%BD%95/Spring%E5%AD%A6%E4%B9%A0%E5%8F%82%E8%80%83%E8%AE%B0%E5%BD%95/spring%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.png" alt="spring底层原理分析"></p><h2 id="学习demo及注释笔记参考至个人github"><a href="#学习demo及注释笔记参考至个人github" class="headerlink" title="学习demo及注释笔记参考至个人github"></a>学习demo及注释笔记参考至个人github</h2><p><a href="https://github.com/he498/Spring5_study">https://github.com/he498/Spring5_study</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis10-缓存穿透和雪崩</title>
    <link href="/Blog/2022/09/13/Redis10-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/"/>
    <url>/Blog/2022/09/13/Redis10-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis缓存穿透和雪崩"><a href="#Redis缓存穿透和雪崩" class="headerlink" title="Redis缓存穿透和雪崩"></a>Redis缓存穿透和雪崩</h2><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p><p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前。业界也都有比较流行的解决方案</p><h4 id="缓存穿透（查不到数据）"><a href="#缓存穿透（查不到数据）" class="headerlink" title="缓存穿透（查不到数据）"></a>缓存穿透（查不到数据）</h4><p>&#x3D;&gt;用户想要查询一个数据，发现Redis内存数据库里没有，也就是缓存没有命中，于是向 <strong>持久层的数据库查询</strong>，发现也没有，于是本次查询失败，当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库，这会给持久层数据库造成很大的压力，出现缓存穿透。</p><p><strong>解决方案：布隆过滤器</strong></p><p>​布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的压力</p><p><img src="/Blog/Blog/2022/09/13/Redis10-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/Redis10-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/image-20220908210615711.png" alt="image-20220908210615711"></p><p>但是这种方法存在两个问题：</p><ul><li>如果空值能被缓存起来，这就意味着缓存需要更多的空间存储更多的键</li><li>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间的窗口不一致</li></ul><h4 id="缓存击穿（访问量过大）："><a href="#缓存击穿（访问量过大）：" class="headerlink" title="缓存击穿（访问量过大）："></a><strong>缓存击穿（访问量过大）：</strong></h4><p>&#x3D;&gt;是指某一个key 非常热点，在不停的扛着大的并发，大并发集中对这个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库。</p><p>​当某个key过期的瞬间，就会有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导致数据库瞬间压力过大。</p><p>解决方案：</p><ol><li>设置热点数据永不过期</li><li>加互斥锁</li></ol><p><img src="/Blog/Blog/2022/09/13/Redis10-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/Redis10-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/image-20220908210842065.png" alt="image-20220908210842065"></p><p>使用分布式锁，保证每一个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，只需等待（对分布锁要求高）</p><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a><strong>缓存雪崩</strong></h4><p>&#x3D;&gt;指在某一个时间段，缓存集中过期失效，Redis宕机<br>    比如 ：双十一零点，抢购，这波商品应该放在缓存区，假设缓存一小时，到了凌晨一点，商品缓存过期，而对于这批商品的访问，都跑到数据库中，对于数据库，产生压力峰。所有请求都会到达存储层，存储层的调用量增加，存储层狗带（缓存服务节点的宕机，对数据库服务器造成的压力不可预知）</p><img src="/Blog/Blog/2022/09/13/Redis10-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/image-20220908210956872.png" alt="image-20220908210956872" style="zoom:67%;"><p>解决方案：</p><ol><li>redis高可用（多增加redis）</li><li>限流降级（通过加锁来控制数据库写缓存的线程数量）</li><li>数据预热（在正式部署之前，把可能的数据先访问一遍）</li><li>设置随机失效keys</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis09-哨兵模式详解</title>
    <link href="/Blog/2022/09/13/Redis09-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/Blog/2022/09/13/Redis09-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>&#x3D;&gt;主从切换的方法是：当服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费时费力，还会造成一段时间内服务不可用。Redis 2.8开始正式提高了Sentinel（哨兵）架构来解决这个问题。</p><p>​哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p><p><img src="/Blog/Blog/2022/09/13/Redis09-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/Redis09-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/image-20220908180342034.png" alt="image-20220908180342034"></p><p>这里哨兵模式有两个作用：</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器</li><li>当哨兵监测到Redis主机宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他服务器，修改配置文件，让他们换主机</li></ul><p><strong>多哨兵模式</strong></p><p>​&#x3D;&gt;当一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此可以使用哨兵进行监控， 各个哨兵之间还会进行监控，这就形成了多哨兵模式。<br><img src="/Blog/Blog/2022/09/13/Redis09-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/image-20220908195011693.png" alt="image-20220908195011693" style="zoom:67%;"></p><p>假设主服务器宕机，哨兵1先检测到结果，但是系统并不会马上进行failover过程，仅仅是哨兵1主观认为主服务器不可以用，这个现象称为主观下线，当后面的哨兵也检测到主服务器不可用，并且数量达到一定时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover故障转移操作。操作转移成功后。就会发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这一过程称为<strong>客观下线</strong>。</p><blockquote><p>配置过程</p></blockquote><p>1、配置哨兵配置文件 sentinel.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># sentinel monitor 被监控的名称 host port 1</span><br>sentinel monitor myredis 127.0.0.1 6379 1<br></code></pre></td></tr></table></figure><p>后面的这个数字1，代表主机挂了，slave投票看让谁接替成为主机，票数最多的，就会成为主机！</p><p>2、启动哨兵</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-sentinel mingconfig/sentinel.conf<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/13/Redis09-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/Redis09-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/image-20220908201825337.png" alt="image-20220908201825337"></p><p>此时Master节点断了，这个时候就会从从机中随机选择一个当主节点！</p><p>哨兵模式，如果主机此时回来了，只能并到新的主机下，当作从机，这就是哨兵模式的规则！</p><p><strong>优点</strong></p><ul><li>哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</li><li>主从可以切换，故障可以转移，系统的可用性就会更好</li><li>哨兵模式就是主从模式的升级，手动到自动，更加健壮</li></ul><p><strong>缺点</strong></p><ul><li>Redis不好在线扩容的，集群容量一旦达到上限，在线扩容就十分麻烦</li><li>配置麻烦</li></ul><blockquote><p>哨兵模式的配置：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Example sentinel.conf</span><br><br><span class="hljs-comment"># 哨兵sentinel实例运行的端口 默认26379</span><br>port 26379<br><br><span class="hljs-comment"># 哨兵sentinel的工作目录</span><br><span class="hljs-built_in">dir</span> /tmp<br><br><span class="hljs-comment"># 哨兵sentinel监控的redis主节点的ip port</span><br><span class="hljs-comment"># master-name 可以自己命名的主节点名字 只能由A-z、数字0-9、这三个字符&quot;.-_&quot;组成。</span><br><span class="hljs-comment"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了</span><br><span class="hljs-comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br>sentinel monitor mymaster 127.0.0.1 6379 2<br><br><span class="hljs-comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><br><span class="hljs-comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证码</span><br><span class="hljs-comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br>sentinel auth-pass mymaster MySUPER--secret-0123passwOrd<br><br><span class="hljs-comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时哨兵主观上 认为主节点下线 默认30秒</span><br><span class="hljs-comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br>sentinel down-after-milliseconds mymaster 30000<br><br><span class="hljs-comment"># 这个配置项指定了在发送failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越多的slave因为rep7ication而不可用。可以通过将这个值设为1来保证每次只有一个slave 处于不能处理命令请求的状态。</span><br><span class="hljs-comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span><br>sentinel parallel-syncs mymaster 1<br><span class="hljs-comment">#故障转移的超时时间failover-timeout可以用在以下这些方面:</span><br><span class="hljs-comment">#1．同一个sentine1对同一个master两次failover之间的间隔时间。</span><br><span class="hljs-comment">#2．当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><br><span class="hljs-comment">#3.当想要取消一个正在进行的failover所需要的时间。</span><br><span class="hljs-comment">#4.当进行failoveri时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><br><span class="hljs-comment">#默认三分钟</span><br><span class="hljs-comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br>sentinel failover-timeout mymaster 180000<br><br><br><span class="hljs-comment">#SCRIPTS EXECUTION</span><br><span class="hljs-comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。#对于脚本的运行结果有以下规则:</span><br><span class="hljs-comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><br><span class="hljs-comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><br><span class="hljs-comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><br><span class="hljs-comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><br><span class="hljs-comment">#通知型脚本:当sentine1有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等)，将会去调用这个脚本，这时这个脚本应该通过邮件，SsMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentine1.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentine1无法正常启动成功。</span><br><span class="hljs-comment">#通知脚本</span><br><span class="hljs-comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br>sentinel notification-script mymaster /var/redis/notify.sh<br><br><span class="hljs-comment">#客户端重新配置主节点参数脚本</span><br><span class="hljs-comment">#当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。#以下参数将会在调用脚本时传给脚本:</span><br><span class="hljs-comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span><br><span class="hljs-comment">#目前&lt;state&gt;总是“failover”，</span><br><span class="hljs-comment">#&lt;role&gt;是“1eader”或者&quot;observer”中的一个。</span><br><span class="hljs-comment">#参数 from-ip，from-port，to-ip，to-port是用来和旧的master和新的master(即旧的s1ave)通信的#这个脚本应该是通用的，能被多次调用，不是针对性的。</span><br><span class="hljs-comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br>sentinel client-reconfig-script mymaster /var/redis/reconfig.sh<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis08-集群配置及主从复制原理</title>
    <link href="/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/"/>
    <url>/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h2><p>&#x3D;&gt;主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（master&#x2F;leader），后者称为从节点（slave&#x2F;follower）；数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。</p><p>默认情况下，每台Redis服务器都是主节点，且一个主节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。</p><p>主从复制的作用主要包括：</p><ol><li>数据冗余：主从数据实现了数据的热备份，是持久化的一种数据冗余方式。</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础</li></ol><p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的，原因如下：</p><ol><li>从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大。</li><li>从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G.</li></ol><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908165106157.png" alt="image-20220908165106157"></p><p>主从复制，读写分离，可以减缓服务器的压力</p><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>只配从库，不用配置主库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; info replication   <span class="hljs-comment"># 查看当前库信息</span><br><span class="hljs-comment"># Replication</span><br>role:master     <span class="hljs-comment"># 角色  master</span><br>connected_slaves:0  <span class="hljs-comment"># 从机数量</span><br>master_failover_state:no-failover<br>master_replid:d0a7c3cdb30f3ecd8cfe160f9e3c1adb50d3959c<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:0<br>second_repl_offset:-1<br>repl_backlog_active:0<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:0<br>repl_backlog_histlen:0<br></code></pre></td></tr></table></figure><p><strong>配置文件配置过程</strong></p><p>1、复制出三份配置文件</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908170319837.png" alt="image-20220908170319837"></p><p>2、更改主机log文件名称</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908170441727.png" alt="image-20220908170441727"></p><p>3、更改主机rdb文件名称</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908170629176.png" alt="image-20220908170629176"></p><p>4、更改从机端口号</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908170810152.png" alt="image-20220908170810152"></p><p>5、更改从机pidfile</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908170915545.png" alt="image-20220908170915545"></p><p>6、从机logfile文件名称也更改</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908171019974.png" alt="image-20220908171019974"></p><p>7、从机更改rdb文件名称</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908171110754.png" alt="image-20220908171110754"></p><p>8、6381从机与6380从机同理</p><blockquote><p>启动</p></blockquote><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908171741971.png" alt="image-20220908171741971"></p><p>启动三个redis服务端</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908171837562.png" alt="image-20220908171837562"></p><h4 id="一主二从配置"><a href="#一主二从配置" class="headerlink" title="一主二从配置"></a>一主二从配置</h4><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908172256290.png" alt="image-20220908172256290"></p><p>连接客户端，三台默认都是主机</p><p>一主（79）二从（80、81）</p><p><strong>配置从机命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SLAVEOF 127.0.0.1 6379<br></code></pre></td></tr></table></figure><p>在从机端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379<br>OK<br>127.0.0.1:6380&gt; INFO replication<br><span class="hljs-comment"># Replication</span><br>role:slave                <span class="hljs-comment">#角色  从机</span><br>master_host:127.0.0.1       <span class="hljs-comment"># 可以看到主机的信息</span><br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:5<br>master_sync_in_progress:0<br>slave_read_repl_offset:14<br>slave_repl_offset:14<br>slave_priority:100<br>slave_read_only:1<br>replica_announced:1<br>connected_slaves:0<br>master_failover_state:no-failover<br>master_replid:3d20cbe4cc4d7842d138bbf400dfc5e693910345<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:14<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:14<br></code></pre></td></tr></table></figure><p>在主机端查看信息：</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908172624627.png" alt="image-20220908172624627"></p><p>当两个都配置完了，这里我们可以从主机端看到两台从机端的信息了：</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908172940475.png" alt="image-20220908172940475"></p><p><strong>这种方式是使用命令的方式进行主从配置的，这种是暂时的，如果需要永久配置那么就需要在配置文件中配置！</strong></p><p>配置文件的方式：</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908173354516.png" alt="image-20220908173354516"></p><p><strong>读写操作</strong></p><p>主机可以写，从机不能写只能读：</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908173545572.png" alt="image-20220908173545572"></p><p>这里主机端进行写入k1，从机端也会同步</p><p>从机进行写操作就会报错！</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908173657459.png" alt="image-20220908173657459"></p><p><strong>测试主机断开：</strong></p><p>这时主机断开连接，从机依旧连接到主机的（在没有配置哨兵的情况下），但是没有写操作了。如果主机回来了，从机依旧可以读到主机新写入的数据。</p><p><strong>测试从机断开：</strong></p><p>如果是命令的形式配置的从机，这个时候重启，就会变回主机了。只要再重新变回从机，这时就可以重新获取主机的数据了。</p><blockquote><p>复制原理</p></blockquote><p>Slave 启动成功连接到master 后会发送一个sync命令</p><p>Master 接到命令，启动后台的存盘进程，同时收集所有接受到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p><ul><li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master 继续将新的所有收集到的修改命令依次传给slave，完成同步</li></ul><p>但是只要是重新连接master，一次完全同步（全量复制）将会被自动执行</p><blockquote><p>第二种主从配置方式</p></blockquote><p>&#x3D;&gt;上一个主节点连接下一个从节点</p><p><img src="/Blog/Blog/2022/09/13/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/Redis08-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/image-20220908175303043.png" alt="image-20220908175303043"></p><p>此时的80依旧是从节点。</p><p>这个时候如果最前面的主节点（老大）宕机了，可以手动将设置主节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SLAVEOF no one<br></code></pre></td></tr></table></figure><p>这个时候其他节点就可以手动连接到这个最新的主节点</p><p>如果这个时候宕机的主节点修复重启了，这时候，之前链接他的从机已经不再是他的从节点了，除非重新设置。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis07-发布订阅</title>
    <link href="/Blog/2022/09/13/Redis07-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    <url>/Blog/2022/09/13/Redis07-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h2><p>&#x3D;&gt;Redis发布订阅（pub&#x2F;sub）是一种消息通信模式：发送者（pub）发生消息，订阅者（sub）接受消息。微博、微信、关注系统。</p><p>Redis 客户端可以订阅任意数量的频道。</p><p>订阅&#x2F;发布消息图：</p><p>第一个:消息发送者，第二个：频道，第三个：消息订阅者</p><p><img src="/Blog/Blog/2022/09/13/Redis07-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/Redis07-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/image-20220908161737582.png" alt="image-20220908161737582"></p><p>channel1,以及订阅这个频道的三个客户端——client2、client5和client1之间的关系：</p><img src="/Blog/Blog/2022/09/13/Redis07-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/image-20220908161953281.png" alt="image-20220908161953281" style="zoom:67%;"><p>当有新信息通过PUBLISH命令发送给频道channel1时这个消息就会被发送到订阅它的三个客户端</p><img src="/Blog/Blog/2022/09/13/Redis07-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/image-20220908162127187.png" alt="image-20220908162127187" style="zoom:67%;"><blockquote><p>常用的命令</p></blockquote><img src="/Blog/Blog/2022/09/13/Redis07-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/image-20220908162234440.png" alt="image-20220908162234440" style="zoom: 67%;"><blockquote><p>测试</p></blockquote><p><img src="/Blog/Blog/2022/09/13/Redis07-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/Redis07-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/image-20220908162554483.png" alt="image-20220908162554483"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 订阅端</span><br>127.0.0.1:6379&gt; SUBSCRIBE MING     <span class="hljs-comment"># 订阅一个频道</span><br>Reading messages... (press Ctrl-C to quit)<br>1) <span class="hljs-string">&quot;subscribe&quot;</span><br>2) <span class="hljs-string">&quot;MING&quot;</span><br>3) (<span class="hljs-built_in">integer</span>) 1<br><span class="hljs-comment"># 等待读取推送的信息</span><br>1) <span class="hljs-string">&quot;message&quot;</span>   <span class="hljs-comment"># 消息</span><br>2) <span class="hljs-string">&quot;MING&quot;</span><span class="hljs-comment"># 频道名称</span><br>3) <span class="hljs-string">&quot;hello&quot;</span>  <span class="hljs-comment">#消息的具体内容</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 发送端</span><br>127.0.0.1:6379&gt; PUBLISH MING hello    <span class="hljs-comment">#发布者发布消息到频道</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure><p><strong>使用场景</strong></p><ul><li>实时消息系统</li><li>实时聊天（频道当作聊天室，将消息回显给所有人）</li><li>订阅，关注系统</li></ul><p>稍微复杂的场景就会使用 消息中间件 MQ、卡夫卡….</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis06-持久化</title>
    <link href="/Blog/2022/09/13/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <url>/Blog/2022/09/13/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><p>&#x3D;&gt;Redis是内存数据库，如果不将内存中的数据状态保存到硬盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能</p><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><p>什么是RDB？&#x3D;&gt;</p><p>​在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。</p><p><img src="/Blog/Blog/2022/09/13/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/image-20220908154600469.png" alt="image-20220908154600469"></p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程结束了，再用这个临时文件替换上持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p><p>一般默认的就是RBD，一般情况下是不需要去修改这个配置的</p><p><strong>rdb保存的文件是 dump.rdb</strong></p><p><img src="/Blog/Blog/2022/09/13/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/image-20220908151646927.png" alt="image-20220908151646927"></p><p><strong>触发机制</strong></p><ol><li>save的规则满足的情况下，会自动触发rdb规则</li><li>执行flushall命令 也会触发我们的rdb规则</li><li>退出redis 也会产生rdb文件</li></ol><p>备份就会自动生成一个dump.rdb</p><p><img src="/Blog/Blog/2022/09/13/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/image-20220908153555771-16630824008338.png" alt="image-20220908153555771"></p><p><strong>如果需要恢复</strong></p><p>只需要将rdb文件放在redis启动目录就可以了，redis启动的时候会自动检查dump.rdb恢复其中的数据</p><p><strong>优点</strong></p><ul><li>适合大规模的数据恢复</li><li>对数据的完整性要求不高</li></ul><p><strong>缺点</strong></p><ul><li>需要一定的时间间隔进程操作！如果redis意外宕机了，这个最后一次修改的数据就没有了</li><li>fork进程的时候，会占用一定的内存空间</li></ul><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><p>&#x3D;&gt; 将我们的所有命令都记录下来，hitstory，恢复的时候就把这个文件全部在执行一遍</p><p><img src="/Blog/Blog/2022/09/13/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/image-20220908155832796.png" alt="image-20220908155832796"></p><p>以日志的形式来记录每个写操作。将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><p>AOF保存的是 appendonly.aof 文件</p><p><img src="/Blog/Blog/2022/09/13/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/image-20220908160249266.png" alt="image-20220908160249266"></p><p>默认是不开启aof的，需要手动开启，将no 改为 yes即可开启aof</p><p><strong>注意：如果这个aof文件有错位，这时候redis是启动不起来的，我们需要修复这个aof文件</strong></p><p>redis给我们提供了一个工具 <code>redis-check-aof --fix</code></p><p><img src="/Blog/Blog/2022/09/13/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/image-20220908160511480.png" alt="image-20220908160511480"></p><p>在启动目录下输入即可修复aof文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-check-aof --fix appendonly.aof <br></code></pre></td></tr></table></figure><p><strong>重写规则</strong></p><p>aof默认就是文件的无限追加，文件会越来越大</p><p><img src="/Blog/Blog/2022/09/13/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/Redis06-%E6%8C%81%E4%B9%85%E5%8C%96/image-20220908161217638.png" alt="image-20220908161217638"></p><p>如果aof文件大于配置规定的，就会fork一个新的进程来将我们的文件进行重写</p><p><strong>优点</strong></p><ul><li>每一次修改都同步，文件的完整会更好</li><li>每秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高</li></ul><p><strong>缺点</strong></p><ul><li>相对于数据文件来说，aof远远大于rdb，修复速度也比rdb慢</li><li>Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis05-配置详解</title>
    <link href="/Blog/2022/09/13/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <url>/Blog/2022/09/13/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h1><p><img src="/Blog/Blog/2022/09/13/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/image-20220601152156778.png" alt="image-20220601152156778"></p><p>1、配置文件对大小写不敏感</p><blockquote><p>包含多个文件</p></blockquote><p><img src="/Blog/Blog/2022/09/13/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/image-20220601152242910-16630819767187.png" alt="image-20220601152242910"></p><blockquote><p>网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> 127.0.0.1 <span class="hljs-comment">#绑定的ip</span><br>protected-mode <span class="hljs-built_in">yes</span> <span class="hljs-comment">#保护模式</span><br>port 6379 <span class="hljs-comment">#端口设置</span><br><br></code></pre></td></tr></table></figure><blockquote><p>通用设置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">daemonize <span class="hljs-built_in">yes</span> <span class="hljs-comment"># 以守护进程的方式运行，默认是no，需要开启为yes！</span><br>pidfile /var/run/redis_6379.pid  <span class="hljs-comment">#如果以后台的方式运行，就需要指定一个pid文件</span><br><br><br><span class="hljs-comment"># 日志</span><br><span class="hljs-comment"># Specify the server verbosity level.</span><br><span class="hljs-comment"># This can be one of:</span><br><span class="hljs-comment"># debug (a lot of information, useful for development/testing)</span><br><span class="hljs-comment"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="hljs-comment"># notice (moderately verbose, what you want in production probably)</span><br><span class="hljs-comment"># warning (only very important / critical messages are logged)</span><br>loglevel notice<br><br>logfile <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">#日志的文件位置名</span><br><br>databases 16 <span class="hljs-comment">#数据库数量，默认是16</span><br><br>always-show-logo no <span class="hljs-comment">#是否显示logo</span><br><br><br></code></pre></td></tr></table></figure><blockquote><p>快照</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">################################ SNAPSHOTTING  ################################</span><br><br><span class="hljs-comment"># Save the DB to disk.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Redis will save the DB if both the given number of seconds and the given</span><br><span class="hljs-comment"># number of write operations against the DB occurred.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Snapshotting can be completely disabled with a single empty string argument</span><br><span class="hljs-comment"># as in following example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># save &quot;&quot;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless specified otherwise, by default Redis will save the DB:</span><br><span class="hljs-comment">#   * After 3600 seconds (an hour) if at least 1 key changed</span><br><span class="hljs-comment">#   * After 300 seconds (5 minutes) if at least 100 keys changed</span><br><span class="hljs-comment">#   * After 60 seconds if at least 10000 keys changed</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># You can set these explicitly by uncommenting the three following lines.</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># 持久化规则</span><br><span class="hljs-comment"># save 3600 1   # 如果3600内，至少有一个1key进行了修改,则会进行持久化操作</span><br><span class="hljs-comment"># save 300 100</span><br><span class="hljs-comment"># save 60 10000</span><br><br><br>stop-writes-on-bgsave-error <span class="hljs-built_in">yes</span>  <span class="hljs-comment">#持久化如果出错，是否还需要继续工作</span><br>rdbcompression <span class="hljs-built_in">yes</span> <span class="hljs-comment">#是否压缩rdb 文件，需要消耗一些cpu资源</span><br>rdbchecksum <span class="hljs-built_in">yes</span>  <span class="hljs-comment">#检查校验rdb文件</span><br><span class="hljs-built_in">dir</span> ./  <span class="hljs-comment">#rdb保存目录 </span><br><br><br><br><br> <br><br></code></pre></td></tr></table></figure><p>持久化，在规定时间内，执行了多少次操作，则会持久化到文件.rdb&#x2F;.aof?</p><blockquote><p>主从复制</p></blockquote><p><img src="/Blog/Blog/2022/09/13/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/image-20220601153345567.png" alt="image-20220601153345567"></p><blockquote><p>SECURITY</p></blockquote><p><img src="/Blog/Blog/2022/09/13/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/image-20220601153710913-16630821032079.png" alt="image-20220601153710913"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; config get requirepass<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;requirepass&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-number">27.0.0.1:6379</span>&gt; config set requirepass <span class="hljs-string">&quot;123456&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>限制CLIENTS </p></blockquote><p><img src="/Blog/Blog/2022/09/13/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/image-20220601154046427.png" alt="image-20220601154046427"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">maxclients 10000 <span class="hljs-comment"># 最大客户端数量</span><br>maxmemory &lt;bytes&gt;  <span class="hljs-comment">#redis 配置最大的内存容量 </span><br>maxmemory-policy noeviction  <span class="hljs-comment">#内存到达上限之后的处理策略</span><br></code></pre></td></tr></table></figure><blockquote><p>APPEND ONLY MODE</p></blockquote><p> <img src="/Blog/Blog/2022/09/13/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/Redis05-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/image-20220601154427250.png" alt="image-20220601154427250"></p><p>AOF配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">appendonly no <span class="hljs-comment"># 默认是不开启aof模式 ,默认使用的是rdb持久化的</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span> <span class="hljs-comment">#持久化文件的名字</span><br><span class="hljs-comment"># appendfsync always  每次修改都会sync。消耗性能</span><br>appendfsync everysec  <span class="hljs-comment"># 每秒执行一次同步 sync,可能会丢失这1s 的数据</span><br><span class="hljs-comment"># appendfsync no  不执行sync,这个时候操作系统自己同步，速度最快</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis04-事务</title>
    <link href="/Blog/2022/09/13/Redis04-%E4%BA%8B%E5%8A%A1/"/>
    <url>/Blog/2022/09/13/Redis04-%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p><strong>Redis 事务本质：</strong>一组命令的集合！一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行！</p><p>一次性、顺序性、排他性。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-----队列 <span class="hljs-built_in">set</span> <span class="hljs-built_in">set</span> <span class="hljs-built_in">set</span> 执行 -----<br></code></pre></td></tr></table></figure><p><strong>Redis事务没有隔离级别的概念</strong></p><p>所有的命令再事务中，并没有直接被执行，只有发起执行命令才会执行</p><p><strong>Redis单条命令是保存原子性的，但是事务不保证原子性</strong></p><p><strong>redis事务：</strong></p><ul><li>开启事务（multi）</li><li>命令入队（）</li><li>执行任务（exec）</li></ul><blockquote><p>正常执行事务：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi <span class="hljs-comment">#开启事务</span><br>OK<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k1 v1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; get k2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span> <span class="hljs-comment">#执行事务</span><br>1) OK<br>2) OK<br>3) <span class="hljs-string">&quot;v2&quot;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>放弃事务</p></blockquote><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; multi  #开启事务<br>OK<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set k1 v1<br>QUEUED<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set k2 v2<br>QUEUED<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set k4 v4<br>QUEUED<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; DISCARD  #取消事务<br>OK<br><span class="hljs-number">127.0.0.1:6379</span>&gt; get k4<br>(nil)<br><br></code></pre></td></tr></table></figure><blockquote><p>编译型异常（代码有问题，命令有错）事务中所有命令都不会被执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k1 v1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k3 v3<br>QUEUED<br>127.0.0.1:6379(TX)&gt; getset k3<br>(error) ERR wrong number of arguments <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;getset&#x27;</span> <span class="hljs-built_in">command</span><br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k4 v4<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k5 v5<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span><br>(error) EXECABORT Transaction discarded because of previous errors.<br>127.0.0.1:6379&gt; get k1<br>(nil)<br><span class="hljs-comment">#所有的命令都不会被执行</span><br></code></pre></td></tr></table></figure><blockquote><p>运行时异常（I&#x2F;O）如果事务队列中存在语法性，那么执行命令的时候其他命令是可以正常执行的，错误命令抛出异常！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 v1<br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; incr k1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k3 v3<br>QUEUED<br>127.0.0.1:6379(TX)&gt; get k3<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span><br>1) (error) ERR value is not an <span class="hljs-built_in">integer</span> or out of range<br>2) OK<br>3) OK<br>4) <span class="hljs-string">&quot;v3&quot;</span><br>127.0.0.1:6379&gt; get k2<br><span class="hljs-string">&quot;v2&quot;</span><br>127.0.0.1:6379&gt; get k1<br><span class="hljs-string">&quot;v1&quot;</span><br><span class="hljs-comment">#虽然第一条命令报错依然正常执行</span><br></code></pre></td></tr></table></figure><h1 id="拓展：Redis实现乐观锁"><a href="#拓展：Redis实现乐观锁" class="headerlink" title="拓展：Redis实现乐观锁"></a>拓展：Redis实现乐观锁</h1><h4 id="悲观锁："><a href="#悲观锁：" class="headerlink" title="悲观锁："></a>悲观锁：</h4><ul><li>很悲观，认为什么时候都会出问题，无论做什么都要加锁</li></ul><h4 id="乐观锁："><a href="#乐观锁：" class="headerlink" title="乐观锁："></a>乐观锁：</h4><ul><li>很乐观，认为做什么都不会出问题，无论做什么都不加锁！在更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li></ul><blockquote><p>监控！watch</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#正常执行</span><br><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> money 100<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> out 0<br>OK<br>127.0.0.1:6379&gt; watch money  <span class="hljs-comment">#监视money，数据期间没有发生变动，这个时候就执行成功</span><br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; DECRBY money 20<br>QUEUED<br>127.0.0.1:6379(TX)&gt; INCRBY out 20<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span><br>1) (<span class="hljs-built_in">integer</span>) 80<br>2) (<span class="hljs-built_in">integer</span>) 20<br><span class="hljs-comment">##############################################################################</span><br><br><br>127.0.0.1:6379&gt; watch money  <span class="hljs-comment">#监视money</span><br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; DECRBY money 10<br>QUEUED<br>127.0.0.1:6379(TX)&gt; INCRBY out 10   <span class="hljs-comment">#此时另外一个线程修改了数据，exec执行后会显示执行失败！返回nil</span><br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span><br>(nil)<br><br>127.0.0.1:6379&gt; get money<br><span class="hljs-string">&quot;100&quot;</span><br><br><span class="hljs-comment">#########################################################################</span><br>127.0.0.1:6379&gt; unwatch   <span class="hljs-comment">#先解锁，再重新加锁，重新开始事务重新操作。</span><br>OK<br>127.0.0.1:6379&gt; watch money<br>OK<br><br><br><br>//////////////////////////////////////////////////////////////////////////////////////<br>127.0.0.1:6379&gt; get money<br><span class="hljs-string">&quot;80&quot;</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> money 100  <br><span class="hljs-comment">#因为前面watch监控了money,这个时候修改了money的值导致，前面事务执行失败！</span><br>OK<br><br><br></code></pre></td></tr></table></figure><p>使用watch 相当于乐观锁操作！</p><h2 id="集成SpringBoot及RedisTemplate"><a href="#集成SpringBoot及RedisTemplate" class="headerlink" title="集成SpringBoot及RedisTemplate"></a>集成SpringBoot及RedisTemplate</h2><p>笔记及demo参考： <a href="https://github.com/he498/redis_study/tree/master">https://github.com/he498/redis_study/tree/master</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis03-三种特殊数据类型</title>
    <link href="/Blog/2022/09/13/Redis03-%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/Blog/2022/09/13/Redis03-%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="geospatial-地理位置"><a href="#geospatial-地理位置" class="headerlink" title="geospatial 地理位置"></a>geospatial 地理位置</h1><p>​朋友的定位，附件的人，打车距离计算？</p><p>​将指定的地理空间位置（纬度、经度、名称）添加到指定的<code>key</code>中。这些数据将会存储到<code>sorted set</code>这样的目的是为了方便使用<a href="http://www.redis.cn/commands/georadius.html">GEORADIUS</a>或者<a href="http://www.redis.cn/commands/georadiusbymember.html">GEORADIUSBYMEMBER</a>命令对数据进行半径查询等操作。</p><p>​该命令以采用标准格式的参数x,y,所以经度必须在纬度之前。这些坐标的限制是可以被编入索引的，区域面积可以很接近极点但是不能索引。具体的限制，由EPSG:900913 &#x2F; EPSG:3785 &#x2F; OSGEO:41001 规定如下：</p><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul><p>当坐标位置超出上述指定范围时，该命令将会返回一个错误。</p><blockquote><p>只有六个命令</p></blockquote><p><img src="/Blog/Blog/2022/09/13/Redis03-%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/Redis03-%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220529150850302.png" alt="image-20220529150850302"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#################################################################################</span><br><span class="hljs-comment"># geoadd 添加地理位置</span><br><span class="hljs-comment"># 两级无法直接添加,一般会下载城市数据,直接通过java程序一次性导入</span><br><span class="hljs-comment">#geoadd key值 经度 纬度 名称</span><br>127.0.0.1:6379&gt; geoadd china:city 116.46 39.92 beijing<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; geoadd china:city 121.48 31.22 shanghai<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; geoadd china:city 106.54 29.59 chongqing<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; geoadd china:city 114.07 22.62 shenzhen 113.23 23.16 guanzhou<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; geoadd china:city 120.19 30.26 hangzhou<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; geoadd china:city 108.96 34.26 xian<br>(<span class="hljs-built_in">integer</span>) 1<br><br><span class="hljs-comment">#################################################################################</span><br><span class="hljs-comment">#geopos 获取指定的城市的经度和纬度</span><br>127.0.0.1:6379&gt; GEOPOS china:city beijing chongqing<br>1) 1) <span class="hljs-string">&quot;116.45999997854232788&quot;</span><br>   2) <span class="hljs-string">&quot;39.9199990416181052&quot;</span><br>2) 1) <span class="hljs-string">&quot;106.54000014066696167&quot;</span><br>   2) <span class="hljs-string">&quot;29.58999896356930748&quot;</span><br><span class="hljs-comment">#################################################################################</span><br><span class="hljs-comment">#geodist 两人之间的距离    #geodist key member1 member2 [m/km/mi/ft]</span><br><span class="hljs-comment"># 指定单位的参数 unit 必须是以下单位的其中一个：</span><br><span class="hljs-comment">#  m 表示单位为米。</span><br><span class="hljs-comment">#  km 表示单位为千米。</span><br><span class="hljs-comment">#  mi 表示单位为英里。</span><br><span class="hljs-comment">#  ft 表示单位为英尺。</span><br><br>127.0.0.1:6379&gt; GEODIST china:city shanghai beijing km<br><span class="hljs-string">&quot;1068.4581&quot;</span><br>127.0.0.1:6379&gt; GEODIST china:city guanzhou hangzhou km<br><span class="hljs-string">&quot;1049.1200&quot;</span><br><span class="hljs-comment">#################################################################################</span><br><span class="hljs-comment"># 附近的人?(获得所有附件的人的地址)通过半径来查询</span><br><span class="hljs-comment"># GEORADIUS key 经度 维度 半径 单位</span><br><br><br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 1000 km  <span class="hljs-comment">#以经度110纬度30为中心半径1000km查询附近                                                       的城市</span><br>1) <span class="hljs-string">&quot;chongqing&quot;</span><br>2) <span class="hljs-string">&quot;xian&quot;</span><br>3) <span class="hljs-string">&quot;guanzhou&quot;</span><br>4) <span class="hljs-string">&quot;shenzhen&quot;</span><br>5) <span class="hljs-string">&quot;hangzhou&quot;</span><br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km <span class="hljs-comment">#以经度110纬度30为中心半径500km查询附近城市 </span><br>1) <span class="hljs-string">&quot;chongqing&quot;</span><br>2) <span class="hljs-string">&quot;xian&quot;</span><br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist <span class="hljs-comment">#以经度110纬度30为中心半径500km查                                                              询附近城市并带有直线距离输出 </span><br>1) 1) <span class="hljs-string">&quot;chongqing&quot;</span><br>   2) <span class="hljs-string">&quot;337.0554&quot;</span><br>2) 1) <span class="hljs-string">&quot;xian&quot;</span><br>   2) <span class="hljs-string">&quot;483.8340&quot;</span><br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord <span class="hljs-comment">#以经度110纬度30为中心半径500km                                                                查询附近城市并带有经纬度输出</span><br>1) 1) <span class="hljs-string">&quot;chongqing&quot;</span><br>   2) 1) <span class="hljs-string">&quot;106.54000014066696167&quot;</span><br>      2) <span class="hljs-string">&quot;29.58999896356930748&quot;</span><br>2) 1) <span class="hljs-string">&quot;xian&quot;</span><br>   2) 1) <span class="hljs-string">&quot;108.96000176668167114&quot;</span><br>      2) <span class="hljs-string">&quot;34.25999964418929977&quot;</span><br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord count 1 <br><span class="hljs-comment"># 以经度110纬度30为中心半径500km查询指定个数的数量(count 1)查询1个</span><br>1) 1) <span class="hljs-string">&quot;chongqing&quot;</span><br>   2) 1) <span class="hljs-string">&quot;106.54000014066696167&quot;</span><br>      2) <span class="hljs-string">&quot;29.58999896356930748&quot;</span><br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord count 2<br>1) 1) <span class="hljs-string">&quot;chongqing&quot;</span><br>   2) 1) <span class="hljs-string">&quot;106.54000014066696167&quot;</span><br>      2) <span class="hljs-string">&quot;29.58999896356930748&quot;</span><br>2) 1) <span class="hljs-string">&quot;xian&quot;</span><br>   2) 1) <span class="hljs-string">&quot;108.96000176668167114&quot;</span><br>      2) <span class="hljs-string">&quot;34.25999964418929977&quot;</span><br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord count 3<br>1) 1) <span class="hljs-string">&quot;chongqing&quot;</span><br>   2) 1) <span class="hljs-string">&quot;106.54000014066696167&quot;</span><br>      2) <span class="hljs-string">&quot;29.58999896356930748&quot;</span><br>2) 1) <span class="hljs-string">&quot;xian&quot;</span><br>   2) 1) <span class="hljs-string">&quot;108.96000176668167114&quot;</span><br>      2) <span class="hljs-string">&quot;34.25999964418929977&quot;</span><br><span class="hljs-comment">#################################################################################</span><br><span class="hljs-comment"># GEORADIUSBYMEMBER 以给定位置元素为中心查询指定半径内的其他元素</span><br>127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijing 1000 km<br>1) <span class="hljs-string">&quot;beijing&quot;</span><br>2) <span class="hljs-string">&quot;xian&quot;</span><br>127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city hangzhou 1500 km<br>1) <span class="hljs-string">&quot;chongqing&quot;</span><br>2) <span class="hljs-string">&quot;xian&quot;</span><br>3) <span class="hljs-string">&quot;guanzhou&quot;</span><br>4) <span class="hljs-string">&quot;shenzhen&quot;</span><br>5) <span class="hljs-string">&quot;hangzhou&quot;</span><br>6) <span class="hljs-string">&quot;shanghai&quot;</span><br>7) <span class="hljs-string">&quot;beijing&quot;</span><br>127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city hangzhou 1000 km withcoord<br>1) 1) <span class="hljs-string">&quot;hangzhou&quot;</span><br>   2) 1) <span class="hljs-string">&quot;120.18999785184860229&quot;</span><br>      2) <span class="hljs-string">&quot;30.25999927289620928&quot;</span><br>2) 1) <span class="hljs-string">&quot;shanghai&quot;</span><br>   2) 1) <span class="hljs-string">&quot;121.48000091314315796&quot;</span><br>      2) <span class="hljs-string">&quot;31.21999956478423854&quot;</span><br>127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city hangzhou 1000 km withdist <br>1) 1) <span class="hljs-string">&quot;hangzhou&quot;</span><br>   2) <span class="hljs-string">&quot;0.0000&quot;</span><br>2) 1) <span class="hljs-string">&quot;shanghai&quot;</span><br>   2) <span class="hljs-string">&quot;163.1223&quot;</span><br>127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city hangzhou 1000 km count 1<br>1) <span class="hljs-string">&quot;hangzhou&quot;</span><br><br><span class="hljs-comment">#################################################################################</span><br><span class="hljs-comment">#GEOHASH</span><br><span class="hljs-comment"># 该命令将返回11个字符的Geohash字符串，所以没有精度Geohash，损失相比，使用内部52位表示。返回的geohashes具有以下特性：</span><br><br><span class="hljs-comment"># 他们可以缩短从右边的字符。它将失去精度，但仍将指向同一地区。</span><br><span class="hljs-comment"># 它可以在 geohash.org 网站使用，网址 http://geohash.org/&lt;geohash-string&gt;。查询例子：</span><br><span class="hljs-comment"># http://geohash.org/sqdtr74hyu0.</span><br><span class="hljs-comment"># 与类似的前缀字符串是附近，但相反的是不正确的，这是可能的，用不同的前缀字符串附近。</span><br><br><span class="hljs-comment">#将二维的经纬度转换为一维的字符串,如果两个字符串越接近则距离越接近</span><br>127.0.0.1:6379&gt; geohash china:city beijing chongqing<br>1) <span class="hljs-string">&quot;wx4g455wfe0&quot;</span><br>2) <span class="hljs-string">&quot;wm7b26sn1z0&quot;</span><br><br><br><br></code></pre></td></tr></table></figure><p>GEO的底层实现原理其实就是Zset,可以用Zset命令来操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; ZRANGE china:city 0 -1   <span class="hljs-comment">#查看地图中全部元素</span><br>1) <span class="hljs-string">&quot;chongqing&quot;</span><br>2) <span class="hljs-string">&quot;xian&quot;</span><br>3) <span class="hljs-string">&quot;guanzhou&quot;</span><br>4) <span class="hljs-string">&quot;shenzhen&quot;</span><br>5) <span class="hljs-string">&quot;hangzhou&quot;</span><br>6) <span class="hljs-string">&quot;shanghai&quot;</span><br>7) <span class="hljs-string">&quot;beijing&quot;</span><br>127.0.0.1:6379&gt; zrem china:city beijing  <span class="hljs-comment">#删除地图中的元素</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; ZRANGE china:city 0 -1<br>1) <span class="hljs-string">&quot;chongqing&quot;</span><br>2) <span class="hljs-string">&quot;xian&quot;</span><br>3) <span class="hljs-string">&quot;guanzhou&quot;</span><br>4) <span class="hljs-string">&quot;shenzhen&quot;</span><br>5) <span class="hljs-string">&quot;hangzhou&quot;</span><br>6) <span class="hljs-string">&quot;shanghai&quot;</span><br></code></pre></td></tr></table></figure><h1 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h1><p>A{1,3,5,7,8,7}</p><p>B{1,3,5,7,8}</p><p>基数：（不重复的元素，去重后的元素） &#x3D; 5 ；可以接受误差</p><p>Redis 用Hyperloglog 基数统计的算法</p><p><strong>网页的UV（一个人访问一个网站多次，但还是算作一个人）</strong></p><p>保存大量的用id，会比较麻烦这时候可以使用Hyperloglog</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; PFADD mykey a b c d e f g h i j <span class="hljs-comment">#创建第一组mykey</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; PFCOUNT mykey  <span class="hljs-comment">#统计mykey 元素基数数量</span><br>(<span class="hljs-built_in">integer</span>) 10<br>127.0.0.1:6379&gt; PFADD mykey2 i j z x c v b n m<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; PFCOUNT mykey2<br>(<span class="hljs-built_in">integer</span>) 9<br>127.0.0.1:6379&gt; PFMERGE mykey3 mykey mykey2  <span class="hljs-comment">#合并为mykey3 并自动去重</span><br>OK<br>127.0.0.1:6379&gt; PFCOUNT mykey3  <span class="hljs-comment">#查看并集的数量！</span><br>(<span class="hljs-built_in">integer</span>) 15<br><br></code></pre></td></tr></table></figure><p>如果允许容错那么就可以使用Hyperloglog</p><p>如果不允许容错那么就使用Set。</p><h1 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h1><blockquote><p>位存储 (0 1 0 1 1 1 0 0 1 1 0 1 0 1)</p></blockquote><p>统计用户信息，活跃&#x2F;不活跃？登录&#x2F;未登录？!!有十分多的应用场景。</p><p>Bitmaps位图，都是二进制位来进行记录，只有0和1两个状态</p><p>省空间、速度！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#记录 0-6（星期一到星期天的打卡状态，0为未打卡，1为打卡）</span><br><br>127.0.0.1:6379&gt; setbit sign 0 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 1 0<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 2 0<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 3 0<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 4 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 5 0<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 6 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; GETBIT sign 0<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; GETBIT sign 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; GETBIT sign 5<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; BITCOUNT sign  <span class="hljs-comment">#统计一个多少个1(统计这周打卡记录)</span><br>(<span class="hljs-built_in">integer</span>) 3<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis02-五大数据类型</title>
    <link href="/Blog/2022/09/13/Redis02-%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/Blog/2022/09/13/Redis02-%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">####################################################################################</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key1 v1   <span class="hljs-comment">#设置值</span><br>OK<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;key1&quot;</span><br>127.0.0.1:6379&gt; EXISTS key1<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; APPEND key1 <span class="hljs-string">&quot;hello&quot;</span>     <span class="hljs-comment">#追加字符串，如果当前key不存在就相当于set key value</span><br>(<span class="hljs-built_in">integer</span>) 7<br>127.0.0.1:6379&gt; get key1      <span class="hljs-comment">#获得值</span><br><span class="hljs-string">&quot;v1hello&quot;</span><br>127.0.0.1:6379&gt; STRLEN key1   <span class="hljs-comment">#获取字符串长度</span><br>(<span class="hljs-built_in">integer</span>) 7<br>127.0.0.1:6379&gt; APPEND key1 <span class="hljs-string">&quot;,ming&quot;</span><br>(<span class="hljs-built_in">integer</span>) 12<br>127.0.0.1:6379&gt; STRLEN key1<br>(<span class="hljs-built_in">integer</span>) 12<br><span class="hljs-comment">#####################################################################################</span><br><span class="hljs-comment">#incr key自增+1，decr key自减-1</span><br><span class="hljs-comment">#INCRBY 步长i+=  </span><br><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> views 0<br>OK<br>127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;0&quot;</span><br>127.0.0.1:6379&gt; incr views   <span class="hljs-comment">#自增1 i++</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; incr views<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;2&quot;</span><br>127.0.0.1:6379&gt; decr views<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; decr views<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; decr views<br>(<span class="hljs-built_in">integer</span>) -1<br>127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;-1&quot;</span><br>127.0.0.1:6379&gt; INCRBY views 10  <span class="hljs-comment">#设置步长指定增量 i+=</span><br>(<span class="hljs-built_in">integer</span>) 9<br>127.0.0.1:6379&gt; DECRBY views 10<br>(<span class="hljs-built_in">integer</span>) -1<br><span class="hljs-comment">###################################################################################</span><br><span class="hljs-comment">#字符串范围 range</span><br><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key1 <span class="hljs-string">&quot;hello,ming&quot;</span><br>OK<br>127.0.0.1:6379&gt; get key1<br><span class="hljs-string">&quot;hello,ming&quot;</span><br>127.0.0.1:6379&gt; GETRANGE key1 0 3  <span class="hljs-comment">#截取字符串[0-3]</span><br><span class="hljs-string">&quot;hell&quot;</span><br>127.0.0.1:6379&gt; GETRANGE key1 0 -1  <span class="hljs-comment">#获取全部的字符串和get key 一样</span><br><span class="hljs-string">&quot;hello,ming&quot;</span><br><br><span class="hljs-comment"># 替换</span><br><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key2 abcdefg<br>OK<br>127.0.0.1:6379&gt; get key2<br><span class="hljs-string">&quot;abcdefg&quot;</span><br>127.0.0.1:6379&gt; SETRANGE key2 1 xx    <span class="hljs-comment"># 替换指定位置开始的字符串</span><br>(<span class="hljs-built_in">integer</span>) 7<br>127.0.0.1:6379&gt; get key2<br><span class="hljs-string">&quot;axxdefg&quot;</span><br><br><span class="hljs-comment">####################################################################################</span><br><span class="hljs-comment"># setex(set with expire)  #设置过期时间</span><br><span class="hljs-comment"># setnx(set if not exist) #不存在再设置  （分布式锁中经常使用）</span><br><br>127.0.0.1:6379&gt; setex key3 30 helllo   <span class="hljs-comment">#设置key3 的值为hello,30秒后过期</span><br>OK<br>127.0.0.1:6379&gt; ttl key3<br>(<span class="hljs-built_in">integer</span>) 26<br>127.0.0.1:6379&gt; ttl key3<br>(<span class="hljs-built_in">integer</span>) 25<br>127.0.0.1:6379&gt; ttl key3<br>(<span class="hljs-built_in">integer</span>) 24<br>127.0.0.1:6379&gt; setnx mykey redis  <span class="hljs-comment">#如果mykey不存在，创建mykey ,成功返回1否则返回0</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;key2&quot;</span><br>2) <span class="hljs-string">&quot;key3&quot;</span><br>3) <span class="hljs-string">&quot;key1&quot;</span><br>4) <span class="hljs-string">&quot;mykey&quot;</span><br>127.0.0.1:6379&gt; setnx mykey 111  <span class="hljs-comment">#创建失败</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; get mykey<br><span class="hljs-string">&quot;redis&quot;</span><br><br><span class="hljs-comment">####################################################################################</span><br>mset  同时设置多个值<br>mget  同时get多个值<br><br>127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;k2&quot;</span><br>2) <span class="hljs-string">&quot;k1&quot;</span><br>3) <span class="hljs-string">&quot;k3&quot;</span><br>127.0.0.1:6379&gt; mget k1 k2 k3<br>1) <span class="hljs-string">&quot;v1&quot;</span><br>2) <span class="hljs-string">&quot;v2&quot;</span><br>3) <span class="hljs-string">&quot;v3&quot;</span><br>127.0.0.1:6379&gt; msetnx k1 v1 k4 v4  <br><span class="hljs-comment">#同时设置多个值并判断是否存在，设置多个Key中有已经存在的就全都创建失败，要么一起成功要么一起失败。</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;k2&quot;</span><br>2) <span class="hljs-string">&quot;k1&quot;</span><br>3) <span class="hljs-string">&quot;k3&quot;</span><br>127.0.0.1:6379&gt; get k4<br>(nil)<br><br><span class="hljs-comment"># 对象</span><br><span class="hljs-built_in">set</span> user:1 &#123;name:zhangsan,gae:3&#125;  <span class="hljs-comment">#设置user:1 对象 为json 字符来保存一个对象</span><br>这里的key是一个巧妙的设置 user:1:name,user:1:age<br><br>127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 2<br>OK<br>127.0.0.1:6379&gt; mget user:1:name user:1:age<br>1) <span class="hljs-string">&quot;zhangsan&quot;</span><br>2) <span class="hljs-string">&quot;2&quot;</span><br><br><br><br><span class="hljs-comment">####################################################################################</span><br>getset 先get再<span class="hljs-built_in">set</span><br><br>127.0.0.1:6379&gt; clear<br>127.0.0.1:6379&gt; getset db redis  <span class="hljs-comment">#如果不存在值则返回Nil</span><br>(nil)<br>127.0.0.1:6379&gt; get db<br><span class="hljs-string">&quot;redis&quot;</span><br>127.0.0.1:6379&gt; getset db mongodb   <span class="hljs-comment">#如果存在值则返回set前的值并set新的值</span><br><span class="hljs-string">&quot;redis&quot;</span><br>127.0.0.1:6379&gt; get db<br><span class="hljs-string">&quot;mongodb&quot;</span><br><br><br></code></pre></td></tr></table></figure><p>String使用场景：value除了是字符串还能是数字</p><ul><li>计数器</li><li>统计多单位的数量 </li><li>粉丝数</li><li>对象缓存存储</li></ul><h1 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h1><p>Redis中可以将list玩成栈，队列，阻塞队列</p><p>所有list命令是L开头的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">######################################################################################</span><br>127.0.0.1:6379&gt; LPUSH list one  <span class="hljs-comment">#将一个值或多个值插入列表的头部</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; LPUSH list two<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; LPUSH list three<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; LRANGE list 0 -1  <span class="hljs-comment">#获取list中的值</span><br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>3) <span class="hljs-string">&quot;one&quot;</span><br>127.0.0.1:6379&gt; LRANGE list 0 1  <span class="hljs-comment">#通过区间获取具体值</span><br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>127.0.0.1:6379&gt; RPUSH list rightr<br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>3) <span class="hljs-string">&quot;one&quot;</span><br>4) <span class="hljs-string">&quot;rightr&quot;</span><br><br><span class="hljs-comment">######################################################################################</span><br>LPOP<br>RPOP<br><br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>3) <span class="hljs-string">&quot;one&quot;</span><br>4) <span class="hljs-string">&quot;rightr&quot;</span><br>127.0.0.1:6379&gt; LPOP list   <span class="hljs-comment">#移除List第一个元素</span><br><span class="hljs-string">&quot;three&quot;</span><br>127.0.0.1:6379&gt; RPOP list   <span class="hljs-comment">#移除List最后一个元素</span><br><span class="hljs-string">&quot;rightr&quot;</span><br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) <span class="hljs-string">&quot;two&quot;</span><br>2) <span class="hljs-string">&quot;one&quot;</span><br><span class="hljs-comment">######################################################################################</span><br>LINDEX<br><br>127.0.0.1:6379&gt; LINDEX list 0  <span class="hljs-comment">#通过下标获得list中的某一个值</span><br><span class="hljs-string">&quot;two&quot;</span><br>127.0.0.1:6379&gt; LINDEX list 1<br><span class="hljs-string">&quot;one&quot;</span><br>127.0.0.1:6379&gt; LINDEX list 2<br>(nil)<br><span class="hljs-comment">######################################################################################</span><br>Llen  返回列表的长度<br><br>127.0.0.1:6379&gt; Lpush list one<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; Lpush list two<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; Lpush list three<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; Llen list<br>(<span class="hljs-built_in">integer</span>) 3<br><span class="hljs-comment">######################################################################################</span><br>移除指定的值<br>Lrem<br>127.0.0.1:6379&gt; Lpush list three<br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379&gt; LRANGE list 0 -1  <span class="hljs-comment">#可以存在重复的值</span><br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;three&quot;</span><br>3) <span class="hljs-string">&quot;two&quot;</span><br>4) <span class="hljs-string">&quot;one&quot;</span><br>127.0.0.1:6379&gt; lrem list 1 one  <span class="hljs-comment">#移除list集合中指定个数的value，精确匹配</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;three&quot;</span><br>3) <span class="hljs-string">&quot;two&quot;</span><br>127.0.0.1:6379&gt; lrem list 2 three<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) <span class="hljs-string">&quot;two&quot;</span><br><br><span class="hljs-comment">######################################################################################</span><br>trim :修剪<br><br>127.0.0.1:6379&gt; RPUSH mylist hello<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; RPUSH mylist hello1<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; RPUSH mylist hello2<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; RPUSH mylist hello3<br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379&gt; ltrim mylist 1 2  <span class="hljs-comment">#通过下标截取指定的长度,这个list已经被改变了只剩下截取的元素</span><br>OK<br>127.0.0.1:6379&gt; LRANGE mylist 0 -1<br>1) <span class="hljs-string">&quot;hello1&quot;</span><br>2) <span class="hljs-string">&quot;hello2&quot;</span><br><span class="hljs-comment">######################################################################################</span><br>rpoplpush <span class="hljs-comment">#移除列表最后一个元素并添加到新的元素</span><br><br>127.0.0.1:6379&gt; rpush mylist hello<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; rpush mylist hello1<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; rpush mylist hello2<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; rpush mylist hello3<br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379&gt; rpoplpush mylist myotherlist<br><span class="hljs-string">&quot;hello3&quot;</span><br>127.0.0.1:6379&gt; lrange mylist 0 -1<br>1) <span class="hljs-string">&quot;hello&quot;</span><br>2) <span class="hljs-string">&quot;hello1&quot;</span><br>3) <span class="hljs-string">&quot;hello2&quot;</span><br>127.0.0.1:6379&gt; lrange myotherlist 0 -1<br>1) <span class="hljs-string">&quot;hello3&quot;</span><br><span class="hljs-comment">######################################################################################</span><br>lset <span class="hljs-comment">#将列表中指定下标的值替换为另外一个值</span><br><br>127.0.0.1:6379&gt; EXISTS list  <span class="hljs-comment">#列表不存在</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; lset list 0 item    <span class="hljs-comment">#如果列表不存在去lset就会报错</span><br>(error) ERR no such key<br>127.0.0.1:6379&gt; lpush list value1  <br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; LRANGE list 0 0<br>1) <span class="hljs-string">&quot;value1&quot;</span><br>127.0.0.1:6379&gt; lset list 0 item   <span class="hljs-comment">#如果列表和下标的值存在则会更新当前下标的值</span><br>OK<br>127.0.0.1:6379&gt; LRANGE list 0 0<br>1) <span class="hljs-string">&quot;item&quot;</span><br>127.0.0.1:6379&gt; lset list 1 word   <span class="hljs-comment">#如果当前下标的值不存在也会报错</span><br>(error) ERR index out of range<br><span class="hljs-comment">######################################################################################</span><br>LINSERT <span class="hljs-comment">#将某个具体的value插入列表中某个元素的前面或者后面 (before|after)</span><br><br>127.0.0.1:6379&gt; RPUSH mylist hello<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; RPUSH mylist world<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; LINSERT mylist before world my<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; LRANGE mylist 0 -1<br>1) <span class="hljs-string">&quot;hello&quot;</span><br>2) <span class="hljs-string">&quot;my&quot;</span><br>3) <span class="hljs-string">&quot;world&quot;</span><br>127.0.0.1:6379&gt; LINSERT mylist after world !<br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379&gt; LRANGE mylist 0 -1<br>1) <span class="hljs-string">&quot;hello&quot;</span><br>2) <span class="hljs-string">&quot;my&quot;</span><br>3) <span class="hljs-string">&quot;world&quot;</span><br>4) <span class="hljs-string">&quot;!&quot;</span><br><br><br></code></pre></td></tr></table></figure><blockquote><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1></blockquote><ul><li><p>实际上是一个链表，before Node after ,left , right都可以插入值</p></li><li><p>如果key不存在则创建新的链表</p></li><li><p>如果key存在新增内容</p></li><li><p>如果移除了所有值,空链表，也代表不存在</p></li><li><p>在两边插入或者改动值，效率最高。中间元素，相对来说效率会低一点。</p><p>消息队列（Lpush Rpop）,栈（Lpush,Lpop）</p></li></ul><h1 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h1><p>set中的值不能重复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#############################################################################</span><br>127.0.0.1:6379&gt; sadd myset hello  <span class="hljs-comment">#set集合中添加元素</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd myset ming<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd myset mming<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; SMEMBERS myset       <span class="hljs-comment">#查看指定set的所有值</span><br>1) <span class="hljs-string">&quot;mming&quot;</span><br>2) <span class="hljs-string">&quot;ming&quot;</span><br>3) <span class="hljs-string">&quot;hello&quot;</span><br>127.0.0.1:6379&gt; SISMEMBER myset hello <span class="hljs-comment">#判断某一个值是不是在set集合中，存在返回1否则返回0</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; SISMEMBER myset world<br>(<span class="hljs-built_in">integer</span>) 0<br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment"># SCARD 获取set集合中的内容元素的个数的值</span><br>127.0.0.1:6379&gt; SCARD myset<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; sadd myset hello<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; sadd myset hello2<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; SCARD myset<br>(<span class="hljs-built_in">integer</span>) 4<br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment"># srem 移除Set集合中的指定元素</span><br>127.0.0.1:6379&gt; srem myset hello<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; SCARD myset<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) <span class="hljs-string">&quot;mming&quot;</span><br>2) <span class="hljs-string">&quot;hello2&quot;</span><br>3) <span class="hljs-string">&quot;ming&quot;</span><br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-built_in">set</span>是无序不重复集合<br><span class="hljs-comment">#SRANDMEMBE 随机抽出指定个数的元素</span><br>127.0.0.1:6379&gt; SRANDMEMBER myset<br><span class="hljs-string">&quot;mming&quot;</span><br>127.0.0.1:6379&gt; SRANDMEMBER myset<br><span class="hljs-string">&quot;mming&quot;</span><br>127.0.0.1:6379&gt; SRANDMEMBER myset<br><span class="hljs-string">&quot;ming&quot;</span><br>127.0.0.1:6379&gt; SRANDMEMBER myset<br><span class="hljs-string">&quot;hello2&quot;</span><br>127.0.0.1:6379&gt; SRANDMEMBER myset<br><span class="hljs-string">&quot;mming&quot;</span><br>127.0.0.1:6379&gt; SRANDMEMBER myset 2<br>1) <span class="hljs-string">&quot;hello2&quot;</span><br>2) <span class="hljs-string">&quot;ming&quot;</span><br>127.0.0.1:6379&gt; SRANDMEMBER myset 2<br>1) <span class="hljs-string">&quot;mming&quot;</span><br>2) <span class="hljs-string">&quot;hello2&quot;</span><br><span class="hljs-comment">#############################################################################</span><br>随机删除key<br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) <span class="hljs-string">&quot;mming&quot;</span><br>2) <span class="hljs-string">&quot;hello2&quot;</span><br>3) <span class="hljs-string">&quot;ming&quot;</span><br>127.0.0.1:6379&gt; spop myset<br><span class="hljs-string">&quot;mming&quot;</span><br>127.0.0.1:6379&gt; spop myset<br><span class="hljs-string">&quot;hello2&quot;</span><br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) <span class="hljs-string">&quot;ming&quot;</span><br><span class="hljs-comment">#############################################################################</span><br>将指定的值，移动到另外一个<span class="hljs-built_in">set</span>集合中<br>127.0.0.1:6379&gt; sadd myset hello<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd myset world<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd myset ming<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd myset2 set2<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; smove myset myset2 ming<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) <span class="hljs-string">&quot;world&quot;</span><br>2) <span class="hljs-string">&quot;hello&quot;</span><br>127.0.0.1:6379&gt; SMEMBERS myset2<br>1) <span class="hljs-string">&quot;set2&quot;</span><br>2) <span class="hljs-string">&quot;ming&quot;</span><br><span class="hljs-comment">#############################################################################</span><br>- 差集<br>- 交集<br>- 并集<br>127.0.0.1:6379&gt; sadd key1 a<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd key1 b<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd key1 c<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd key2 c<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd key2 d<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd key2 e<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; SDIFF key1 key2 <span class="hljs-comment">#差集，以key1为目标参照</span><br>1) <span class="hljs-string">&quot;a&quot;</span><br>2) <span class="hljs-string">&quot;b&quot;</span><br>127.0.0.1:6379&gt; SINTER key1 key2 <span class="hljs-comment">#交集，以key1为目标参照</span><br>1) <span class="hljs-string">&quot;c&quot;</span><br>127.0.0.1:6379&gt; SUNION key1 key2 <span class="hljs-comment">#并集，以key1为目标参照</span><br>1) <span class="hljs-string">&quot;c&quot;</span><br>2) <span class="hljs-string">&quot;e&quot;</span><br>3) <span class="hljs-string">&quot;a&quot;</span><br>4) <span class="hljs-string">&quot;b&quot;</span><br>5) <span class="hljs-string">&quot;d&quot;</span><br><span class="hljs-comment">#############################################################################</span><br><br></code></pre></td></tr></table></figure><p>案例：微博，A用户将所有关注的人放在set集合中，将它的粉丝也放在一个集合中</p><p>共同关注、共同爱好…..推荐好友….</p><h1 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash(哈希)"></a>Hash(哈希)</h1><p>Map集合，key-map!这时候的value是一个map集合。本质与String没有太大区别</p><p>set myhash field xxxx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#############################################################################</span><br>127.0.0.1:6379&gt; hset myhash field1 ming   <span class="hljs-comment">#set一个具体的k-v</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; hget myhash field1  <span class="hljs-comment">#获取一个字段值</span><br><span class="hljs-string">&quot;ming&quot;</span>  <br>127.0.0.1:6379&gt; hmset myhash field1 hello field2 world   <span class="hljs-comment">#set多个k-v</span><br>OK<br>127.0.0.1:6379&gt; hmget myhash field1 field2   <span class="hljs-comment">#获取多个k-v</span><br>1) <span class="hljs-string">&quot;hello&quot;</span><br>2) <span class="hljs-string">&quot;world&quot;</span><br>127.0.0.1:6379&gt; hgetall myhash   <span class="hljs-comment">#获取全部数据</span><br>1) <span class="hljs-string">&quot;field1&quot;</span><br>2) <span class="hljs-string">&quot;hello&quot;</span><br>3) <span class="hljs-string">&quot;field2&quot;</span><br>4) <span class="hljs-string">&quot;world&quot;</span><br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment"># hdel</span><br><br>127.0.0.1:6379&gt; hdel myhash field1  <span class="hljs-comment">#删除hash指定key字段</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; hgetall myhash  <span class="hljs-comment">#对应的value也没有了</span><br>1) <span class="hljs-string">&quot;field2&quot;</span><br>2) <span class="hljs-string">&quot;world&quot;</span><br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment"># hlen</span><br>127.0.0.1:6379&gt; HGETALL myhash<br>1) <span class="hljs-string">&quot;field2&quot;</span><br>2) <span class="hljs-string">&quot;world&quot;</span><br>3) <span class="hljs-string">&quot;field1&quot;</span><br>4) <span class="hljs-string">&quot;hello&quot;</span><br>5) <span class="hljs-string">&quot;field3&quot;</span><br>6) <span class="hljs-string">&quot;!!&quot;</span><br>127.0.0.1:6379&gt; hlen myhash   <span class="hljs-comment">#获取哈希表的字段数量</span><br>(<span class="hljs-built_in">integer</span>) 3<br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment"># 判断hash中指定的字段是否存在！</span><br>127.0.0.1:6379&gt; HEXISTS myhash field1<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; HEXISTS myhash field4<br>(<span class="hljs-built_in">integer</span>) 0<br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment"># 只获得所有field</span><br><span class="hljs-comment"># 只获得所有的value</span><br>127.0.0.1:6379&gt; hkeys myhash<br>1) <span class="hljs-string">&quot;field2&quot;</span><br>2) <span class="hljs-string">&quot;field1&quot;</span><br>3) <span class="hljs-string">&quot;field3&quot;</span><br>127.0.0.1:6379&gt; HVALS myhash<br>1) <span class="hljs-string">&quot;world&quot;</span><br>2) <span class="hljs-string">&quot;hello&quot;</span><br>3) <span class="hljs-string">&quot;!!&quot;</span><br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment"># incr decr  hsetnx</span><br><br>127.0.0.1:6379&gt; hset myhash field5 5<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; HINCRBY myhash field5 1  <span class="hljs-comment">#指定增量</span><br>(<span class="hljs-built_in">integer</span>) 6<br>127.0.0.1:6379&gt; HINCRBY myhash field5 -1<br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6379&gt; hsetnx myhash field6 hello  <span class="hljs-comment">#判断是否存在再创建</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; hsetnx myhash field6 hello<br>(<span class="hljs-built_in">integer</span>) 0<br><br></code></pre></td></tr></table></figure><p>hash变更数据 user name age。   hash更适合存储对象，String更加适合字符串的存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; hset user:1 name ming<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; hset user:1 age 3<br>(<span class="hljs-built_in">integer</span>) 1<br><br></code></pre></td></tr></table></figure><h1 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h1><p>在set的基础上，增加了一个值，zset k1 score1 v1 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">###############################################################################</span><br>127.0.0.1:6379&gt; zadd myset 1 one<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd myset 2 two 3 three<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; ZRANGE myset 0 -1  <span class="hljs-comment">#遍历</span><br>1) <span class="hljs-string">&quot;one&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>3) <span class="hljs-string">&quot;three&quot;</span><br><span class="hljs-comment">###############################################################################</span><br><span class="hljs-comment"># 排序</span><br><span class="hljs-comment"># ZRANGEBYSCORE salary -inf +inf 从小到大排序 (-inf  -∞，+inf +∞)</span><br><br>127.0.0.1:6379&gt; zadd salary 2500 ming<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd salary 5000 zs<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd salary 500 xh<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf   <span class="hljs-comment">#从小到大排序</span><br>1) <span class="hljs-string">&quot;xh&quot;</span><br>2) <span class="hljs-string">&quot;ming&quot;</span><br>3) <span class="hljs-string">&quot;zs&quot;</span><br>127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores  <span class="hljs-comment">#从小到大的排序并且带scores输出</span><br>1) <span class="hljs-string">&quot;xh&quot;</span><br>2) <span class="hljs-string">&quot;500&quot;</span><br>3) <span class="hljs-string">&quot;ming&quot;</span><br>4) <span class="hljs-string">&quot;2500&quot;</span><br>5) <span class="hljs-string">&quot;zs&quot;</span><br>6) <span class="hljs-string">&quot;5000&quot;</span><br>127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 2500 withscores  <span class="hljs-comment">#从-∞到2500排序</span><br>1) <span class="hljs-string">&quot;xh&quot;</span><br>2) <span class="hljs-string">&quot;500&quot;</span><br>3) <span class="hljs-string">&quot;ming&quot;</span><br>4) <span class="hljs-string">&quot;2500&quot;</span><br><br>127.0.0.1:6379&gt; ZREVRANGE salary 0 -1     <span class="hljs-comment">#从大到小排序</span><br>1) <span class="hljs-string">&quot;zs&quot;</span><br>2) <span class="hljs-string">&quot;ming&quot;</span><br>127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 withscores     <span class="hljs-comment">#从大到小排序并且带scores输出</span><br>1) <span class="hljs-string">&quot;zs&quot;</span><br>2) <span class="hljs-string">&quot;5000&quot;</span><br>3) <span class="hljs-string">&quot;ming&quot;</span><br>4) <span class="hljs-string">&quot;2500&quot;</span><br><br><span class="hljs-comment">###############################################################################</span><br><span class="hljs-comment"># 移除元素 zrem</span><br>127.0.0.1:6379&gt; ZRANGE salary 0 -1<br>1) <span class="hljs-string">&quot;xh&quot;</span><br>2) <span class="hljs-string">&quot;ming&quot;</span><br>3) <span class="hljs-string">&quot;zs&quot;</span><br>127.0.0.1:6379&gt; zrem salary xh<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; ZRANGE salary 0 -1<br>1) <span class="hljs-string">&quot;ming&quot;</span><br>2) <span class="hljs-string">&quot;zs&quot;</span><br><br><span class="hljs-comment">###############################################################################</span><br><span class="hljs-comment"># zcard  获取集合中的个数</span><br>127.0.0.1:6379&gt; ZCARD salary<br>(<span class="hljs-built_in">integer</span>) 2<br><br><span class="hljs-comment">###############################################################################</span><br><span class="hljs-comment"># zcount 获取指定区间的成员数量</span><br>127.0.0.1:6379&gt; zadd myset 1 hello<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd myset 2 world 3 ming<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; zcount myset 1 3<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; zcount myset 1 2<br>(<span class="hljs-built_in">integer</span>) 2<br><br></code></pre></td></tr></table></figure><p>案例思路：set排序，排行榜、播放量….</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis01-Redis基础及基本命令</title>
    <link href="/Blog/2022/09/13/Redis01-Redis%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/Blog/2022/09/13/Redis01-Redis%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis?"></a>什么是Redis?</h1><p>​Redis is an open source (BSD licensed), in-memory <strong>data structure store</strong> used as a database, cache, message broker, and streaming engine. Redis provides data structures such as <a href="https://redis.io/topics/data-types-intro#strings">strings</a>, <a href="https://redis.io/topics/data-types-intro#hashes">hashes</a>, <a href="https://redis.io/topics/data-types-intro#lists">lists</a>, <a href="https://redis.io/topics/data-types-intro#sets">sets</a>, <a href="https://redis.io/topics/data-types-intro#sorted-sets">sorted sets</a> with range queries, <a href="https://redis.io/topics/data-types-intro#bitmaps">bitmaps</a>, <a href="https://redis.io/topics/data-types-intro#hyperloglogs">hyperloglogs</a>, <a href="https://redis.io/commands/geoadd">geospatial indexes</a>, and <a href="https://redis.io/topics/streams-intro">streams</a>. Redis has built-in <a href="https://redis.io/topics/replication">replication</a>, <a href="https://redis.io/commands/eval">Lua scripting</a>, <a href="https://redis.io/topics/lru-cache">LRU eviction</a>, <a href="https://redis.io/topics/transactions">transactions</a>, and different levels of <a href="https://redis.io/topics/persistence">on-disk persistence</a>, and provides high availability via <a href="https://redis.io/topics/sentinel">Redis Sentinel</a> and automatic partitioning with <a href="https://redis.io/topics/cluster-tutorial">Redis Cluster</a>.</p><p>​    Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持<a href="https://www.redis.net.cn/tutorial/3508.html">字符串</a>、<a href="https://www.redis.net.cn/tutorial/3509.html">哈希表</a>、<a href="https://www.redis.net.cn/tutorial/3510.html">列表</a>、<a href="https://www.redis.net.cn/tutorial/3511.html">集合</a>、<a href="https://www.redis.net.cn/tutorial/3512.html">有序集合</a>，<a href="https://www.redis.net.cn/tutorial/3508.html">位图</a>，<a href="https://www.redis.net.cn/tutorial/3513.html">hyperloglogs</a>等数据类型。内置复制、<a href="https://www.redis.net.cn/tutorial/3516.html">Lua脚本</a>、LRU收回、<a href="https://www.redis.net.cn/tutorial/3515.html">事务</a>以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动<a href="https://www.redis.net.cn/tutorial/3524.html">分区</a>。</p><p><strong>官方地址：</strong><a href="https://redis.io/">https://redis.io/</a></p><p><strong>redis中文命令查询：</strong><a href="https://www.redis.net.cn/order/">https://www.redis.net.cn/order/</a></p><p><strong>命令测试Demo:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; keys *<br>(empty array)<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> name ming<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> age 1<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;name&quot;</span><br>2) <span class="hljs-string">&quot;age&quot;</span><br>127.0.0.1:6379&gt; EXISTS name   <span class="hljs-comment">#查询一个key是否存在，存在返回1，否则返回0</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; EXISTS hello<br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; move name 1 <span class="hljs-comment">#移除一个key 1代表当前数据库</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;age&quot;</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> name ming<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;name&quot;</span><br>2) <span class="hljs-string">&quot;age&quot;</span><br>127.0.0.1:6379&gt; get name<br><span class="hljs-string">&quot;ming&quot;</span><br>127.0.0.1:6379&gt; EXPIRE name 10 <span class="hljs-comment">#设置一个Key的过期时间</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; ttl name   <span class="hljs-comment">#ttl key 查询一个key剩余时间</span><br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6379&gt; ttl name<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; ttl name<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; ttl name<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; ttl name<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; ttl name<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; ttl name<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; ttl name<br>(<span class="hljs-built_in">integer</span>) -2<br>127.0.0.1:6379&gt; get name<br>(nil)<br><br><br><br>127.0.0.1:6379&gt; <span class="hljs-built_in">type</span> age  <span class="hljs-comment">#查看一个key的类型</span><br>string<br><br></code></pre></td></tr></table></figure><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><strong>启动：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server mingconfig/redis.conf <span class="hljs-comment">#启动服务端</span><br>redis-cli -p 6379 <span class="hljs-comment">#链接客户端</span><br></code></pre></td></tr></table></figure><ul><li><p>redis默认有16个数据库</p></li><li><p>默认使用的是第0个</p></li><li><p>可以使用select进行切换</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; select 3<br>OK<br>127.0.0.1:6379[3]&gt; DBSIZE<br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><p><strong>基本命令测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[3]&gt; <span class="hljs-built_in">set</span> name ming<br>OK<br>127.0.0.1:6379[3]&gt; get name<br><span class="hljs-string">&quot;ming&quot;</span><br>127.0.0.1:6379&gt; select 7<br>OK<br>127.0.0.1:6379[7]&gt; get name<br>(nil)<br>127.0.0.1:6379[7]&gt; DBSIZE<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379[7]&gt; select 3<br>OK<br>127.0.0.1:6379[3]&gt; get name<br><span class="hljs-string">&quot;ming&quot;</span><br>127.0.0.1:6379[3]&gt; keys *  <span class="hljs-comment">#查看数据库所有的key</span><br>1) <span class="hljs-string">&quot;name&quot;</span><br></code></pre></td></tr></table></figure><p>清除当前数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#flushdb</span><br>127.0.0.1:6379[3]&gt; flushdb<br>OK<br>127.0.0.1:6379[3]&gt; keys *<br>(empty array)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#FLUSHALL 清空所有数据库</span><br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;counter:__rand_int__&quot;</span><br>2) <span class="hljs-string">&quot;name&quot;</span><br>3) <span class="hljs-string">&quot;key:__rand_int__&quot;</span><br>4) <span class="hljs-string">&quot;myhash&quot;</span><br>5) <span class="hljs-string">&quot;mylist&quot;</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> name ming<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;counter:__rand_int__&quot;</span><br>2) <span class="hljs-string">&quot;name&quot;</span><br>3) <span class="hljs-string">&quot;key:__rand_int__&quot;</span><br>4) <span class="hljs-string">&quot;myhash&quot;</span><br>5) <span class="hljs-string">&quot;mylist&quot;</span><br>127.0.0.1:6379&gt; select 3<br>OK<br>127.0.0.1:6379[3]&gt; FLUSHALL<br>OK<br>127.0.0.1:6379[3]&gt; select 0<br>OK<br>127.0.0.1:6379&gt; keys *<br>(empty array)<br><br></code></pre></td></tr></table></figure><h1 id="Redis-是单线程的"><a href="#Redis-是单线程的" class="headerlink" title="Redis 是单线程的"></a>Redis 是单线程的</h1><p>Redis 是基于内存操作，CPU不是Redis的性能瓶颈，Redis的性能瓶颈是根据及其的内存和网络带框。</p><p>Redis 是基于c写的。</p><p><strong>误区：</strong></p><p>1.高性能服务器一定是多线程？</p><p>2.多线程（CPU会上下文切换）一定比单线程效率高</p><p>3.cpu&gt;内存&gt;硬盘</p><p><strong>redis是将所有数据都存放在内存中，单线程去操作效率是最高的</strong></p><h1 id="测试性能-redis-benchmark"><a href="#测试性能-redis-benchmark" class="headerlink" title="测试性能 -redis-benchmark"></a>测试性能 -redis-benchmark</h1><p>redis-benchmark是一个压力测试工具！</p><p>可选参数：</p><p><img src="/Blog/Blog/2022/09/13/Redis01-Redis%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/Redis01-Redis%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/image-20220526151129074.png" alt="image-20220526151129074"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#测试： 100个并发连接   100000请求</span><br>redis-benchmark -h localhost -p 6379 -c 100 -n 100000<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/13/Redis01-Redis%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/Redis01-Redis%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/image-20220526151802178.png" alt="image-20220526151802178"></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">====== SET ======                                                    </span><br><span class="hljs-code">  100000 requests completed in 1.01 seconds</span><br><span class="hljs-code">  100 parallel clients  #一百个并发客户端</span><br><span class="hljs-code">  3 bytes payload    #每次写入3字节</span><br><span class="hljs-code">  keep alive: 1    #只有一台服务器来处理这些请求 ,单机性能</span><br><span class="hljs-code">  host configuration &quot;save&quot;: 3600 1 300 100 60 10000</span><br><span class="hljs-code">  host configuration &quot;appendonly&quot;: no</span><br><span class="hljs-code">  multi-thread: no</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL03-DQL</title>
    <link href="/Blog/2022/09/13/SQL03-DQL/"/>
    <url>/Blog/2022/09/13/SQL03-DQL/</url>
    
    <content type="html"><![CDATA[<h1 id="DQL：查询表中记录"><a href="#DQL：查询表中记录" class="headerlink" title="DQL：查询表中记录"></a>DQL：查询表中记录</h1><h4 id="1-语法："><a href="#1-语法：" class="headerlink" title="1.语法："></a>1.语法：</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span><br> 字段列表<br><span class="hljs-keyword">from</span><br> 表明列表<br><span class="hljs-keyword">where</span><br> 条件列表<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br> 分组字段<br><span class="hljs-keyword">having</span><br> 分组之后的条件<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br> 排序<br><span class="hljs-keyword">limit</span><br> 分页限定<br></code></pre></td></tr></table></figure><h4 id="2-基础查询"><a href="#2-基础查询" class="headerlink" title="2.基础查询"></a>2.基础查询</h4><p>① 多个字段查询</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> 字段名<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span>…from 表名<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果查询所有字段，则可以使用来替代字段列表</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200917112903348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY4ODM0Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200917112915941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY4ODM0Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200917112936395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY4ODM0Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200917112946115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY4ODM0Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200917112953168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY4ODM0Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200917113114758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY4ODM0Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SQL 语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL02-DML</title>
    <link href="/Blog/2022/09/13/SQL02-DML/"/>
    <url>/Blog/2022/09/13/SQL02-DML/</url>
    
    <content type="html"><![CDATA[<h1 id="DML-增删改表中得数据"><a href="#DML-增删改表中得数据" class="headerlink" title="DML:增删改表中得数据"></a>DML:增删改表中得数据</h1><h4 id="1-添加数据："><a href="#1-添加数据：" class="headerlink" title="1.添加数据："></a>1.添加数据：</h4><p>*语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">insert</span> into 表名（列名<span class="hljs-number">1</span>，列名<span class="hljs-number">2</span>，…列名n）values(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>，…值n);<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1.列名和值要一一对应。</p><p>2.如果表名后不定义列名，则默认给所有列添加值。</p><p>3.除了数字类型，其他类型需要使用引号（单双即可）引起来。 </p></blockquote><h4 id="2-删除数据："><a href="#2-删除数据：" class="headerlink" title="2.删除数据："></a>2.删除数据：</h4><p>*语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 条件];<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1.如果不添加条件则删除表中所有记录。</p><p>2.如要删除所有记录推荐使用：<br>TRUNCATE TABLE 表名; – 先删除表再创建一张一样得表</p></blockquote><h4 id="3-修改数据："><a href="#3-修改数据：" class="headerlink" title="3.修改数据："></a>3.修改数据：</h4><p>*语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">update</span> 表名 set 列名<span class="hljs-number">1</span> = 值<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span> = 值<span class="hljs-number">2</span>,…<span class="hljs-meta"> [where 条件];</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：如不添加任何条件，则将会将表中所有记录全部修改。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>SQL语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL01-DDL</title>
    <link href="/Blog/2022/09/13/SQL01-DDL/"/>
    <url>/Blog/2022/09/13/SQL01-DDL/</url>
    
    <content type="html"><![CDATA[<h2 id="一、操作数据库"><a href="#一、操作数据库" class="headerlink" title="一、操作数据库"></a>一、操作数据库</h2><h4 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h4><p>*创建数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">create database 数据库名称;<br></code></pre></td></tr></table></figure><p>*创建数据库，判断不存在再创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">create database <span class="hljs-keyword">if</span> not exists 数据库名称;<br></code></pre></td></tr></table></figure><p>*创建db4数据库，判断是否存在，并制定字符集为gbk：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">create database <span class="hljs-keyword">if</span> not exists db4 character <span class="hljs-built_in">set</span> gbk;<br></code></pre></td></tr></table></figure><h4 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h4><p>*查询所有数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">show databases;<br></code></pre></td></tr></table></figure><p>*查询某个数据库得字符集查询某个数据库得创建语句：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> 数据库名称;<br></code></pre></td></tr></table></figure><h4 id="3-修改"><a href="#3-修改" class="headerlink" title="3.修改"></a>3.修改</h4><p>*修改数据库得字符集：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> 数据库名称 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> 字符集名称;<br></code></pre></td></tr></table></figure><h4 id="4-删除"><a href="#4-删除" class="headerlink" title="4.删除"></a>4.删除</h4><p>*删除数据库：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> 数据库名称;<br></code></pre></td></tr></table></figure><p>*判断数据库存在，存在再删除：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> 数据库名称;<br></code></pre></td></tr></table></figure><h4 id="5-使用数据库"><a href="#5-使用数据库" class="headerlink" title="5.使用数据库"></a>5.使用数据库</h4><p>*查询当前正在使用得数据库名称：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">database</span>()</span>; <br></code></pre></td></tr></table></figure><p>*使用数据库：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">use 数据库名称<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="二、操作表"><a href="#二、操作表" class="headerlink" title="二、操作表"></a>二、操作表</h2><h4 id="1-创建-1"><a href="#1-创建-1" class="headerlink" title="1.创建"></a>1.创建</h4><p>①语法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">create</span> <span class="hljs-built_in">table</span> 表名（<br>列名<span class="hljs-number">1</span> 数据类型<span class="hljs-number">1</span>,<br>列名<span class="hljs-number">2</span> 数据类型<span class="hljs-number">2</span>,<br>…<br>）;<br></code></pre></td></tr></table></figure><p>②数据类型：</p><ul><li>int  整数类型</li><li>double  小数类型</li><li>data  日期：yyyy-MM-dd</li><li>datatime  日期（含年月日时分秒）: yyy-MM-dd HH:mm:ss</li><li>varchar  字符串</li></ul><p>③复制表：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">like</span> 被复制得表名;<br></code></pre></td></tr></table></figure><h4 id="2-查询-1"><a href="#2-查询-1" class="headerlink" title="2.查询"></a>2.查询</h4><p>*查询某个数据库中所有得表名称：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br></code></pre></td></tr></table></figure><p>*查询表结构：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">desc 表名<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="3-修改-1"><a href="#3-修改-1" class="headerlink" title="3.修改"></a>3.修改</h4><p>*修改表名：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">rename</span> <span class="hljs-keyword">to</span> 新得表名;<br></code></pre></td></tr></table></figure><p>*修改表得字符集：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> 字符集名称;<br></code></pre></td></tr></table></figure><p>*添加一列：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> 列名 新数据类型;<br></code></pre></td></tr></table></figure><p>*修改列名称 类型：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 change 列名 新列别 新数据类型;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">modify</span> 列名 新数据类型;<br></code></pre></td></tr></table></figure><p>*删除列：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> 列名;<br></code></pre></td></tr></table></figure><h4 id="4-删除-1"><a href="#4-删除-1" class="headerlink" title="4.删除"></a>4.删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> 表名;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> 表名;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SQL语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-02 (结构型模式)</title>
    <link href="/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><p>&#x3D;&gt;结构型模式(Structural Parttern)描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。</p><p>结构型模式可以分为<strong>类结构型模式</strong>和<strong>对象结构型模式。</strong></p><blockquote><p>类结构型模式：</p></blockquote><p>关心类的组合，有多个类可以组合成一个更大的系统，在类结构型模式中一般存在继承和实现关系。</p><blockquote><p>对象结构型模式:</p></blockquote><p>关心类与对象的组合，通过关联关系是的在一个类中定义另一个类的实例化对象，然后通过该对象调用其方法。</p><p>由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性。</p><p><strong>结构型模式分为以下7种：</strong></p><ul><li>代理模式</li><li>适配器模式</li><li>装饰者模式</li><li>桥接模式</li><li>外观模式</li><li>组合模式</li><li>享元模式</li></ul><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>&#x3D;&gt; 由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这是访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p><p>Java中的代理按照代理类生成时机不同又分为<strong>静态代理</strong>和<strong>动态代理</strong>。静态代理代理类在编译期就生成，而动态代理类则是在Java运行时动态生成。<strong>动态代理又有JDK代理和CGLib代理两种</strong>。</p><p><strong>结构</strong></p><ul><li><p>抽象主题类(Subject)：通过接口或抽象类声明真实主题和代理对象实现的业务方法。</p></li><li><p>真实主题类(Real Subject)：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</p></li><li><p>代理类(Proxy)：提供了与真实主题类相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真是主题的功能。</p></li></ul><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象主题类 ， 卖票类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SellTickets</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//真实主题类， 火车站类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrainStation</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SellTickets</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;火车站卖票&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//代理类， 代理点类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyPoint</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SellTickets</span>&#123;<br>    <span class="hljs-comment">//声明火车站类对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">TrainStation</span> <span class="hljs-variable">trainStation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrainStation</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;代理点收取一些服务费用&quot;</span>);<br>        trainStation.sell();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接访问的是ProxyPoint类对象，也就是说ProxyPoint 作为访问对象和目标对象的中介。同时也对sell方法进行了增强(代理点收取一些费用)</p><h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><p>Java中提供了动态代理类Proxy, Proxy 并不是我们上述所说的代理对象类，而是提供了一个创建代理对象的静态方法(newProxyInstance方法)来获取代理对象。</p><p>new ProxyInstance() 三个参数和invoke() 的三个参数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br>    <span class="hljs-comment">//声明目标对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">TrainStation</span> <span class="hljs-variable">station</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrainStation</span>();<br><br>    <span class="hljs-comment">//获取代理对象的方法</span><br>    <span class="hljs-keyword">public</span> SellTickets <span class="hljs-title function_">getProxyObject</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//返回代理对象</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            ClassLoader loader, 类加载器，用于加载代理类。可以通过目标对象获取类加载器</span><br><span class="hljs-comment">            Class&lt;?&gt;[] interfaces,  代理类实现的接口的字节码对象</span><br><span class="hljs-comment">            InvocationHandler h     代理对象的调用处理程序</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">SellTickets</span> <span class="hljs-variable">proxyObject</span> <span class="hljs-operator">=</span> (SellTickets) Proxy.newProxyInstance(<br>                station.getClass().getClassLoader(),<br>                station.getClass().getInterfaces(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                        Object proxy: 代理对象。和proxyObject对象是同一个对象，在invoke方法中基本不用</span><br><span class="hljs-comment">                        Method method: 对接口中的方法进行封装的method</span><br><span class="hljs-comment">                        Object[] args: 调用方法的实际参数</span><br><span class="hljs-comment">                        返回值： 方法的返回值。</span><br><span class="hljs-comment">                     */</span><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-comment">//System.out.println(&quot;invoke方法执行了&quot;);</span><br>                        System.out.println(<span class="hljs-string">&quot;代售点收取服务费(jdk动态代理)&quot;</span>);<br>                        <span class="hljs-comment">//执行目标对象的方法</span><br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> method.invoke(station,args);<br><br>                        <span class="hljs-keyword">return</span> obj;<br>                    &#125;<br>                &#125;<br>        );<br>        <span class="hljs-keyword">return</span> proxyObject;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行流程：</p><ol><li>在测试类中通过代理对象调用sell()方法</li><li>根据多态的特性，执行的是代理类($Proxy0)中的sell()方法</li><li>代理类($Proxy0)中的sell()方法中又调用了InvocationHandler接口的子实现类对象的invoke方法</li><li>invoke方法通过反射执行了真实对象所属类(TrainStation)中的sell()方法</li></ol><h4 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h4><p>如果没有定义SellTickets 接口，只定义了TrainStation(火车站类)。显然JDK代理就无法使用了。因为JDK动态代理要求必须定义接口，对接口进行代理。</p><p><strong>CGLIB?</strong>   &#x3D;&gt; 一个功能强大，高性能代码生成包。它没有实现接口的类提供代理，为JDK动态代理提供了很好的补充。</p><p>是第三方提供的包，需要导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><br>    <span class="hljs-comment">//声明火车站对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">TrainStation</span> <span class="hljs-variable">station</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrainStation</span>();<br><br>    <span class="hljs-keyword">public</span> TrainStation <span class="hljs-title function_">getProxyObject</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建Enhancer对象，类似于JDK代理中的Proxy类</span><br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        <span class="hljs-comment">//设置父类的字节码对象</span><br>        enhancer.setSuperclass(TrainStation.class);<br>        <span class="hljs-comment">//设置回调函数</span><br>        enhancer.setCallback(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">//创建代理对象</span><br>        <span class="hljs-type">TrainStation</span> <span class="hljs-variable">proxyObject</span> <span class="hljs-operator">=</span> (TrainStation) enhancer.create();<br>        <span class="hljs-keyword">return</span> proxyObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//System.out.println(&quot;方法执行了&quot;);</span><br>        <span class="hljs-comment">//代理业务代码</span><br>        System.out.println(<span class="hljs-string">&quot;cglib代售点收取一定的服务费用&quot;</span>);<br>        <span class="hljs-comment">//要调用目标对象的方法</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> method.invoke(station,objects);<br><br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>&#x3D;&gt; 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</p><p>​适配器模式分为<strong>类适配器模式</strong>和<strong>对象适配器模式</strong>，前者类之间的耦合度比后者高，且要求程序员了解组件库中的相关组件的内部结构，所以应用相对较少一些。</p><p><strong>结构：</strong></p><ul><li>目标接口(Target)：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>适配者类(Adaptee)：它是被访问和适配的现存组件库中的组件接口。</li><li>适配器类(Adapter)：它是一个转换器，通过继承或引用适配者类的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ul><h4 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h4><p>&#x3D;&gt;定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已存在的组件。</p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220803164954498.png" alt="image-20220803164954498" style="zoom: 67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SDAdapterTF</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TFCardImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SDCard</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">readSD</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;adapter read tf card&quot;</span>);<br>        <span class="hljs-keyword">return</span> readTF();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeSD</span><span class="hljs-params">(String msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;adapter write tf card&quot;</span>);<br>        writeTF(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类适配器模式违背了合成复用原则。类适配器是客户类有一个接口规范的情况下可用，反之不可用。</p><h4 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SDAdapterTF</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SDCard</span> &#123;<br>    <span class="hljs-comment">//声明适配者类</span><br>    <span class="hljs-keyword">private</span> TFCard tfCard;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SDAdapterTF</span><span class="hljs-params">(TFCard tfCard)</span>&#123;<br>        <span class="hljs-built_in">this</span>.tfCard = tfCard;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">readSD</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;adapter read tf card&quot;</span>);<br>        <span class="hljs-keyword">return</span> tfCard.readTF();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeSD</span><span class="hljs-params">(String msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;adapter write tf card&quot;</span>);<br>        tfCard.writeTF(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br>        <span class="hljs-comment">//读取SD卡数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span>  computer.readSD(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SDCardImpl</span>());<br>        System.out.println(msg);<br>        System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>        <span class="hljs-comment">//使用该电脑读取TF卡中的数据</span><br>        <span class="hljs-comment">//创建适配器类对象</span><br>        <span class="hljs-type">SDAdapterTF</span> <span class="hljs-variable">sdAdapterTF</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SDAdapterTF</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TFCardImpl</span>());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg1</span> <span class="hljs-operator">=</span> computer.readSD(sdAdapterTF);<br>        System.out.println(msg1);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>注意：还有一个适配器模式是接口适配器模式。当不希望实现一个接口中所有的方法时，可以创建一个抽象类Adapter ,实现所有方法。而此时我们只需要继承该抽象类即可。</p></blockquote><h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><ul><li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。</li><li>使用第三方提供的组件，但接口定义和自己要求的接口定义不同。</li></ul><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>&#x3D;&gt;在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式，它属于对象结构型模式。</p><p><strong>使用继承的缺点：</strong></p><ul><li>扩展性不好</li><li>产生过多的子类</li></ul><p><strong>结构：</strong></p><ul><li>抽象构件角色：定义一个抽象接口以规范准备接受附加责任的对象</li><li>具体构件角色：实现抽象构件，通过装饰角色为其添加一些职责</li><li>抽象装饰角色：继承或实现抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li>具体装饰角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220807160349273.png" alt="image-20220807160349273"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastFood</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> price; <span class="hljs-comment">//价格</span><br>    <span class="hljs-keyword">private</span> String desc; <span class="hljs-comment">//描述</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FastFood</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FastFood</span><span class="hljs-params">(<span class="hljs-type">float</span> price, String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">float</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDesc</span><span class="hljs-params">(String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FriedNoodles</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FastFood</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FriedNoodles</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;炒面&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getPrice();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FriedRice</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FastFood</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FriedRice</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;炒饭&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getPrice();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Garnish</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FastFood</span>&#123;<br><br>    <span class="hljs-comment">//声明快餐类的变量</span><br>    <span class="hljs-keyword">private</span> FastFood fastFood;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Garnish</span><span class="hljs-params">(<span class="hljs-type">float</span> price, String desc, FastFood fastFood)</span> &#123;<br>        <span class="hljs-built_in">super</span>(price, desc);<br>        <span class="hljs-built_in">this</span>.fastFood = fastFood;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> FastFood <span class="hljs-title function_">getFastFood</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fastFood;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFastFood</span><span class="hljs-params">(FastFood fastFood)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fastFood = fastFood;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Egg</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Garnish</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Egg</span><span class="hljs-params">(FastFood fastFood)</span>&#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;鸡蛋&quot;</span>,fastFood);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getPrice() + getFastFood().cost();<span class="hljs-comment">//计算价格</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getDesc() + getFastFood().getDesc();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bacon</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Garnish</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Bacon</span><span class="hljs-params">(FastFood fastFood)</span>&#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;培根&quot;</span>,fastFood);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getPrice() + getFastFood().cost();<span class="hljs-comment">//计算价格</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getDesc() + getFastFood().getDesc();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>![image-20220807163139218] 设计模式-02-结构型模式&#x2F;image-20220807163139218.png)</p><blockquote><p>装饰者模式的好处</p><ul><li>装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用</li><li>通过使用不用装饰类及这些装饰类的排列组合，可以实现不同效果</li><li>装饰器模式完全遵守开闭原则</li></ul></blockquote><h4 id="JDK源码解析"><a href="#JDK源码解析" class="headerlink" title="JDK源码解析"></a>JDK源码解析</h4><p> IO流中的包装类使用到了装饰者模式。BufferedInputSteam,BufferedOutputStream,BufferedReader,BufferedWriteter。</p><p><strong>BufferedWriter</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//创建BufferedWriter对象</span><br>        <span class="hljs-comment">//创建FileWriter对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fw);<br>        <span class="hljs-comment">//写数据</span><br>        bw.write(<span class="hljs-string">&quot;hello world&quot;</span>);<br>        bw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220807163920897.png" alt="image-20220807163920897"></p><h4 id="静态代理和装饰者模式的区别"><a href="#静态代理和装饰者模式的区别" class="headerlink" title="静态代理和装饰者模式的区别"></a>静态代理和装饰者模式的区别</h4><ul><li><p>相同点：</p><ol><li>都要实现与目标类相同的业务接口</li><li>在两个类中都要声明目标对象</li><li>都可以在不修改目标类的前提下增强目标方法</li></ol></li><li><p>不同点：</p><ol><li><p>目的不同。</p><p>装饰者是为了增强目标对象</p><p>静态代理是为了保护和隐藏目标对象</p></li><li><p>获取目标对象构建的地方不同</p><p>装饰者是由外界传递进来的，可以通过构造方法传递</p><p>静态代理是在代理类内部创建的，以此来隐藏目标对象</p></li></ol></li></ul><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>&#x3D;&gt; 将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</p><p><strong>结构：</strong></p><ul><li>抽象化角色：定义抽象类，并包含一个对实现化对象的引用。</li><li>扩展抽象化角色：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li><li>实现化角色：定义实现化角色的接口，供扩展抽象化角色调用</li><li>具体实现化角色：给出实现化角色接口的具体实现</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220807165337037.png" alt="image-20220807165337037"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">VideoFile</span> &#123;<br>    <span class="hljs-comment">//解码功能</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(String fileName)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RmvbFile</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">VideoFile</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(String fileName)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;rmvb视频文件： &quot;</span> + fileName);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AviFile</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">VideoFile</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(String fileName)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;avi视频文件：&quot;</span> + fileName);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpratingSystem</span> &#123;<br>    <span class="hljs-comment">//声明videoFile</span><br>    <span class="hljs-keyword">protected</span> VideoFile videoFile;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OpratingSystem</span><span class="hljs-params">(VideoFile videoFile)</span>&#123;<br>        <span class="hljs-built_in">this</span>.videoFile = videoFile;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">(String fileName)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Windows</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OpratingSystem</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Windows</span><span class="hljs-params">(VideoFile videoFile)</span> &#123;<br>        <span class="hljs-built_in">super</span>(videoFile);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">(String fileName)</span> &#123;<br>        videoFile.decode(fileName);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mac</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OpratingSystem</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Mac</span><span class="hljs-params">(VideoFile videoFile)</span> &#123;<br>        <span class="hljs-built_in">super</span>(videoFile);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">(String fileName)</span> &#123;<br>        videoFile.decode(fileName);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建Mac系统</span><br>        <span class="hljs-type">OpratingSystem</span> <span class="hljs-variable">system</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mac</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AviFile</span>());<br>        <span class="hljs-comment">//使用操作系统播放视频文件</span><br>        system.play(<span class="hljs-string">&quot;战狼&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>好处：</strong></p><ul><li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。</li><li>实现细节对客户透明</li></ul><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>&#x3D;&gt; 又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用的复杂度，提高了程序的可维护性。</p><p>​外观模式（Facade）模式使“迪米特法则”的典型应用</p><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220807183900490.png" alt="image-20220807183900490"></p><p><strong>结构：</strong></p><ul><li>外观角色：为多个子系统对外提供一个共同的接口。</li><li>子系统角色：实现系统的部分功能，客户可以通过外观角色访问它。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220807184125961.png" alt="image-20220807184125961"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span> &#123;<br>    <span class="hljs-comment">//开灯</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打开电灯===&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//关灯</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;关闭电灯===&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TV</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打开电视机===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;关闭电视机===&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AirCondition</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打开空调===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;关闭空调===&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartAppliancesFacade</span> &#123;<br>    <span class="hljs-comment">//聚合电灯对象，电视机对象，空调对象</span><br>    <span class="hljs-keyword">private</span> Light light;<br>    <span class="hljs-keyword">private</span> TV tv;<br>    <span class="hljs-keyword">private</span> AirCondition airCondition;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SmartAppliancesFacade</span><span class="hljs-params">()</span> &#123;<br>        light = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Light</span>();<br>        tv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TV</span>();<br>        airCondition = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AirCondition</span>();<br>    &#125;<br>    <span class="hljs-comment">//通过语音控制</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-keyword">if</span> (message.contains(<span class="hljs-string">&quot;打开&quot;</span>))&#123;<br>            on();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (message.contains(<span class="hljs-string">&quot;关闭&quot;</span>))&#123;<br>            off();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;识别错误&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//一键打开功能</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>&#123;<br>        light.on();<br>        tv.on();<br>        airCondition.on();<br>    &#125;<br>    <span class="hljs-comment">//一键关闭</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>&#123;<br>        light.off();<br>        tv.off();<br>        airCondition.off();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>好处：</strong></p><ul><li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响用它的客户类。</li><li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li></ul><p><strong>缺点：</strong></p><ul><li>不符合开闭原则，修改很麻烦。</li></ul><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>&#x3D;&gt;又名整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次，这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><p><strong>结构：</strong></p><ul><li>抽象根节点：定义系统各层次对象的共有方法和属性，可以预先定义一些默认行为和属性。</li><li>树枝节点：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构。</li><li>叶子节点：叶子节点对象，其下再无分支，是系统层次遍历的最小单位。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220808014052335.png" alt="image-20220808014052335"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MenuComponent</span> &#123;<br>    <span class="hljs-comment">//菜单组件的名称</span><br>    <span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-comment">//菜单组件的层级</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> level;<br><br>    <span class="hljs-comment">//添加子菜单</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(MenuComponent menuComponent)</span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//移除子菜单</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(MenuComponent menuComponent)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//获取指定的子菜单</span><br>    <span class="hljs-keyword">public</span> MenuComponent <span class="hljs-title function_">getChild</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//获取菜单或者菜单项的名称</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-comment">//打印菜单名称的方法（包含子菜单和子菜单项）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Menu</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MenuComponent</span> &#123;<br>    <span class="hljs-comment">//菜单可以有多个子菜单或者子菜单项</span><br>    <span class="hljs-keyword">private</span> List&lt;MenuComponent&gt; menuComponentList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;MenuComponent&gt;();<br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Menu</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> level)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.level = level;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(MenuComponent menuComponent)</span> &#123;<br>        menuComponentList.add(menuComponent);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(MenuComponent menuComponent)</span> &#123;<br>        menuComponentList.remove(menuComponent);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> MenuComponent <span class="hljs-title function_">getChild</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> menuComponentList.get(index);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//先打印菜单名称</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; level; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == level - <span class="hljs-number">1</span>) System.out.print(<span class="hljs-string">&quot; -&quot;</span>);<br>            <span class="hljs-keyword">else</span> System.out.print(<span class="hljs-string">&quot;  &quot;</span>);<br>        &#125;<br>        System.out.println(name);<br>        <span class="hljs-comment">//打印子菜单或者子菜单项名称</span><br>        <span class="hljs-keyword">for</span> (MenuComponent component : menuComponentList) &#123;<br>            component.print();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MenuItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MenuComponent</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MenuItem</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> level)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.level = level;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; level; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == level - <span class="hljs-number">1</span>) System.out.print(<span class="hljs-string">&quot; -&quot;</span>);<br>            <span class="hljs-keyword">else</span> System.out.print(<span class="hljs-string">&quot;  &quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//打印菜单项名称</span><br>        System.out.println(name);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建菜单数</span><br>        <span class="hljs-type">MenuComponent</span> <span class="hljs-variable">menu1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-string">&quot;菜单管理&quot;</span>,<span class="hljs-number">2</span>);<br>        menu1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;页面访问&quot;</span>,<span class="hljs-number">3</span>));<br>        menu1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;展开菜单&quot;</span>,<span class="hljs-number">3</span>));<br>        menu1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;编辑菜单&quot;</span>,<span class="hljs-number">3</span>));<br>        menu1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;删除菜单&quot;</span>,<span class="hljs-number">3</span>));<br>        menu1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;新增菜单&quot;</span>,<span class="hljs-number">3</span>));<br><br>        <span class="hljs-type">MenuComponent</span> <span class="hljs-variable">menu2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-string">&quot;权限管理&quot;</span>,<span class="hljs-number">2</span>);<br>        menu2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;页面访问&quot;</span>,<span class="hljs-number">3</span>));<br>        menu2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;提交保存&quot;</span>,<span class="hljs-number">3</span>));<br><br>        <span class="hljs-type">MenuComponent</span> <span class="hljs-variable">menu3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-string">&quot;角色管理&quot;</span>,<span class="hljs-number">2</span>);<br>        menu3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;页面访问&quot;</span>,<span class="hljs-number">3</span>));<br>        menu3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;新增角色&quot;</span>,<span class="hljs-number">3</span>));<br>        menu3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;修改角色&quot;</span>,<span class="hljs-number">3</span>));<br><br>        <span class="hljs-comment">//创建一级菜单</span><br>        <span class="hljs-type">MenuComponent</span> <span class="hljs-variable">component</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-string">&quot;系统管理&quot;</span>,<span class="hljs-number">1</span>);<br>        component.add(menu1);<br>        component.add(menu2);<br>        component.add(menu3);<br><br>        component.print();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220808165148522.png" alt="image-20220808165148522"></p><h4 id="组合模式的分类"><a href="#组合模式的分类" class="headerlink" title="组合模式的分类"></a>组合模式的分类</h4><p>在使用组合模式时，根据抽象构件类的定义形式，我们将组合模式分为透明组合模式和安全组合模式两种形式</p><ul><li><p>透明组合模式</p><p>透明组合模式中，抽象根节点角色中声明了所有用于管理成员对象的方法，比如示例中MenuComponent 声明了 add、remove、getchild 方法，这样做的好处是确保所有的构件类都有相同的接口。透明组合模式也是组合模式的标准形式。</p><p>透明组合模式的缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能有下一个层次的对象，即不可能包含成员对象，因此为其提供add()、remove()等方法是没有意义的，这在编译阶段不会出错，但在运行阶段如果调用这些方法可能会出错。</p></li><li><p>安全组合模式</p><p>在安全组合模式中，在抽象构件角色中没有声明任何用于管理成员对象的方法，而是在树枝节点Menu类中声明并实现这些方法。安全组合模式的缺点是不够透明，因为叶子构件和容器构件具有不同的方法，且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义，因此客户端不能完全针对抽象编程，必须有区别地对待叶子构件和容器构件。</p></li></ul><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>&#x3D;&gt; 运用共享技术来有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似对象的开销，从而提高系统资源的利用率。</p><p><strong>结构：</strong></p><p>其中，享元模式存在以下两种状态：</p><ol><li>内部状态，既不会随着环境改变而改变的可共享部分。</li><li>外部状态，指随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。</li></ol><p>享元模式的主要有以下角色：</p><ul><li>抽象享元角色：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）。</li><li>具体享元角色：它实现了抽象享元类，称为享元对象；在具体享元类中为内部状态提供了存储空间。通常我们可以结合单例模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。</li><li>非享元角色：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过实例化创建。</li><li>享元工厂角色：负责创建和管理享元角色。当客户对象请求一个享元对象时，享元工厂检查系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220808022500925.png" alt="image-20220808022500925"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象享元角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractBox</span> &#123;<br>    <span class="hljs-comment">//获取图形的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getShape</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//显示图形及颜色</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">(String color)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方块形状：&quot;</span> +  getShape() + <span class="hljs-string">&quot;, 颜色：&quot;</span> + color);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//具体享元角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractBox</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getShape</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractBox</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getShape</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;L&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractBox</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getShape</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//享元工厂角色 饿汉式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BoxFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> HashMap&lt;String,AbstractBox&gt; map;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">BoxFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BoxFactory</span>();<br><br>    <span class="hljs-comment">//在构造方法中进行初始化操作</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">BoxFactory</span><span class="hljs-params">()</span>&#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,AbstractBox&gt;();<br>        map.put(<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">IBox</span>());<br>        map.put(<span class="hljs-string">&quot;L&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">LBox</span>());<br>        map.put(<span class="hljs-string">&quot;O&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">OBox</span>());<br>    &#125;<br>    <span class="hljs-comment">//根据名称获取图形对象</span><br>    <span class="hljs-keyword">public</span> AbstractBox <span class="hljs-title function_">getShape</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> map.get(name);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BoxFactory <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>极大减少内存中相似或相同对象的数量，节约系统资源，提供系统性能</li><li>享元模式中的外部状态相对独立，且不影响内部状态</li></ul><p><strong>缺点：</strong></p><ul><li>为了使对象可以共享，需要将享元对象的部分状态外部化，分离内部状态和外部状态，使程序逻辑复杂</li></ul><p><strong>使用场景：</strong></p><ul><li>一个系统有大量相同或相似的对象，造成内存的大量消耗。</li><li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。</li><li>在使用享元模式时需要维护一个存储享元对象的享元池，而这需要耗费一定的系统资源，因此，应当在需要多次重复使用享元模式对象时才值得使用享元模式。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>32种设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-03 (行为型模式)</title>
    <link href="/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><p>&#x3D;&gt; 行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。</p><p>行为型模式分为<strong>类行为模式</strong>和<strong>对象行为模式</strong>，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足”合成复用原则“，所以对象行为模式比类行为模式具有更大的灵活性。</p><p><strong>行为型模式分为：</strong></p><ul><li>模板方法模式</li><li>策略模式</li><li>命令模式</li><li>职责链模式</li><li>状态模式</li><li>观察者模式</li><li>中介者模式</li><li>迭代器模式</li><li>访问者模式</li><li>备忘录模式</li><li>解释器模式</li></ul><p>以上11种行为型模式，除了模板方法模式和解释器模式是类行为型模式，其他的全部属于对象行为型模式。</p><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p>&#x3D;&gt; 定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</p><p><strong>结构：</strong></p><ul><li><p>抽象类：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。</p><ul><li><p>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。</p></li><li><p>基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三种：</p><ul><li><p>抽象方法：一个抽象方法由抽象类声明，由其具体子类实现</p></li><li><p>具体方法：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。</p></li><li><p>钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。</p><p>一般钩子方法是用于判断的逻辑方法，这类方法名一般为：isXxxx，返回值类型为boolean类型。</p></li></ul></li></ul></li><li><p>具体子类：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。</p></li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220808203855759.png" alt="image-20220808203855759"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象类（定义模板方法和基本方法）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractClass</span> &#123;<br>    <span class="hljs-comment">//模板方法定义,算法过程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cookProcess</span><span class="hljs-params">()</span>&#123;<br>        pourOil();<br>        heatOil();<br>        pourVegetable();<br>        pourSauce();<br>        fry();<br>    &#125;<br>    <span class="hljs-comment">//具体方法和抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourOil</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;倒油&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//第二步，热油是一样的所以直接实现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heatOil</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;热油&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//第三步倒蔬菜是不一样的（下包菜和下菜心）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourVegetable</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//第四步：到调味料是不一样的</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourSauce</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//第五步，翻炒是一样的。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;翻炒====&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteClass_BaoCai</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractClass</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourVegetable</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;下锅的是包菜&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourSauce</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;下锅的酱料是辣椒&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteClass_CaiXin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractClass</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourVegetable</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;下锅的是菜心&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourSauce</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;下锅的酱料是蒜蓉&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//炒包菜</span><br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">ConcreteClass_BaoCai</span> <span class="hljs-variable">baoCai</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteClass_BaoCai</span>();<br>        baoCai.cookProcess();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li><p>提高了代码复用性</p><p>将相同部分的代码放在抽象的父类中，而将不同的代码放入不同的子类中。</p></li><li><p>实现了反向控制</p><p>通过一个父类调用子类的操作，通过对子类的具体实现扩展不同的行为，实现了反向控制，并符合”开闭原则“。</p></li></ul><p><strong>缺点：</strong></p><ul><li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。</li><li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种方向的控制结构，它提供了代码阅读的难度。</li></ul><p><strong>适用场景：</strong></p><ul><li>算法整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。</li><li>需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。</li></ul><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>&#x3D;&gt; 该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来并委派给不同的对象对这些算法进行管理。</p><p><strong>结构：</strong></p><ul><li>抽象策略(Strategy)类：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li><li>具体策略(Concrete Strategy)类：实现了抽象策略定义的接口，提供具体的算法实现或行为。</li><li>环境(Context)类：持有一个策略类的引用，最终给客户端调用</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220808210256121.png" alt="image-20220808210256121"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象策略类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Strategy</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//策略A</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StrategyA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;买一送一&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//策略B</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StrategyB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;满两百减五十&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//策略C</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StrategyC</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;满一千元加一元换购任意200元以下商品&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//环境类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SalesMan</span> &#123;<br>    <span class="hljs-comment">//聚合策略类对象</span><br>    <span class="hljs-keyword">private</span> Strategy strategy;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SalesMan</span><span class="hljs-params">(Strategy strategy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strategy = strategy;<br>    &#125;<br>    <span class="hljs-comment">//由促销员展示促销活动</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">salesManShow</span><span class="hljs-params">()</span>&#123;<br>        strategy.show();<br>    &#125;<br>    <span class="hljs-keyword">public</span> Strategy <span class="hljs-title function_">getStrategy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> strategy;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStrategy</span><span class="hljs-params">(Strategy strategy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strategy = strategy;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//春季，使用春季促销活动</span><br>        <span class="hljs-type">SalesMan</span> <span class="hljs-variable">man</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SalesMan</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StrategyA</span>());<br>        <span class="hljs-comment">//展示促销活动</span><br>        man.salesManShow();<br>        System.out.println(<span class="hljs-string">&quot;===================&quot;</span>);<br>        <span class="hljs-comment">//夏季特卖</span><br>        man.setStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StrategyB</span>());<br>        man.salesManShow();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li><p>策略类之间可以自由切换</p><p>由于策略类都实现同一个接口，所以使它们之间可以自由切换。</p></li><li><p>易于扩展</p><p>增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合”开闭原则“。</p></li><li><p>避免使用多重条件选择语句（if else）,充分体现面向对象设计思想。</p></li></ul><p><strong>缺点：</strong></p><ul><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li><li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li></ul><p><strong>使用场景</strong></p><ul><li>一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。</li><li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句。</li><li>系统中个算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时。</li><li>系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与此相关的数据结构。</li><li>多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</li></ul><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>&#x3D;&gt; 将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分隔开。这样两者之间通过命令对象进行沟通，这样方便将命令对象进行存储、传递、调用、增加与管理。</p><p><strong>结构：</strong></p><ul><li>抽象命令类（Command）角色：定义命令的接口，声明执行的方法。</li><li>具体命令（Concrete Command）角色：具体的命令，实现命令接口；通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。</li><li>实现者&#x2F;接收者（Receiver）角色：接收者，真正执行命令的对象。任何一个类都可能成为一个接收者，只要它能够实现命令要求实现的相应功能。</li><li>调用者&#x2F;请求者（Invoker）角色：要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。这个是客户端真正触发命令并要求命令执行相应操作的地方，也就是说相当于使用命令对象的入口。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220808213600911.png" alt="image-20220808213600911"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-comment">//餐桌号码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> diningTable;<br>    <span class="hljs-comment">//所下的餐品及份数</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,Integer&gt; foodDir = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Integer&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDiningTable</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> diningTable;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDiningTable</span><span class="hljs-params">(<span class="hljs-type">int</span> diningTable)</span> &#123;<br>        <span class="hljs-built_in">this</span>.diningTable = diningTable;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Map&lt;String, Integer&gt; <span class="hljs-title function_">getFoodDir</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> foodDir;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFood</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> num)</span> &#123;<br>        foodDir.put(name,num);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//抽象命令类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//具体命令类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span>&#123;<br>    <span class="hljs-comment">//持有接收者对象</span><br>    <span class="hljs-keyword">private</span> SeniorChef receiver;<br>    <span class="hljs-keyword">private</span> Order order;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderCommand</span><span class="hljs-params">(SeniorChef receiver, Order order)</span> &#123;<br>        <span class="hljs-built_in">this</span>.receiver = receiver;<br>        <span class="hljs-built_in">this</span>.order = order;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(order.getDiningTable() + <span class="hljs-string">&quot;桌的订单：&quot;</span>);<br>        Map&lt;String, Integer&gt; foodDir = order.getFoodDir();<br>        <span class="hljs-comment">//遍历map集合</span><br>        Set&lt;String&gt; keys = foodDir.keySet();<br>        <span class="hljs-keyword">for</span> (String foodName : keys) &#123;<br>            receiver.makeFood(foodName,foodDir.get(foodName));<br>        &#125;<br>        System.out.println(order.getDiningTable() + <span class="hljs-string">&quot;桌的饭准备完毕&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//接收者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeniorChef</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeFood</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> num)</span>&#123;<br>        System.out.println(num + <span class="hljs-string">&quot;份&quot;</span> + name);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//调用者角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Waitor</span> &#123;<br>    <span class="hljs-comment">//持有多个命令对象</span><br>    <span class="hljs-keyword">private</span> List&lt;Command&gt; commands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Command&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCommands</span><span class="hljs-params">(Command cmd)</span>&#123;<br>        <span class="hljs-comment">//将cmd对象存储到List中</span><br>        commands.add(cmd);<br>    &#125;<br>    <span class="hljs-comment">//发起命令功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">orderUp</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;新订单==========&quot;</span>);<br>        <span class="hljs-comment">//遍历list集合</span><br>        <span class="hljs-keyword">for</span> (Command command : commands) &#123;<br>            <span class="hljs-keyword">if</span> (command != <span class="hljs-literal">null</span>)&#123;<br>                command.execute();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建第一个订单对象</span><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order1.setDiningTable(<span class="hljs-number">1</span>);<br>        order1.setFood(<span class="hljs-string">&quot;炒米粉&quot;</span>,<span class="hljs-number">1</span>);<br>        order1.setFood(<span class="hljs-string">&quot;柠乐&quot;</span>,<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">//创建第二个订单对象</span><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order2.setDiningTable(<span class="hljs-number">2</span>);<br>        order2.setFood(<span class="hljs-string">&quot;干炒牛河&quot;</span>,<span class="hljs-number">2</span>);<br>        order2.setFood(<span class="hljs-string">&quot;丝袜奶茶&quot;</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//创建厨师对象</span><br>        <span class="hljs-type">SeniorChef</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SeniorChef</span>();<br>        <span class="hljs-comment">//创建命令对象</span><br>        <span class="hljs-type">OrderCommand</span> <span class="hljs-variable">cmd1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderCommand</span>(receiver,order1);<br>        <span class="hljs-type">OrderCommand</span> <span class="hljs-variable">cmd2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderCommand</span>(receiver,order2);<br>        <span class="hljs-comment">//创建调用者</span><br>        <span class="hljs-type">Waitor</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Waitor</span>();<br>        invoke.setCommands(cmd1);<br>        invoke.setCommands(cmd2);<br>        <span class="hljs-comment">//发起命令</span><br>        invoke.orderUp();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220809010200609.png" alt="image-20220809010200609"></p><p><strong>优点：</strong></p><ul><li>降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。</li><li>增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足”开闭原则“。对扩展比较灵活。</li><li>可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。</li><li>方便实现Undo和Redo操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销与恢复。</li></ul><p><strong>缺点：</strong></p><ul><li>使用命令模式可能会导致某些系统又过多的具体命令类。</li><li>系统结构更加复杂。</li></ul><p><strong>适用场景：</strong></p><ul><li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li><li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li><li>系统需要支持命令的撤销（Undo）操作和恢复（Redo）操作。</li></ul><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>&#x3D;&gt; 又名职责链模式，为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，知道有对象处理它为止。</p><p><strong>结构：</strong></p><ul><li>抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后续连接。</li><li>具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后续在。</li><li>客户（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220810144134109.png" alt="image-20220810144134109"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//请假条类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeaveRequest</span> &#123;<br>    <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//请假天数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num;<br>    <span class="hljs-comment">//请假内容</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LeaveRequest</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> num, String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.num = num;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//抽象处理者类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">Num_ONE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">Num_THREE</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">Num_SEVEN</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>    <span class="hljs-comment">//该领导处理的请求天数区间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numStart;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numEnd;<br>    <span class="hljs-comment">//声明后续者（声明上级领导）</span><br>    <span class="hljs-keyword">private</span> Handler nextHandler;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Handler</span><span class="hljs-params">(<span class="hljs-type">int</span> numStart)</span> &#123;<br>        <span class="hljs-built_in">this</span>.numStart = numStart;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Handler</span><span class="hljs-params">(<span class="hljs-type">int</span> numStart, <span class="hljs-type">int</span> numEnd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.numStart = numStart;<br>        <span class="hljs-built_in">this</span>.numEnd = numEnd;<br>    &#125;<br>    <span class="hljs-comment">//设置上级领导对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNextHandler</span><span class="hljs-params">(Handler nextHandler)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nextHandler = nextHandler;<br>    &#125;<br>    <span class="hljs-comment">//各级领导处理请求条的方法</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLeave</span><span class="hljs-params">(LeaveRequest leaveRequest)</span>;<br>    <span class="hljs-comment">//提交请假条</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">submit</span><span class="hljs-params">(LeaveRequest leave)</span> &#123;<br>        <span class="hljs-comment">//该领导进行审批</span><br>        <span class="hljs-built_in">this</span>.handleLeave(leave);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.nextHandler != <span class="hljs-literal">null</span> &amp;&amp; leave.getNum() &gt; <span class="hljs-built_in">this</span>.numEnd) &#123;<br>            <span class="hljs-comment">//提交给上级领导进行审批</span><br>            <span class="hljs-built_in">this</span>.nextHandler.submit(leave);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;流程结束&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//具体处理者类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GroupLeader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GroupLeader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-number">0</span>,Handler.Num_ONE);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLeave</span><span class="hljs-params">(LeaveRequest leaveRequest)</span> &#123;<br>        System.out.println(leaveRequest.getName() + <span class="hljs-string">&quot;请假&quot;</span> + leaveRequest.getNum() + <span class="hljs-string">&quot;天&quot;</span> + leaveRequest.getContent());<br>        System.out.println(<span class="hljs-string">&quot;小组长审批：同意&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Manager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(Handler.Num_ONE,Handler.Num_THREE);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLeave</span><span class="hljs-params">(LeaveRequest leaveRequest)</span> &#123;<br>        System.out.println(leaveRequest.getName() + <span class="hljs-string">&quot;请假&quot;</span> + leaveRequest.getNum() + <span class="hljs-string">&quot;天&quot;</span> + leaveRequest.getContent());<br>        System.out.println(<span class="hljs-string">&quot;部门经理审批：同意&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GeneralManager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GeneralManager</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>(Handler.Num_THREE,Handler.Num_SEVEN);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLeave</span><span class="hljs-params">(LeaveRequest leaveRequest)</span> &#123;<br>        System.out.println(leaveRequest.getName() + <span class="hljs-string">&quot;请假&quot;</span> + leaveRequest.getNum() + <span class="hljs-string">&quot;天&quot;</span> + leaveRequest.getContent());<br>        System.out.println(<span class="hljs-string">&quot;总经理审批：同意&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个请假条对象</span><br>        <span class="hljs-type">LeaveRequest</span> <span class="hljs-variable">leaveRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LeaveRequest</span>(<span class="hljs-string">&quot;ming&quot;</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&quot;身体不适&quot;</span>);<br>        <span class="hljs-comment">//创建各级领导对象</span><br>        <span class="hljs-type">GroupLeader</span> <span class="hljs-variable">groupLeader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupLeader</span>();<br>        <span class="hljs-type">Manager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>();<br>        <span class="hljs-type">GeneralManager</span> <span class="hljs-variable">generalManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeneralManager</span>();<br>        <span class="hljs-comment">//设置处理者链</span><br>        manager.setNextHandler(generalManager);<br>        groupLeader.setNextHandler(manager);<br>        <span class="hljs-comment">//提交申请</span><br>        groupLeader.submit(leaveRequest);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li><p>降低了对象之间的耦合度</p><p>该模式降低了请求发送者和接收者的耦合度。</p></li><li><p>增强了系统的可扩展性</p><p>可根据需要增加新的请求处理类，满足开闭原则。</p></li><li><p>增强了给对象指派职责的灵活性</p><p>当工作流程发生变化，可以动态地改变链内的成员或者修改它们的次序，也可动态地新增或者删除责任。</p></li><li><p>责任链简化了对象之间的连接</p><p>一个对象只需保持一个指向其后续者的引用，不需保持其他所有处理者的引用，这次避免了使用众多的if 或者 if …else语句。</p></li><li><p>责任分担</p><p>每个类只需要处理自己该处理的工作，不能处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</p></li></ul><p><strong>缺点：</strong></p><ul><li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li><li>对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。</li><li>职责链建立的合理性要靠客户端来保证，增加了客户但的复杂性，可能由于职责链的错误设置而导致系统出错，如可能会造成循环调用。</li></ul><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>&#x3D;&gt; 对有状态的对象，把复杂的”判断逻辑“提取到不同的状态对象中。允许状态对象在其内部状态发生改变时改变其行为。</p><p><strong>在使用状态模式前：</strong></p><ul><li>使用了大量的switch…else这样的判断，使程序的可阅读性变差。</li><li>扩展性很差，如果新加了断电状态，我们就需要修改上面判断逻辑。</li></ul><p><strong>结构：</strong></p><ul><li>环境（Context）角色：也称为上下文，它定义了客户程序需要的接口，维护一个当前状态，并将与状态相关的操作委托给当前状态对象来处理。</li><li>抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为。</li><li>具体状态（Concrete State）角色：实现抽象状态所对应的行为。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220810161712095.png" alt="image-20220810161712095"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象状态类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LiftState</span> &#123;<br>    <span class="hljs-comment">//声明环境角色类变量</span><br>    <span class="hljs-keyword">protected</span> Context context;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContext</span><span class="hljs-params">(Context context)</span>&#123;<br>        <span class="hljs-built_in">this</span>.context = context;<br>    &#125;<br>    <span class="hljs-comment">//电梯开启操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//电梯关闭操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//电梯运行操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//电梯停止操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//环境角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-comment">//定义对应状态对象的常量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">OpeningState</span> <span class="hljs-variable">OPENING_STATE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpeningState</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ClosingState</span> <span class="hljs-variable">CLOSING_STATE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClosingState</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">RunningState</span> <span class="hljs-variable">RUNNING_STATE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunningState</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">StoppingState</span> <span class="hljs-variable">STOPPING_STATE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StoppingState</span>();<br>    <span class="hljs-comment">//定义当前状态变量</span><br>    <span class="hljs-keyword">private</span> LiftState liftState;<br><br>    <span class="hljs-keyword">public</span> LiftState <span class="hljs-title function_">getLiftState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> liftState;<br>    &#125;<br>    <span class="hljs-comment">//设置当前状态对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLiftState</span><span class="hljs-params">(LiftState liftState)</span> &#123;<br>        <span class="hljs-built_in">this</span>.liftState = liftState;<br>        <span class="hljs-comment">//设置当前状态对象中的Context</span><br>        <span class="hljs-built_in">this</span>.liftState.setContext(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.liftState.open();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.liftState.close();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.liftState.stop();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.liftState.run();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//开启状态类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpeningState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LiftState</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;电梯开启。。。&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//修改状态</span><br>        <span class="hljs-built_in">super</span>.context.setLiftState(Context.CLOSING_STATE);<br>        <span class="hljs-comment">//调用当前状态中的context中的close方法</span><br>        <span class="hljs-built_in">super</span>.context.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//do nothing</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//do nothing</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//关闭状态类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClosingState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LiftState</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.context.setLiftState(Context.OPENING_STATE);<br>        <span class="hljs-built_in">super</span>.context.open();<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;电梯关门。。。&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.context.setLiftState(Context.RUNNING_STATE);<br>        <span class="hljs-built_in">super</span>.context.run();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.context.setLiftState(Context.STOPPING_STATE);<br>        <span class="hljs-built_in">super</span>.context.stop();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//运行状态类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunningState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LiftState</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//do nothing</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//do nothing</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;电梯正在运行。。。&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.context.setLiftState(Context.STOPPING_STATE);<br>        <span class="hljs-built_in">super</span>.context.stop();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//停止状态类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StoppingState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LiftState</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//状态修改</span><br>        <span class="hljs-built_in">super</span>.context.setLiftState(Context.OPENING_STATE);<br>        <span class="hljs-built_in">super</span>.context.open();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.context.setLiftState(Context.CLOSING_STATE);<br>        <span class="hljs-built_in">super</span>.context.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.context.setLiftState(Context.RUNNING_STATE);<br>        <span class="hljs-built_in">super</span>.context.run();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;电梯停止了。。。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建环境角色对象</span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        <span class="hljs-comment">//设置当前状态</span><br>        context.setLiftState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RunningState</span>());<br>        context.open();<br>        context.close();<br>        context.run();<br>        context.stop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>将所有某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。</li><li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。</li></ul><p><strong>缺点：</strong></p><ul><li>状态模式的使用必然会增加系统类和对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码混乱。</li><li>状态模式对”开闭原则“的支持并不太好。</li></ul><p><strong>使用场景</strong></p><ul><li>当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式。</li><li>一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时。</li></ul><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>&#x3D;&gt; 又被称为发布-订阅（Publish&#x2F;Subscribe）模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。</p><p><strong>结构：</strong></p><ul><li>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li><li>Observer：抽象观察者，是观察者的抽象类，它定义了一个更新接口，使得到主题更改通知时更新自己。</li><li>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便得到主题更改通知时更新自身状态。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220810170412498.png" alt="image-20220810170412498"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象主题角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-comment">//添加订阅者（添加观察者对象）</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Observer observer)</span>;<br>    <span class="hljs-comment">//删除订阅者</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Observer observer)</span>;<br>    <span class="hljs-comment">//通知订阅者更新消息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><span class="hljs-comment">//具体主题角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubscriptionSubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span>&#123;<br>    <span class="hljs-comment">//定义一个集合，用来存储多个观察者对象</span><br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; weiXinUserList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Observer&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        weiXinUserList.add(observer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        weiXinUserList.remove(observer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">//遍历集合</span><br>        <span class="hljs-keyword">for</span> (Observer observer : weiXinUserList) &#123;<br>            <span class="hljs-comment">//调用观察者对象中的update方法</span><br>            observer.update(message);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//抽象观察者类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String observer)</span>;<br>&#125;<br><span class="hljs-comment">//具体观察者角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeiXinUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WeiXinUser</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;-&quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1、创建公众号对象</span><br>        <span class="hljs-type">SubscriptionSubject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubscriptionSubject</span>();<br>        <span class="hljs-comment">//2、订阅公众号</span><br>        subject.attach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeiXinUser</span>(<span class="hljs-string">&quot;ming&quot;</span>));<br>        subject.attach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeiXinUser</span>(<span class="hljs-string">&quot;tt&quot;</span>));<br>        subject.attach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeiXinUser</span>(<span class="hljs-string">&quot;zz&quot;</span>));<br>        <span class="hljs-comment">//3、公众号更新，发出消息给订阅者（观察者对象）</span><br>        subject.notify(<span class="hljs-string">&quot;有新消息更新！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。</li><li>被观察者发送通知，所有注册的观察者都会收到信息【可以实现广播机制】</li></ul><p><strong>缺点：</strong></p><ul><li>如果观察者非常多的话，那么所有的观察者收到被观察者发送的通知会耗时。</li><li>如果被观察者有循环依赖的话，那么被观察者发送通知会使观察者循环调用，会导致系统崩溃。</li></ul><p><strong>使用场景</strong></p><ul><li>对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。</li><li>当一个抽象模型有两个方面，其中一个方面依赖于另一方面时。</li></ul><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><p>&#x3D;&gt; 又叫调停模式，定义一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。</p><p><strong>结构：</strong></p><ul><li>抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。</li><li>具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个List来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</li><li>抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。</li><li>具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220810173928431.png" alt="image-20220810173928431"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象中介者类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">constact</span><span class="hljs-params">(String message,Person person)</span>;<br>&#125;<br><span class="hljs-comment">//抽象同事类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-keyword">protected</span> Mediator mediator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, Mediator mediator)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.mediator = mediator;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//具体的同事角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tenant</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tenant</span><span class="hljs-params">(String name, Mediator mediator)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, mediator);<br>    &#125;<br>    <span class="hljs-comment">//和中介联系</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">constact</span><span class="hljs-params">(String message)</span>&#123;<br>        mediator.constact(message,<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-comment">//获取信息的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMessage</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;租房子&quot;</span> + name + <span class="hljs-string">&quot;获取到的信息时：&quot;</span> + message);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//具体同事角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseOwner</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HouseOwner</span><span class="hljs-params">(String name, Mediator mediator)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, mediator);<br>    &#125;<br>    <span class="hljs-comment">//和中介联系</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">constact</span><span class="hljs-params">(String message)</span>&#123;<br>        mediator.constact(message,<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-comment">//获取信息的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMessage</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;房主&quot;</span> + name + <span class="hljs-string">&quot;获取到的信息时：&quot;</span> + message);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//具体的中介者角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MediatorStructure</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mediator</span>&#123;<br>    <span class="hljs-comment">//聚合房主和租房者对象</span><br>    <span class="hljs-keyword">private</span> HouseOwner houseOwner;<br>    <span class="hljs-keyword">private</span> Tenant tenant;<br><br>    <span class="hljs-keyword">public</span> HouseOwner <span class="hljs-title function_">getHouseOwner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> houseOwner;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHouseOwner</span><span class="hljs-params">(HouseOwner houseOwner)</span> &#123;<br>        <span class="hljs-built_in">this</span>.houseOwner = houseOwner;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Tenant <span class="hljs-title function_">getTenant</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> tenant;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTenant</span><span class="hljs-params">(Tenant tenant)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tenant = tenant;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">constact</span><span class="hljs-params">(String message, Person person)</span> &#123;<br>        <span class="hljs-keyword">if</span> (person == houseOwner)&#123;<br>            tenant.getMessage(message);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            houseOwner.getMessage(message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建中介者对象</span><br>        <span class="hljs-type">MediatorStructure</span> <span class="hljs-variable">mediator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediatorStructure</span>();<br>        <span class="hljs-comment">//创建租房者对象</span><br>        <span class="hljs-type">Tenant</span> <span class="hljs-variable">tenant</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tenant</span>(<span class="hljs-string">&quot;李四&quot;</span>,mediator);<br>        <span class="hljs-comment">//创建房主对象</span><br>        <span class="hljs-type">HouseOwner</span> <span class="hljs-variable">houseOwner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseOwner</span>(<span class="hljs-string">&quot;张三&quot;</span>,mediator);<br>        <span class="hljs-comment">//中介者要知道具体的房主和租房者</span><br>        mediator.setTenant(tenant);<br>        mediator.setHouseOwner(houseOwner);<br><br>        tenant.constact(<span class="hljs-string">&quot;需要租三室的房子&quot;</span>);<br>        houseOwner.constact(<span class="hljs-string">&quot;我这里由三室的房子，u need ?&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li><p>松散耦合</p><p>中介者模式通过把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦合，基本上可以做到互补依赖。这样一来，同事对象就可以独立地变化和复用，而不再像以前那样”牵一处而动全身“了。</p></li><li><p>集中控制交互</p><p>多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者对象就可以了，当然如果是已经做好的系统，那么就扩展中介者对象，而各个同事类不需要做修改。</p></li><li><p>一对多关联转变为一对一的关联</p><p>没有使用中介者模式的时候，同事对象之间的关系通常是一对多，引入中介者模式后，中介者对象和同事对象的关系通常变成双向的一对一，这会让对象的关系更容易理解和实现。</p></li></ul><p><strong>缺点：</strong></p><ul><li>当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，以至于系统难以维护。</li></ul><p><strong>适用场景</strong></p><ul><li>系统对象之间存在复杂的引用关系，系统结构混乱且难以理解。</li><li>当想创建一个运行于多个类之间的对象，又不想生成新的子类时。</li></ul><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p>&#x3D;&gt; 提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</p><p><strong>结构：</strong></p><ul><li>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。</li><li>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</li><li>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含hasNext()、next()等方法。</li><li>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220811004906347.png" alt="image-20220811004906347"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//学生类省略</span><br><span class="hljs-comment">//....</span><br><span class="hljs-comment">//抽象迭代器角色接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentIterator</span> &#123;<br>    <span class="hljs-comment">//判断是否还有元素</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//获取下一个元素</span><br>    Student <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<br><br>&#125;<br><span class="hljs-comment">//具体迭代器角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentIteratorImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentIterator</span>&#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; list;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//用来记录遍历时的位置</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StudentIteratorImpl</span><span class="hljs-params">(List&lt;Student&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> position &lt; list.size();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Student <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//从集合中获取指定位置的元素</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> list.get(position);<br>        position ++;<br>        <span class="hljs-keyword">return</span> current;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//抽象聚合角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentAggregate</span> &#123;<br>    <span class="hljs-comment">//添加学生功能</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student stu)</span>;<br>    <span class="hljs-comment">//删除学生功能</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeStudent</span><span class="hljs-params">(Student stu)</span>;<br>    <span class="hljs-comment">//获取迭代器对象功能</span><br>    StudentIterator <span class="hljs-title function_">getStudentIterator</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//具体聚合角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentAggregateImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentAggregate</span>&#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Student&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student stu)</span> &#123;<br>        list.add(stu);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeStudent</span><span class="hljs-params">(Student stu)</span> &#123;<br>        list.remove(stu);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> StudentIterator <span class="hljs-title function_">getStudentIterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentIteratorImpl</span>(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建聚合对象</span><br>        <span class="hljs-type">StudentAggregateImpl</span> <span class="hljs-variable">aggregate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentAggregateImpl</span>();<br>        <span class="hljs-comment">//添加元素</span><br>        aggregate.addStudent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;001&quot;</span>));<br>        aggregate.addStudent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;002&quot;</span>));<br>        aggregate.addStudent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;003&quot;</span>));<br>        aggregate.addStudent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵六&quot;</span>,<span class="hljs-string">&quot;004&quot;</span>));<br>        <span class="hljs-comment">//遍历聚合对象</span><br>        <span class="hljs-comment">//1、获取迭代器对象</span><br>        <span class="hljs-type">StudentIterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> aggregate.getStudentIterator();<br>        <span class="hljs-comment">//2、遍历</span><br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            <span class="hljs-comment">//3、获取元素</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(stu.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。在迭代器模式中只需要用一个不同的迭代器来替换原有迭代器即可改变遍历算法，我们也可以自己定义迭代器的子类以支持新的遍历方式。</li><li>迭代器简化了聚合类。由于引入了迭代器，在原有的聚合对象中不需要再自行提供数据遍历等方法，这样可以简化聚合类的设计。</li><li>在迭代器模式中，由于引入了抽象层，增加新的聚合类和迭代器都很方便，无须修改原有代码，满足”开闭原则“的要求。</li></ul><p><strong>缺点：</strong></p><ul><li>增加了类的个数，这在一定程度上增加了系统的复杂性。</li></ul><p><strong>使用场景</strong></p><ul><li>当需要为聚合对象提供多种遍历方式时。</li><li>当需要为遍历不同的聚合结构提供一个统一的接口时。</li><li>当访问一个聚合对象的内容而无须暴露其内部细节的表示时。</li></ul><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>&#x3D;&gt; 封装一些作用于某种数据结构中的个元素操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新操作。</p><p><strong>结构：</strong></p><ul><li>抽象访问者（Visitor）角色：定义了对每一个元素（Element）访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素个数（Element的实现类个数）是一样的，从这点不难看出，访问者模式要求元素类的个数不能改变。</li><li>具体访问者（ConcreteVisitor）角色：给出对每一个元素类访问时所产生的具体行为。</li><li>抽象元素（Element）角色：定义了一个接受访问者的方法（accept），其意义是指，每一个元素都要可以被访问者访问。</li><li>具体元素（ConcreteElement）角色：提供接受访问方法的具体实现，而这个具体实现，通常情况下是使用访问者提供的访问该元素类的方法。</li><li>对象结构（Object Structure）角色：定义当中所提到的对象结构，对象结构是一个抽象表述，具体点可以理解为一个具有容器性质或者符合对象特性的类，它会含有一组元素（Element），并且可以迭代这些元素，供访问者访问。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220811014638956.png" alt="image-20220811014638956"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象访问者角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">//喂食宠物猫</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Cat cat)</span>;<br>    <span class="hljs-comment">//喂食宠物狗</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Dog dog)</span>;<br>&#125;<br><span class="hljs-comment">//具体元素角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Person person)</span> &#123;<br>        person.feed(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//访问者给宠物猫喂食</span><br>        System.out.println(<span class="hljs-string">&quot;喵喵喵&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//具体元素角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Person person)</span> &#123;<br>        person.feed(<span class="hljs-built_in">this</span>);<br>        System.out.println(<span class="hljs-string">&quot;汪汪汪&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//抽象元素角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">//接受访问者访问的功能</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Person person)</span>;<br>&#125;<br><span class="hljs-comment">//具体访问者角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Owner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Cat cat)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;主人喂食猫&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Dog dog)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;主任喂食狗&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//具体访问者角色类（其他人）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Someone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Cat cat)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;其他人喂食猫&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Dog dog)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;其他人喂食狗&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//对象结构类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span> &#123;<br>    <span class="hljs-comment">//声明一个集合对象，用来存储元素对象</span><br>    <span class="hljs-keyword">private</span> List&lt;Animal&gt; nodeList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Animal&gt;();<br>    <span class="hljs-comment">//添加元素功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Animal animal)</span>&#123;<br>        nodeList.add(animal);<br>    &#125;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">action</span><span class="hljs-params">(Person person)</span>&#123;<br>        <span class="hljs-comment">//遍历集合获取每一个元素，让访问者访问每一个元素</span><br>        <span class="hljs-keyword">for</span> (Animal animal : nodeList) &#123;<br>            animal.accept(person);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建Home对象</span><br>        <span class="hljs-type">Home</span> <span class="hljs-variable">home</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Home</span>();<br>        <span class="hljs-comment">//添加元素到Home对象中</span><br>        home.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>());<br>        home.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>());<br>        <span class="hljs-comment">//创建主人对象</span><br>        <span class="hljs-type">Owner</span> <span class="hljs-variable">owner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Owner</span>();<br>        <span class="hljs-comment">//让主人喂食所有宠物</span><br>        home.action(owner);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li><p>扩展性好</p><p>在不修改对象结构中的元素的情况下，为对象结构中的元素添加新功能。</p></li><li><p>复用性好</p><p>通过访问者来定义整个对象结构通用的功能，从而提高复用程度。</p></li><li><p>分离无关行为</p><p>通过访问者来分离无关的行为，把相关的行为封装在一起，构成一个访问者，这样每一个访问者的功能都比较单一。</p></li></ul><p><strong>缺点：</strong></p><ul><li><p>对象结构变化很困难</p><p>在访问者模式中，每增加过一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”。</p></li><li><p>违反了依赖倒置原则</p><p>访问者模式依赖了具体类，而没有依赖抽象类。</p></li></ul><p><strong>使用场景</strong></p><ul><li>对象结构相对稳定，但其操作算法经常变化的程序。</li><li>对象结构中的对象需要提供多种不同且不相关的操作，而且要避免让这些操作的变化影响对象的结构。</li></ul><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><p>&#x3D;&gt; 又叫快照模式，在不被破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。</p><p><strong>结构：</strong></p><ul><li>发起人（Originator）角色：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里所有信息。</li><li>备忘录（Memento）角色：负责存储发起人的内部状态，在需要时提供这些内部状态给发起人。</li><li>管理者（Caretaker）角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。</li></ul><p><strong>备忘录由两个等效接口：</strong></p><blockquote><p>窄接口</p></blockquote><p>管理者（Caretaker）对象（和其他发起人对象之外的任何对象）看到的时备忘录的窄接口（narror Interface），这个窄接口只允许他把备忘录对象传给其他的对象。</p><blockquote><p>宽接口</p></blockquote><p>与管理者看到的窄接口相反，发起人对象可以看到一个宽接口（wide Interface），这个接口允许它读取所有的数据，以便根据这些数据恢复这个发起人对象的内部状态。</p><h4 id="“白箱”备忘录模式"><a href="#“白箱”备忘录模式" class="headerlink" title="“白箱”备忘录模式"></a>“白箱”备忘录模式</h4><p>备忘录角色对任何对象都提供一个接口，即宽接口。备忘录角色的内部所存储的状态就对所有对象公开。</p><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220812143443451.png" alt="image-20220812143443451"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//发起人角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameRole</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> vit;<span class="hljs-comment">//生命力</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> atk;<span class="hljs-comment">//攻击力</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> def; <span class="hljs-comment">//防御力</span><br><br>    <span class="hljs-comment">//初始化内部状态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initState</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.vit = <span class="hljs-number">100</span>;<br>        <span class="hljs-built_in">this</span>.atk = <span class="hljs-number">100</span>;<br>        <span class="hljs-built_in">this</span>.def = <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-comment">//战斗</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fight</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.vit = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.atk = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.def = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//保存角色状态功能</span><br>    <span class="hljs-keyword">public</span> RoleStateMemento <span class="hljs-title function_">saveState</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoleStateMemento</span>(vit,atk,def);<br>    &#125;<br>    <span class="hljs-comment">//恢复角色状态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recoverState</span><span class="hljs-params">(RoleStateMemento roleStateMemento)</span>&#123;<br>        <span class="hljs-comment">//将备忘录对象中存储的状态赋值给当前对象的成员</span><br>        <span class="hljs-built_in">this</span>.vit = roleStateMemento.getVit();<br>        <span class="hljs-built_in">this</span>.atk = roleStateMemento.getAtk();<br>        <span class="hljs-built_in">this</span>.def = roleStateMemento.getDef();<br>    &#125;<br><br>    <span class="hljs-comment">//展示状态功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stateDisplay</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;角色生命力：&quot;</span> + vit);<br>        System.out.println(<span class="hljs-string">&quot;角色攻击力：&quot;</span> + atk);<br>        System.out.println(<span class="hljs-string">&quot;角色防御力：&quot;</span> + def);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> vit;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVit</span><span class="hljs-params">(<span class="hljs-type">int</span> vit)</span> &#123;<br>        <span class="hljs-built_in">this</span>.vit = vit;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAtk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAtk</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDef</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> def;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDef</span><span class="hljs-params">(<span class="hljs-type">int</span> def)</span> &#123;<br>        <span class="hljs-built_in">this</span>.def = def;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//备忘录角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleStateMemento</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> vit;<span class="hljs-comment">//生命力</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> atk;<span class="hljs-comment">//攻击力</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> def; <span class="hljs-comment">//防御力</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RoleStateMemento</span><span class="hljs-params">(<span class="hljs-type">int</span> vit, <span class="hljs-type">int</span> atk, <span class="hljs-type">int</span> def)</span> &#123;<br>        <span class="hljs-built_in">this</span>.vit = vit;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>        <span class="hljs-built_in">this</span>.def = def;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RoleStateMemento</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> vit;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVit</span><span class="hljs-params">(<span class="hljs-type">int</span> vit)</span> &#123;<br>        <span class="hljs-built_in">this</span>.vit = vit;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAtk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAtk</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDef</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> def;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDef</span><span class="hljs-params">(<span class="hljs-type">int</span> def)</span> &#123;<br>        <span class="hljs-built_in">this</span>.def = def;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//备忘录对象管理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleStateCaretaker</span> &#123;<br>    <span class="hljs-comment">//声明RoleStateMemento 类型的变量</span><br>    <span class="hljs-keyword">private</span> RoleStateMemento roleStateMemento;<br><br>    <span class="hljs-keyword">public</span> RoleStateMemento <span class="hljs-title function_">getRoleStateMemento</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> roleStateMemento;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoleStateMemento</span><span class="hljs-params">(RoleStateMemento roleStateMemento)</span> &#123;<br>        <span class="hljs-built_in">this</span>.roleStateMemento = roleStateMemento;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------大战boss前------------&quot;</span>);<br>        <span class="hljs-comment">//创建游戏角色对象</span><br>        <span class="hljs-type">GameRole</span> <span class="hljs-variable">g1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GameRole</span>();<br>        g1.initState();<span class="hljs-comment">//初始状态操作</span><br>        g1.stateDisplay();<br>        <span class="hljs-comment">//将状态备份</span><br>        <span class="hljs-type">RoleStateCaretaker</span> <span class="hljs-variable">roleStateCaretaker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoleStateCaretaker</span>();<br>        roleStateCaretaker.setRoleStateMemento(g1.saveState());<br>        System.out.println(<span class="hljs-string">&quot;-----------大战boss后------------&quot;</span>);<br>        g1.fight();<br>        g1.stateDisplay();<br>        System.out.println(<span class="hljs-string">&quot;-----------恢复------------&quot;</span>);<br>        g1.recoverState(roleStateCaretaker.getRoleStateMemento());<br>        g1.stateDisplay();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="”黑箱“备忘录模式"><a href="#”黑箱“备忘录模式" class="headerlink" title="”黑箱“备忘录模式"></a>”黑箱“备忘录模式</h4><p>备忘录角色对发起人对象提供一个宽接口，而为其他对象提供一个窄接口。在Java语言中，实现双重接口的办法就是将备忘录类设计成发起人类的内部成员类。</p><p>将<code>RoleStateMemeto</code>设为<code>GameRole</code>的内部类，从而将<code>RoleStateMemento</code>对象封装在<code>GameRole</code>里面；在外面提供一个标识接口<code>Memento</code>给<code>RoleStateCaretaker</code>及其他对象使用。这样<code>GameRole</code>类看到的是<code>RoleStateMemento</code> 所有接口，而<code>RoleStateCaretaker</code> 及其他对象看到的仅仅是标识接口<code>Memento</code> 所暴露出来的接口，从而维护了封装性。</p><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220812155623820.png" alt="image-20220812155623820"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//备忘录接口，对外提供窄接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Memento</span> &#123;<br><br>&#125;<br><span class="hljs-comment">//发起人角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameRole</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> vit;<span class="hljs-comment">//生命力</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> atk;<span class="hljs-comment">//攻击力</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> def; <span class="hljs-comment">//防御力</span><br><br>    <span class="hljs-comment">//初始化内部状态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initState</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.vit = <span class="hljs-number">100</span>;<br>        <span class="hljs-built_in">this</span>.atk = <span class="hljs-number">100</span>;<br>        <span class="hljs-built_in">this</span>.def = <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-comment">//战斗</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fight</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.vit = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.atk = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.def = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//保存角色状态功能</span><br>    <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">saveState</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoleStateMemento</span>(vit,atk,def);<br>    &#125;<br>    <span class="hljs-comment">//恢复角色状态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recoverState</span><span class="hljs-params">(Memento memento)</span>&#123;<br>        <span class="hljs-type">RoleStateMemento</span> <span class="hljs-variable">roleStateMemento</span> <span class="hljs-operator">=</span> (RoleStateMemento) memento;<br>        <span class="hljs-comment">//将备忘录对象中存储的状态赋值给当前对象的成员</span><br>        <span class="hljs-built_in">this</span>.vit = roleStateMemento.getVit();<br>        <span class="hljs-built_in">this</span>.atk = roleStateMemento.getAtk();<br>        <span class="hljs-built_in">this</span>.def = roleStateMemento.getDef();<br>    &#125;<br><br>    <span class="hljs-comment">//展示状态功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stateDisplay</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;角色生命力：&quot;</span> + vit);<br>        System.out.println(<span class="hljs-string">&quot;角色攻击力：&quot;</span> + atk);<br>        System.out.println(<span class="hljs-string">&quot;角色防御力：&quot;</span> + def);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> vit;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVit</span><span class="hljs-params">(<span class="hljs-type">int</span> vit)</span> &#123;<br>        <span class="hljs-built_in">this</span>.vit = vit;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAtk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAtk</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDef</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> def;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDef</span><span class="hljs-params">(<span class="hljs-type">int</span> def)</span> &#123;<br>        <span class="hljs-built_in">this</span>.def = def;<br>    &#125;<br><span class="hljs-comment">//在内部将定义静态备忘录角色并将其私有化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleStateMemento</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Memento</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> vit;<span class="hljs-comment">//生命力</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> atk;<span class="hljs-comment">//攻击力</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> def; <span class="hljs-comment">//防御力</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">RoleStateMemento</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">RoleStateMemento</span><span class="hljs-params">(<span class="hljs-type">int</span> vit, <span class="hljs-type">int</span> atk, <span class="hljs-type">int</span> def)</span> &#123;<br>            <span class="hljs-built_in">this</span>.vit = vit;<br>            <span class="hljs-built_in">this</span>.atk = atk;<br>            <span class="hljs-built_in">this</span>.def = def;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVit</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> vit;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVit</span><span class="hljs-params">(<span class="hljs-type">int</span> vit)</span> &#123;<br>            <span class="hljs-built_in">this</span>.vit = vit;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAtk</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> atk;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAtk</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span> &#123;<br>            <span class="hljs-built_in">this</span>.atk = atk;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDef</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> def;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDef</span><span class="hljs-params">(<span class="hljs-type">int</span> def)</span> &#123;<br>            <span class="hljs-built_in">this</span>.def = def;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//备忘录对象管理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleStateCaretaker</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Memento memento;<br><br>    <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">getMemento</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> memento;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMemento</span><span class="hljs-params">(Memento memento)</span> &#123;<br>        <span class="hljs-built_in">this</span>.memento = memento;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------大战boss前------------&quot;</span>);<br>        <span class="hljs-comment">//创建游戏角色对象</span><br>        <span class="hljs-type">GameRole</span> <span class="hljs-variable">g1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GameRole</span>();<br>        g1.initState();<span class="hljs-comment">//初始状态操作</span><br>        g1.stateDisplay();<br>        <span class="hljs-comment">//将状态备份</span><br>        <span class="hljs-type">RoleStateCaretaker</span> <span class="hljs-variable">roleStateCaretaker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoleStateCaretaker</span>();<br>        roleStateCaretaker.setMemento(g1.saveState());<br>        System.out.println(<span class="hljs-string">&quot;-----------大战boss后------------&quot;</span>);<br>        g1.fight();<br>        g1.stateDisplay();<br>        System.out.println(<span class="hljs-string">&quot;-----------恢复------------&quot;</span>);<br>        g1.recoverState(roleStateCaretaker.getMemento());<br>        g1.stateDisplay();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态。</li><li>实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息。</li><li>简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理，这符合单一职责原则。</li></ul><p><strong>缺点：</strong></p><ul><li>资源消耗大，如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。</li></ul><p><strong>使用场景</strong></p><ul><li>需要保存于恢复数据的场景，如玩游戏时的中间结果的存档功能。</li><li>需要提供一个可回滚操作的场景，如word、记事本、Photoshop等软件在编辑时的撤销动作，还有数据库中事务操作。</li></ul><h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><p>&#x3D;&gt;  给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p><p>解释器模式中，我们需要将待解决的问题，提取出规则，抽象为一种”语言“。比如加减法运算，规则为：由数值和+-符号组成的合法序列，”1+3-3“就是这种语言的句子。</p><p>而解释器就是要解析出来语句的含义。</p><blockquote><p>抽象语法树</p></blockquote><p>​在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p><p>​&#x3D;&gt;   之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似于if-condition-then这样的条件跳转语句，可以使用带有两个分支的节点来表示。<br>和抽象语法树相对的是具体语法树（通常称作分析树）。一般的，在源代码的翻译和编译过程中，语法分析器创建出分析树。一旦AST被创建出来，在后续的处理过程中，比如语义分析阶段，会添加一些信息。</p><p><strong>结构：</strong></p><ul><li>抽象表达式（Abstract Expression）角色：定义解释器的接口，约定解释器的解释操作，主要包含解释方法 interpret()。</li><li>终结符表达式（Terminal Expression）角色：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。</li><li>环境（Context）角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。</li><li>客户端类（Cilent）：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的方法，当然也可以通过环境角色间接访问解释器的解释方法。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/image-20220812162844592.png" alt="image-20220812162844592"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//封装变量类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Variable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractExpression</span> &#123;<br>    <span class="hljs-comment">//声明存储变量名的成员变量</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Variable</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-comment">//直接返回变量的值</span><br>        <span class="hljs-keyword">return</span> context.getValue(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//抽象表达式类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractExpression</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context context)</span>;<br>&#125;<br><span class="hljs-comment">//加法表达式类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Plus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractExpression</span>&#123;<br>    <span class="hljs-comment">//+号左边的表达式</span><br>    <span class="hljs-keyword">private</span> AbstractExpression left;<br>    <span class="hljs-comment">//+号右边的表达式</span><br>    <span class="hljs-keyword">private</span> AbstractExpression right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Plus</span><span class="hljs-params">(AbstractExpression left, AbstractExpression right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-comment">//将左边表达式的结果和右边表达式的结果进行相加</span><br>        <span class="hljs-keyword">return</span> left.interpret(context) + right.interpret(context);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(&quot;</span> + left.toString() + <span class="hljs-string">&quot; + &quot;</span> + right.toString() + <span class="hljs-string">&quot;)&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//减法表达式类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Minus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractExpression</span>&#123;<br>    <span class="hljs-comment">//-号左边的表达式</span><br>    <span class="hljs-keyword">private</span> AbstractExpression left;<br>    <span class="hljs-comment">//-号右边的表达式</span><br>    <span class="hljs-keyword">private</span> AbstractExpression right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Minus</span><span class="hljs-params">(AbstractExpression left, AbstractExpression right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-comment">//将左边表达式的结果和右边表达式的结果进行相减</span><br>        <span class="hljs-keyword">return</span> left.interpret(context) - right.interpret(context);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(&quot;</span> + left.toString() + <span class="hljs-string">&quot; - &quot;</span> + right.toString() + <span class="hljs-string">&quot;)&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//环境角色类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-comment">//定义一个map集合，存储变量及对应的值</span><br>    <span class="hljs-keyword">private</span> Map&lt;Variable,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Variable,Integer&gt;();<br><span class="hljs-comment">//    添加变量的功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">assign</span><span class="hljs-params">(Variable <span class="hljs-keyword">var</span>,Integer value)</span>&#123;<br>        map.put(<span class="hljs-keyword">var</span>,value);<br>    &#125;<br>    <span class="hljs-comment">//根据变量获取对应的值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">(Variable <span class="hljs-keyword">var</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> map.get(<span class="hljs-keyword">var</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建环境对象</span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        <span class="hljs-comment">//创建多个变量对象</span><br>        <span class="hljs-type">Variable</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Variable</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Variable</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Variable</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>        <span class="hljs-type">Variable</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Variable</span>(<span class="hljs-string">&quot;c&quot;</span>);<br>        <span class="hljs-type">Variable</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Variable</span>(<span class="hljs-string">&quot;d&quot;</span>);<br>        <span class="hljs-comment">//将变量存储到环境对象中</span><br>        context.assign(a,<span class="hljs-number">1</span>);<br>        context.assign(b,<span class="hljs-number">2</span>);<br>        context.assign(c,<span class="hljs-number">3</span>);<br>        context.assign(d,<span class="hljs-number">4</span>);<br>        <span class="hljs-comment">//获取抽象语法树 a + b - c + d</span><br>        <span class="hljs-type">AbstractExpression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Minus</span>(a,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Plus</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Minus</span>(b,c),d)); <span class="hljs-comment">// a - [(b - c) + d]</span><br>        <span class="hljs-comment">//解释</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> expression.interpret(context);<br>        System.out.println(expression);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li><p>易于改变和扩展文法。</p><p>由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。每一条文法规则都可以表示为一个类，因此可以方便地实现一个简单的语言。</p></li><li><p>实现文法较为容易</p><p>在抽象语法数种每一个表达式节点类的实现方式都是相似的，这些类的代码编写都不会特别复杂。</p></li><li><p>增加新的解释表达式较为方便。</p><p>如果用户需要增加新的解释表达式只需要对应增加一个新的终结符表达式或非终结表达式类，原有表达式类代码无须修改，符合”开闭原则“。</p></li></ul><p><strong>缺点：</strong></p><ul><li><p>对于复杂文法难以维护</p><p>在解释器模式中，每一条规则至少需要定义一个类，因此如果一个言语包含太多文法规则，类的个数将会急剧增加，导致系统难以管理和维护。</p></li><li><p>执行效率较低</p><p>由于在解释器模式中使用了大量的循环和递归调用，因此在解释较为复杂的句子时其速度很慢，而且代码的调试过程也比较麻烦。</p></li></ul><p><strong>使用场景</strong></p><ul><li>当语言的文法较为简单，且执行效率不是关键问题时。</li><li>当问题重复出现，且可以用一种简单的语言来进行表达时。</li><li>当一个语言需要解释执行，并且语言中的句子可以表示为一个抽象语法树的时候。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>32种设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-01 (OOP及创建者模式)</title>
    <link href="/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="OOP七大原则"><a href="#OOP七大原则" class="headerlink" title="OOP七大原则"></a>OOP七大原则</h1><ul><li><strong>开闭原则</strong>：对扩展开放</li><li><strong>里氏替换原则</strong>：继承必须确保超类所拥有的性质在子类中仍然成立</li><li><strong>依赖倒置原则</strong>：要面向接口编程，不要面向实现编程</li><li><strong>单一职责原则</strong>：控制类的粒度大小、将对象解耦、提高其内聚性</li><li><strong>接口隔离原则</strong>：要为各个类建立它们需要的专用接口</li><li><strong>迪米特法则</strong>：只与你的直接朋友交谈，不跟“陌生人”说话</li><li><strong>合成复用原则</strong>：尽量先使用组合或聚合等关联关系来实现，其次才考虑使用继承关系来实现</li></ul><h1 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h1><p>创建型模式的主要关注点是”怎样创建对象？”，它的主要特点是”将对象的创建与使用分离”。</p><p>这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。</p><p>创建型模式分为：</p><ol><li>单例模式</li><li>工厂方法模式</li><li>抽象工程模式</li><li>原型模式</li><li>建造者模式</li></ol><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式(Singleton Pattern)是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p>单例模式的结构？</p><p>&#x3D;&gt;单例模式的主要有以下角色：</p><ul><li>单例类，只能创建一个实例的类</li><li>访问类，使用单例类</li></ul><blockquote><p>单例模式两种类型</p></blockquote><h4 id="1、饿汉式"><a href="#1、饿汉式" class="headerlink" title="1、饿汉式"></a>1、饿汉式</h4><p>类加载就会导致该单例对象被创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1、静态变量方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">//1.私有构造方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-comment">//2.在本类中创建本类对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    <span class="hljs-comment">//3.提供一个公共的访问方式，让外界获取该对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1、将自身构造方法私有化</span><br><span class="hljs-comment">     * 2、在本类中创建本类对象并赋值(要给予static关键字将其变为静态变量，否则在getInstance方法中无法将自身返回)</span><br><span class="hljs-comment">     * 3、提供一个公共方法，让外界获取该对象</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式2、静态代码块方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">//私有构造方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//声明Singleton类型的变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance; <span class="hljs-comment">//null</span><br><br>    <span class="hljs-comment">//在静态代码快中进行赋值</span><br>    <span class="hljs-keyword">static</span>&#123;<br>        instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//对外提供获取该类对象的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1、将构造方法私有</span><br><span class="hljs-comment">     * 2、声明自身类的类型变量 private static Singleton instance;</span><br><span class="hljs-comment">     * 3、在静态代码快中给自身类赋值</span><br><span class="hljs-comment">     * 4、对外提供获取自身类对象的方法：getInstance()</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、懒汉式"><a href="#2、懒汉式" class="headerlink" title="2、懒汉式"></a>2、懒汉式</h4><p>类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1、不加锁，多线程下不安全</span><br><span class="hljs-comment">//方式2、加入synchronized</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">//私有构造方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//声明Singleton 类型的变量instance</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance; <span class="hljs-comment">//只是声明一个该类型的变量并没有进行赋值，懒汉式是在首次使用时才进行创建</span><br>    <span class="hljs-comment">//对外提供访问方式</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//加判断进行创建</span><br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//如果在多线程下，线程一进入然后阻塞等待，线程2获得cpu执行权，也会进入到该判断里进行创建。这样导致多线程下不安全，所以要加上synchronized锁</span><br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式3、双重检查锁，对于getInstance()来说，绝大部分的操作都是读操作，而读操作是安全的，所以没必要让每个线程都持有锁。所以就诞生了双重检查锁方式</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//加入volatile关键字来让变量具有可见性，每次读取到的都是最新的值。避免双重检查模式带来空指针异常的问题。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//第一次判断,如果instance的值不为null 不需要抢占锁，直接返回对象</span><br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>                <span class="hljs-comment">//第二次判断</span><br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)&#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>静态内部类单例模式中实例由内部类创建，由于JVM 在加载外部类过程中是不会加载静态内部类的，只有内部类的属性&#x2F;方法被调用时才会被加载，并初始化其静态属性。静态属性由于被static修饰保证只能被智丽华一次，并且严格保证实例化顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式4，静态内部类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//定义一个静态内部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHolder</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonHolder.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上方式都可以通过反射等方式进行破解，所以极力推荐使用枚举类来实现单例模式，因为枚举类型在多线程下是安全的并且只会装载一次。枚举类是所用单例实现中唯一一种不会被破坏的单例实现模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span> &#123;<br>   INSTANCE;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>枚举方式属于饿汉式，应考虑不浪费内存空间下使用</p><h4 id="破坏单例模式"><a href="#破坏单例模式" class="headerlink" title="破坏单例模式"></a>破坏单例模式</h4><p>单例模式可以通过序列化和反射的方式进行破解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//懒汉式单例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMan</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">check</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LazyMan</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//加锁</span><br><span class="hljs-comment">//        synchronized (LazyMan.class)&#123;</span><br><span class="hljs-comment">//            if (lazyMan!=null)&#123;</span><br><span class="hljs-comment">//                throw new RuntimeException(&quot;不要试图使用反射破坏异常&quot;);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//增加 标志位 check</span><br>        <span class="hljs-keyword">synchronized</span> (LazyMan.class)&#123;<br>            <span class="hljs-keyword">if</span> (check == <span class="hljs-literal">false</span>)&#123;<br>                check = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;不要试图使用反射破坏异常&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> LazyMan lazyMan;<br><br>    <span class="hljs-comment">//双重检测锁模式 懒汉式单例 DCL懒汉式</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (lazyMan==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (LazyMan.class)&#123;<br>                <span class="hljs-keyword">if</span>(lazyMan==<span class="hljs-literal">null</span>)&#123;<br>                    lazyMan = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMan</span>(); <span class="hljs-comment">//不是原子性操作</span><br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 1、分配内存空间</span><br><span class="hljs-comment">                     * 2、执行构造方法，初始化对象</span><br><span class="hljs-comment">                     * 3、把这个对象指向这个空间</span><br><span class="hljs-comment">                     *</span><br><span class="hljs-comment">                     * 当多线程下， 线程A lazyman 还没有构造完毕，B线程进来，就会走lazyman!=null 所以需要加上volatile 避免指令重排和保证可见性。</span><br><span class="hljs-comment">                     */</span><br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> lazyMan;<br>    &#125;<br><br><br><span class="hljs-comment">//    //单线程下没问题，但多线程下会出问题，需要加锁</span><br><span class="hljs-comment">//    public static void main(String[] args) &#123;</span><br><span class="hljs-comment">//        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="hljs-comment">//            new Thread(()-&gt;&#123;</span><br><span class="hljs-comment">//                LazyMan.getInstance();</span><br><span class="hljs-comment">//            &#125;).start();</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">//反射获取！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        LazyMan instance = LazyMan.getInstance();</span><br><span class="hljs-comment">//        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(null);</span><br><span class="hljs-comment">//        declaredConstructor.setAccessible(true); //无视私有构造器</span><br><span class="hljs-comment">//        LazyMan instance2 = declaredConstructor.newInstance();</span><br><span class="hljs-comment">//        System.out.println(instance);</span><br><span class="hljs-comment">//        System.out.println(instance2);</span><br>        <span class="hljs-comment">//com.ming.single.LazyMan@1540e19d</span><br>        <span class="hljs-comment">//com.ming.single.LazyMan@677327b6</span><br>        <span class="hljs-comment">//解决办法：构造器加锁！</span><br><br><br><span class="hljs-comment">//        LazyMan instance = LazyMan.getInstance();</span><br>        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class="hljs-literal">null</span>);<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>); <span class="hljs-comment">//无视私有构造器</span><br>        <span class="hljs-type">LazyMan</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        <span class="hljs-type">LazyMan</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        System.out.println(instance1);<br>        System.out.println(instance2);<br><span class="hljs-comment">//        com.ming.single.LazyMan@1540e19d</span><br><span class="hljs-comment">//        com.ming.single.LazyMan@677327b6</span><br>        <span class="hljs-comment">//解决办法： 设置 一个标志位 private static boolean check = false;</span><br><br>        <span class="hljs-comment">//若找到内部设置的隐藏的变量仍可以破解： Field check = LazyMan.class.getDeclaredField(&quot;check&quot;);</span><br>        <span class="hljs-comment">//                               check.setAccessible(true);</span><br>        <span class="hljs-comment">//                               LazyMan instance1 = declaredConstructor.newInstance();</span><br>        <span class="hljs-comment">//                               check.set(instance,false);</span><br>        <span class="hljs-comment">//                               LazyMan instance2 = declaredConstructor.newInstance();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><p>单例模式除了枚举类可以被破解</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>咖啡店案例：</p><p>设计一个咖啡类(Coffee),并定义其两个子类(美式咖啡（AmericanCoffee）和拿铁咖啡(LatteCoffee);再这几一个咖啡类点(CoffeeStore),咖啡店类具有点咖啡功能。</p><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/image-20220728133746841.png" alt="image-20220728133746841"></p><p>在Java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象就会对该对象耦合严重，假如我们要更换对象所有new对象的地方都需要修改一遍这显然<strong>违背了软件设计的开闭原则</strong>，如果我们使用工厂来生产对象，我们只需要和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂更换该对象即可。所以说工厂模式最大的优点就是解耦。</p><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>简单工厂模式不属于GOF的23种设计模式，但是是经常使用的编程习惯。</p><p>结构：</p><ul><li>抽象产品：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品：实现或者继承产品的子类。</li><li>具体工厂：提供了创建产品的方法，调用者通过该方法来创建产品。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleCoffeeFactory</span> &#123;<br><br>    <span class="hljs-keyword">public</span> Coffee <span class="hljs-title function_">createCoffee</span><span class="hljs-params">(String type)</span>&#123;<br>        <span class="hljs-comment">//声明Coffee类型的变量，根据不同类型创建不同的coffee子类对象</span><br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">coffee</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;american&quot;</span>.equals(type))&#123;<br>            coffee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AmericanCoffee</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;latte&quot;</span>.equals(type))&#123;<br>            coffee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LatteCoffee</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;对不起，您所点的咖啡没有&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> coffee;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一旦有了SimpleCoffeeFactory,CoffeeStore类种的orderCoffee()就变成了此对象的客户，后期如果需要Coffee对象可以直接从工厂获得，这样接触了和Coffee实现类的耦合，同时又产生了新的耦合，CoffeeStore和SimpleCoffeeFactory的耦合。工厂对象和商品对象的耦合。</p><p>如果后期在添加新品种咖啡又需要修改SimpleCoffeeFactory的代码违背了开闭原则。</p><p><strong>静态工厂</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleCoffeeFactory</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Coffee <span class="hljs-title function_">createCoffee</span><span class="hljs-params">(String type)</span>&#123;<br>        <span class="hljs-comment">//声明Coffee类型的变量，根据不同类型创建不同的coffee子类对象</span><br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">coffee</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;american&quot;</span>.equals(type))&#123;<br>            coffee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AmericanCoffee</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;latte&quot;</span>.equals(type))&#123;<br>            coffee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LatteCoffee</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;对不起，您所点的咖啡没有&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> coffee;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//======================================================================================</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoffeeStore</span> &#123;<br>    <span class="hljs-keyword">public</span> Coffee <span class="hljs-title function_">orderCoffee</span><span class="hljs-params">(String type)</span>&#123;<br><br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">coffee</span> <span class="hljs-operator">=</span> SimpleCoffeeFactory.createCoffee(type);<br>        <span class="hljs-comment">//加配料</span><br>        coffee.addsugar();<br>        coffee.addMile();<br>        <span class="hljs-keyword">return</span> coffee;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>&#x3D;&gt;使用工厂方法模式可以完美解决以上简单工厂的缺点，完全遵循开闭原则</p><p>定义一个用于创建对象的接口，让子类决定实例化那个产品对象。工厂方法使一个产品类的实例化延迟到其工厂的子类</p><p><strong>结构：</strong></p><ul><li><p>抽象工厂：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</p></li><li><p>具体工厂：主要实现抽象工厂中的抽象方法，完成具体产品的创建。</p></li><li><p>抽象产品：定义了产品的规范，描述了产品的主要特征和功能。</p></li><li><p>具体产品：实现了抽象产品所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</p><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/image-20220728141347987.png" alt="image-20220728141347987"></p><p>优点：</p><ol><li>用户只需要知道具体工厂的名称就可得到所要产品，无须知道产品的具体创建流程</li><li>无须对原工厂进行任何修改，满足开闭原则</li></ol><p>缺点：</p><ol><li>每增加一个产品就需要增加一个具体产品类和一个对应的具体工厂类，增加了系统复杂度</li></ol></li></ul><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>&#x3D;&gt;是一种为访问类提供一个创建一组相关或互相依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构，</p><p>抽象工厂模式是工厂方法模式的升级版，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</p><p><strong>结构：</strong></p><ul><li>抽象工厂：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</li><li>具体工厂：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li><li>抽象产品：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li><li>具体产品：实现了抽象产品角色所定义的接口，由具体工厂创建，它同具体工厂之间是多对一的关系</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/image-20220728151518726.png" alt="image-20220728151518726"></p><p>如果需要加同一个产品族，只需要再加一个对应的工厂类即可，不需要修改其他类。</p><p>优点： 当同一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用一个产品族对象。</p><p>缺点：当产品族需要加一个新产品时，所有工厂类都需要进行修改</p><h4 id="模式拓展"><a href="#模式拓展" class="headerlink" title="模式拓展"></a>模式拓展</h4><p><strong>简单工厂+配置文件解除耦合</strong></p><p>可以通过工厂模式+配置文件的方式解除工厂对象和产品对象的耦合。在工厂类中加载配置文件中的全类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可。</p><p>1、自定义配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">american</span>=<span class="hljs-string">com.ming.pattern.factory.config_factory.AmericanCoffee</span><br><span class="hljs-attr">latte</span>=<span class="hljs-string">com.ming.pattern.factory.config_factory.LatteCoffee</span><br></code></pre></td></tr></table></figure><p>2、改进工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoffeeFactory</span> &#123;<br>    <span class="hljs-comment">//加载配置文件，获取配置文件中配置的全类名，并创建该类的对象进行存储</span><br>    <span class="hljs-comment">//1、定义容器对象存储咖啡对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;String,Coffee&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Coffee&gt;();<br>    <span class="hljs-comment">//2、加载配置文件，只需要加载一次</span><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-comment">//2.1创建properties对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//2.2调用p对象中的load方法进行配置文件的加载</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> CoffeeFactory.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;bean.properties&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            p.load(is);<br>            <span class="hljs-comment">//从p集合中获取全类名并创建对象</span><br>            Set&lt;Object&gt; keys = p.keySet();<br>            <span class="hljs-keyword">for</span> (Object key : keys) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> p.getProperty((String) key);<br>                <span class="hljs-comment">//通过反射技术创建对象</span><br>                <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(className);<br>                <span class="hljs-type">Coffee</span> <span class="hljs-variable">coffee</span> <span class="hljs-operator">=</span>(Coffee) clazz.newInstance();<br>                <span class="hljs-comment">//将名称和对象存储到容器中</span><br>                map.put((String) key,coffee);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//根据名称获取对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Coffee <span class="hljs-title function_">creatCoffee</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> map.get(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JDK源码解析-Collection-iterator"><a href="#JDK源码解析-Collection-iterator" class="headerlink" title="JDK源码解析-Collection.iterator"></a>JDK源码解析-Collection.iterator</h4><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/image-20220728174508135.png" alt="image-20220728174508135"></p><p>Collection接口是抽象工厂类，ArrayList 是具体的工厂类；Iterator 接口是抽象商品类，ArrayList 类中的Iter内部类是具体的商品类。在具体工厂类中iterator()方法创建具体的商品类对象。</p><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>&#x3D;&gt; 用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</p><p><strong>结构：</strong></p><ul><li>抽象原型类：规定了具体原型对象必须实现的clone()方法</li><li>具体原型类：实现抽象原型类的clone()方法，它是可以被复制的对象</li><li>访问类：使用具体原型类中的clone()方法来复制新的对象</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/image-20220728175229700.png" alt="image-20220728175229700"></p><p>原型模式分为：浅克隆和深克隆</p><h4 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h4><blockquote><p>浅克隆：创建一个新对象，新对象的属性和原来的对象完全相同，对于非基本类型属性，仍可指向原有属性所指向的内存地址。</p></blockquote><p>Object类中提供了clone()方法来实现浅克隆。Cloneable() 接口是上面类图中的抽象原型类，而实现了Cloneable接口的子实现类就是具体的原型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Realizetype</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Realizetype</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;具体的原型对象创建完成！&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Realizetype <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;原型复制成功&quot;</span>);<br>        <span class="hljs-keyword">return</span> (Realizetype) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-comment">//创建一个原型类对象</span><br>        <span class="hljs-type">Realizetype</span> <span class="hljs-variable">realizetype</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Realizetype</span>();<br>        <span class="hljs-comment">//调用Realizetype类中的clone 方法进行对象的kelong;</span><br>        <span class="hljs-type">Realizetype</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> realizetype.clone();<br>        <span class="hljs-comment">//判断是否为同一对象</span><br>        System.out.println(realizetype==clone);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>用原型模式生成”三好学生“奖状</strong></p><p>同一个学校的”三好学生“奖状除了获奖人姓名不同外，其他都相同，可以使用原型模式复制多个”三好学生“奖状出来，然后修改奖状上的名字即可。</p><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/image-20220728181041069.png" alt="image-20220728181041069"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Citation</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name + <span class="hljs-string">&quot;同学被评为三好学生，特发此状&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Citation <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> (Citation) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用场景</strong>：对象的创建非常复杂可以使用原型模式快速创建对象、性能和安全要求比较高。</p><h4 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a><strong>深克隆</strong></h4><blockquote><p>深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CitaionTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Citation</span> <span class="hljs-variable">citation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Citation</span>();<br>        <span class="hljs-comment">//创建张三学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        stu.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        citation.setStudent(stu);<br><br>        <span class="hljs-comment">//创建对象输出流对象</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:/Workspace/ideajwork/design_patterns/a.txt&quot;</span>));<br>        <span class="hljs-comment">//写对象</span><br>        oos.writeObject(citation);<br>        <span class="hljs-comment">//释放资源</span><br>        oos.close();<br>        <span class="hljs-comment">//创建对象输入流对象</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:/Workspace/ideajwork/design_patterns/a.txt&quot;</span>));<br>        <span class="hljs-comment">//读取对象</span><br>        <span class="hljs-type">Citation</span> <span class="hljs-variable">citation1</span> <span class="hljs-operator">=</span> (Citation) ois.readObject();<br>        ois.close();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu1</span> <span class="hljs-operator">=</span> citation1.getStudent();<br>        stu1.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>        citation.show();<br>        citation1.show();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：对象需要序列化才能以流方式输入输出，否则会报错。</p><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>&#x3D;&gt;将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。</p><ul><li>分离了部件的构造(由Builder来负责)和装配(由Director负责)。从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况。</li><li>由于实现了构建和装配的解耦，不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现可构建算法、装配算法的解耦。实现了更好的复用</li><li>建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</li></ul><p><strong>结构：</strong></p><ul><li>抽象建造者类(Builder)：这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的对象部件的创建。</li><li>具体建造者类(ConcreteBuilder)：实现Builder接口，完成复杂产品的各个部件的具体创建方法。在构造过程完成后，提供产品实例。</li><li>产品类(Product)：要创建的复杂对象。</li><li>指挥者类(Director)：调用具体创建者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或某种顺序创建。</li></ul><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/image-20220729015724614.png" alt="image-20220729015724614"></p><p><strong>创建自行车</strong></p><p>生产自行车是一个复杂的过程，它包含了车架，车座等组件的生产。而车架又有碳纤维，铝合金等材质，车座有橡胶，真皮等材质。对于自行车的生产就可以使用建造者模式。</p><p>Bike是产品，包含车架，车座等组件；Builder是抽象建造者，MobikeBuilder和OfoBuilder是具体建造者；Director是指挥者。</p><p><img src="/Blog/Blog/2022/09/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/image-20220729133123851.png" alt="image-20220729133123851"></p><p>产品类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bike</span> &#123;<br>    <span class="hljs-keyword">private</span> String frame; <span class="hljs-comment">//车架</span><br>    <span class="hljs-keyword">private</span> String seat; <span class="hljs-comment">//车座</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFrame</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> frame;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFrame</span><span class="hljs-params">(String frame)</span> &#123;<br>        <span class="hljs-built_in">this</span>.frame = frame;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSeat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> seat;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSeat</span><span class="hljs-params">(String seat)</span> &#123;<br>        <span class="hljs-built_in">this</span>.seat = seat;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>抽象建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>    <span class="hljs-comment">//声明Bike类型的变量并进行赋值</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Bike</span> <span class="hljs-variable">bike</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bike</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildFrame</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildSeat</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//构建自行车的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Bike <span class="hljs-title function_">creatBike</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>具体建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Mobile具体建造者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MobileBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Builder</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildFrame</span><span class="hljs-params">()</span> &#123;<br>        bike.setFrame(<span class="hljs-string">&quot;碳纤维车架&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildSeat</span><span class="hljs-params">()</span> &#123;<br>        bike.setSeat(<span class="hljs-string">&quot;真皮车座&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Bike <span class="hljs-title function_">creatBike</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bike;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Ofo具体建造者者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OfoBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Builder</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildFrame</span><span class="hljs-params">()</span> &#123;<br>        bike.setFrame(<span class="hljs-string">&quot;铝合金车架&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildSeat</span><span class="hljs-params">()</span> &#123;<br>        bike.setSeat(<span class="hljs-string">&quot;橡胶车座&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Bike <span class="hljs-title function_">creatBike</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bike;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>指挥者类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Director</span> &#123;<br>    <span class="hljs-comment">//声明builder类型变量</span><br>    <span class="hljs-keyword">private</span> Builder builder;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Director</span><span class="hljs-params">(Builder builder)</span>&#123;<br>        <span class="hljs-built_in">this</span>.builder = builder;<br>    &#125;<br><br>    <span class="hljs-comment">//组装自行车功能</span><br>    <span class="hljs-keyword">public</span> Bike <span class="hljs-title function_">construct</span><span class="hljs-params">()</span>&#123;<br>        builder.buildFrame();<br>        builder.buildSeat();<br>        <span class="hljs-keyword">return</span> builder.bike;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>tips:可以将指挥者类和抽象建造者类结合。</p><p>&#x3D;&gt;这样做确实简化了系统结构但是这样也加重了抽象建造者类的负担，不符合单一职责。当指挥者类业务代繁杂时建议还是封装在Director类中。</p><p><strong>当构建对象需要传递很多参数时，代码的可读性及使用成本就变得非常的高，这时使用建造者模式就可以有效解决。</strong></p><h4 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h4><p>建造者模式的另一种用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> &#123;<br>    <span class="hljs-keyword">private</span> String cpu;<br>    <span class="hljs-keyword">private</span> String screen;<br>    <span class="hljs-keyword">private</span> String memory;<br>    <span class="hljs-keyword">private</span> String mainboard;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Computer</span><span class="hljs-params">(Builder builder)</span>&#123;<br>        <span class="hljs-built_in">this</span>.cpu = builder.cpu;<br>        <span class="hljs-built_in">this</span>.screen = builder.screen;<br>        <span class="hljs-built_in">this</span>.memory = builder.memory;<br>        <span class="hljs-built_in">this</span>.mainboard = builder.mainboard;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Computer&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, screen=&#x27;&quot;</span> + screen + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, memory=&#x27;&quot;</span> + memory + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, mainboard=&#x27;&quot;</span> + mainboard + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span>&#123;<br>        <span class="hljs-keyword">private</span> String cpu;<br>        <span class="hljs-keyword">private</span> String screen;<br>        <span class="hljs-keyword">private</span> String memory;<br>        <span class="hljs-keyword">private</span> String mainboard;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">cpu</span><span class="hljs-params">(String cpu)</span>&#123;<br>            <span class="hljs-built_in">this</span>.cpu = cpu;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">screen</span><span class="hljs-params">(String screen)</span>&#123;<br>            <span class="hljs-built_in">this</span>.screen = screen;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">memory</span><span class="hljs-params">(String memory)</span>&#123;<br>            <span class="hljs-built_in">this</span>.memory = memory;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">mainboard</span><span class="hljs-params">(String mainboard)</span>&#123;<br>            <span class="hljs-built_in">this</span>.mainboard = mainboard;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Computer <span class="hljs-title function_">build</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>(<span class="hljs-built_in">this</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCpu</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cpu;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCpu</span><span class="hljs-params">(String cpu)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cpu = cpu;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getScreen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> screen;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScreen</span><span class="hljs-params">(String screen)</span> &#123;<br>        <span class="hljs-built_in">this</span>.screen = screen;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMemory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> memory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMemory</span><span class="hljs-params">(String memory)</span> &#123;<br>        <span class="hljs-built_in">this</span>.memory = memory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMainboard</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mainboard;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMainboard</span><span class="hljs-params">(String mainboard)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mainboard = mainboard;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//===========================================================================</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>.Builder()<br>                                        .cpu(<span class="hljs-string">&quot;intel&quot;</span>)<br>                                        .screen(<span class="hljs-string">&quot;samsung&quot;</span>)<br>                                        .memory(<span class="hljs-string">&quot;金士顿&quot;</span>)<br>                                        .mainboard(<span class="hljs-string">&quot;华硕&quot;</span>)<br>                                        .build();<br>        System.out.println(computer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>提高了开发效率。还可以使用链式编程！</p>]]></content>
    
    
    
    <tags>
      
      <tag>32种设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC Utils</title>
    <link href="/Blog/2022/09/12/JDBC-Utils/"/>
    <url>/Blog/2022/09/12/JDBC-Utils/</url>
    
    <content type="html"><![CDATA[<p>JDBC Utils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String user;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver;<br>    <span class="hljs-keyword">static</span> &#123;<br><br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            pro.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>((<span class="hljs-string">&quot;src/JDBC.properties&quot;</span>)));<br>            url = pro.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            user = pro.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>            password = pro.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            driver = pro.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>            Class.forName(driver);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url,user,password);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(ResultSet rs,Statement stmt,Connection conn)</span>&#123;<br><br>        <span class="hljs-keyword">if</span>( rs != <span class="hljs-literal">null</span>)&#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span>( stmt != <span class="hljs-literal">null</span>)&#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br><br>        &#125;<br><br>         <span class="hljs-keyword">if</span>( conn != <span class="hljs-literal">null</span>)&#123;<br><br>             <span class="hljs-keyword">try</span> &#123;<br>                 conn.close();<br>             &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                 throwables.printStackTrace();<br>             &#125;<br><br>         &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>JDBC.properties:<br>url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;text?serverTimezone&#x3D;UTC<br>user&#x3D;root<br>password&#x3D;123456<br>driver&#x3D;com.mysql.cj.jdbc.Driver</p><p>课程设计链接mysql例子：</p><p>  public  void getselcF(){</p><pre><code class="hljs">    Connection connection=null;    Statement statement=null;    ResultSet resultSet=null;    SelectCourse selectCourse;    ArrayList&lt;SelectCourse&gt; fr =new ArrayList&lt;&gt;();    try &#123;        connection=JDBCUtils.getConnection();        String sql =&quot;select * from studcourse&quot;;        statement=connection.createStatement();        resultSet=statement.executeQuery(sql);        while(resultSet.next())&#123;            String num=resultSet.getString(&quot;学号&quot;);            String name=resultSet.getString(&quot;姓名&quot;);            String courseNum=resultSet.getString(&quot;课程号&quot;);            String courseName=resultSet.getString(&quot;课程名&quot;);            String opSemester=resultSet.getString(&quot;开课学期&quot;);            String selectFlag=resultSet.getString(&quot;退选标志&quot;);            selectCourse =new SelectCourse(num,name,courseNum,courseName,opSemester,selectFlag);            fr.add(selectCourse);        &#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>jdbc</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
